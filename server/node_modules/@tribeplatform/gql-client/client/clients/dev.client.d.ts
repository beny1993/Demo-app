import { ActionFields, AppCollaboratorFields, AppPublicationFields, EventTypeFields, GlobalAppFields, PluralNetworkFields } from '../../graphql/index.js';
import { Action, App, AppCollaborator, CreateImageInput, Image, MutationGlobalAddAppCollaboratorArgs, MutationGlobalCreateAppArgs, MutationGlobalRegenerateClientSecretArgs, MutationGlobalUpdateAppArgs, MutationGlobalDeleteAppArgs, MutationGlobalRemoveAppCollaboratorArgs, PaginatedApp, PaginatedNetwork, QueryGlobalAppArgs, QueryGlobalAppCollaboratorsArgs, QueryGlobalAppsArgs, QueryGlobalNetworksArgs, SignedUrl, UploadImagesArgs, QueryGlobalAppPublicationsArgs, AppPublication, MutationGlobalPublishAppPrivatelyArgs, MutationGlobalUnPublishAppPrivatelyArgs, MutationGlobalTestAppWebhookArgs, EventType } from '../../types/index.js';
import { GraphqlClient } from '../graphql.client.js';
export declare class DevClient {
    private client;
    constructor(client: GraphqlClient);
    apps(variables: QueryGlobalAppsArgs, fields?: GlobalAppFields, accessToken?: string): Promise<PaginatedApp>;
    app(variables: QueryGlobalAppArgs, fields?: GlobalAppFields, accessToken?: string): Promise<App>;
    createApp(variables: MutationGlobalCreateAppArgs, fields?: GlobalAppFields, accessToken?: string): Promise<App>;
    updateApp(variables: MutationGlobalUpdateAppArgs, fields?: GlobalAppFields, accessToken?: string): Promise<App>;
    deleteApp(variables: MutationGlobalDeleteAppArgs, fields?: GlobalAppFields, accessToken?: string): Promise<App>;
    networks(variables: QueryGlobalNetworksArgs, fields?: PluralNetworkFields, accessToken?: string): Promise<PaginatedNetwork>;
    regenerateClientSecret(variables: MutationGlobalRegenerateClientSecretArgs, fields?: GlobalAppFields, accessToken?: string): Promise<App>;
    createImages(variables: CreateImageInput[]): Promise<Array<SignedUrl>>;
    uploadImages(input: UploadImagesArgs[]): Promise<Array<Image>>;
    appCollaborators(variables: QueryGlobalAppCollaboratorsArgs, fields?: AppCollaboratorFields, accessToken?: string): Promise<Array<AppCollaborator>>;
    addAppCollaborator(variables: MutationGlobalAddAppCollaboratorArgs, fields?: AppCollaboratorFields, accessToken?: string): Promise<AppCollaborator>;
    removeAppCollaborator(variables: MutationGlobalRemoveAppCollaboratorArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    appPublications(variables: QueryGlobalAppPublicationsArgs, fields?: AppPublicationFields, accessToken?: string): Promise<Array<AppPublication>>;
    publishAppPrivately(variables: MutationGlobalPublishAppPrivatelyArgs, fields?: AppPublicationFields, accessToken?: string): Promise<AppPublication>;
    unPublishAppPrivately(variables: MutationGlobalUnPublishAppPrivatelyArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    testAppWebhook(variables: MutationGlobalTestAppWebhookArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    eventTypes(variables: any, fields?: EventTypeFields, accessToken?: string): Promise<Array<EventType>>;
}
