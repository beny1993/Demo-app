export const hasScopesPermission = (permissions, scopes) => {
    var _a;
    const perms = Array.isArray(permissions)
        ? permissions
        : (_a = permissions === null || permissions === void 0 ? void 0 : permissions.authMemberProps) === null || _a === void 0 ? void 0 : _a.permissions;
    return scopes.map(s => {
        var _a;
        const has = perms === null || perms === void 0 ? void 0 : perms.find(p => p.name === s);
        return Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized);
    });
};
export const hasActionPermission = (permissions = [], scope) => {
    var _a, _b, _c;
    const has = permissions === null || permissions === void 0 ? void 0 : permissions.find(p => p.name === scope);
    return {
        authorized: Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized),
        reason: (_b = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _b === void 0 ? void 0 : _b.reason,
        requiredPlan: (_c = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _c === void 0 ? void 0 : _c.requiredPlan,
        actionPermission: has,
    };
};
export const hasValuePermission = (permissions = [], value) => {
    var _a, _b, _c;
    const has = permissions === null || permissions === void 0 ? void 0 : permissions.find(p => p.value === value);
    return {
        authorized: Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized),
        reason: (_b = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _b === void 0 ? void 0 : _b.reason,
        requiredPlan: (_c = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _c === void 0 ? void 0 : _c.requiredPlan,
        value: has === null || has === void 0 ? void 0 : has.value,
        valuePermission: has,
    };
};
export const hasInputPermission = (permissions = [], path) => {
    var _a, _b, _c;
    const has = permissions === null || permissions === void 0 ? void 0 : permissions.find(p => p.path === path);
    return {
        authorized: Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized),
        reason: (_b = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _b === void 0 ? void 0 : _b.reason,
        requiredPlan: (_c = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _c === void 0 ? void 0 : _c.requiredPlan,
        values: has === null || has === void 0 ? void 0 : has.values,
        inputPermission: has,
    };
};
