import { ActionPermissions, Space, Post, Member, Network, InputPathPermissions, ValuePermissions, Mutation, Query } from '../types/index.js';
export interface MutationsAndQueries extends Mutation, Query {
    __typename: never;
}
export declare type ApolloApis = keyof MutationsAndQueries;
export declare const hasScopesPermission: (permissions: ActionPermissions[] | Partial<Space> | Partial<Post> | Partial<Network> | Partial<Member>, scopes: string[]) => boolean[];
declare type hasActionPermission = (permissions: ActionPermissions[] | undefined, scope: ApolloApis) => {
    authorized: boolean;
    reason: ActionPermissions['isAuthorized']['reason'];
    requiredPlan: ActionPermissions['isAuthorized']['requiredPlan'];
    actionPermission: ActionPermissions;
};
export declare const hasActionPermission: hasActionPermission;
declare type hasValuePermission = (permissions: ValuePermissions[], value: string) => {
    authorized: boolean;
    reason: ValuePermissions['isAuthorized']['reason'];
    requiredPlan: ValuePermissions['isAuthorized']['requiredPlan'];
    value: ValuePermissions['value'];
    valuePermission: ValuePermissions;
};
export declare const hasValuePermission: hasValuePermission;
declare type hasInputPermission = (permissions: InputPathPermissions[], path: string) => {
    authorized: boolean;
    reason: InputPathPermissions['isAuthorized']['reason'];
    requiredPlan: InputPathPermissions['isAuthorized']['requiredPlan'];
    values: ValuePermissions[];
    inputPermission: InputPathPermissions;
};
export declare const hasInputPermission: hasInputPermission;
export {};
