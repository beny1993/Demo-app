var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { globalAddAppCollaboratorGQLMutation, globalAppCollaboratorsQuery, globalAppGQLQuery, globalAppPublicationsQuery, globalAppsGQLQuery, globalCreateAppGQLMutation, globalCreateImageGQLMutation, globalDeleteAppGQLMutation, globalEventTypesQuery, globalNetworksGQLQuery, globalPublishAppPrivatelyGQLMutation, globalRegenerateClientSecret, globalRemoveAppCollaboratorGQLMutation, globalTestAppWebhookGQLMutation, globalUnPublishAppPrivatelyGQLMutation, globalUpdateAppGQLMutation, } from '../../graphql/index.js';
export class DevClient {
    constructor(client) {
        this.client = client;
    }
    async apps(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalApps;
    }
    async app(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalApp;
    }
    async createApp(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalCreateAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalCreateApp;
    }
    async updateApp(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalUpdateAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalUpdateApp;
    }
    async deleteApp(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalDeleteAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalDeleteApp;
    }
    async networks(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalNetworksGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalNetworks;
    }
    async regenerateClientSecret(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalRegenerateClientSecret(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalRegenerateClientSecret;
    }
    async createImages(variables) {
        const result = await this.client.authorizedRequest({
            query: globalCreateImageGQLMutation(),
            variables: {
                input: variables,
            },
        });
        return result === null || result === void 0 ? void 0 : result.globalCreateImages;
    }
    async uploadImages(input) {
        const output = [];
        const signedUrls = await this.createImages(input.map((_a) => {
            var { file } = _a, rest = __rest(_a, ["file"]);
            return (Object.assign({ contentType: file.type }, rest));
        }));
        const promises = signedUrls.map((signedUrl, index) => {
            const { file } = input[index];
            const formData = new FormData();
            const parsedFields = JSON.parse(signedUrl.fields);
            // The order of appended key-value into the formData matters.
            Object.entries(parsedFields).forEach(([key, value]) => {
                formData.append(key, String(value));
            });
            formData.append('Content-Type', file.type);
            formData.append('file', file);
            return fetch(signedUrl.signedUrl, {
                method: 'POST',
                body: formData,
            })
                .then(r => r.text())
                .then(() => {
                output.push({
                    id: signedUrl.mediaId,
                    url: signedUrl.mediaUrl,
                    urls: signedUrl.urls,
                    cropX: input[index].cropX,
                    cropY: input[index].cropY,
                    cropZoom: input[index].cropZoom,
                    name: input[index].name,
                    cropHeight: input[index].cropHeight,
                    cropWidth: input[index].cropWidth,
                    downloadUrl: signedUrl.mediaDownloadUrl,
                });
            })
                .catch(e => {
                console.debug({ e });
            });
        });
        await Promise.all(promises.filter(Boolean));
        return output;
    }
    async appCollaborators(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppCollaboratorsQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalAppCollaborators;
    }
    async addAppCollaborator(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAddAppCollaboratorGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalAddAppCollaborator;
    }
    async removeAppCollaborator(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalRemoveAppCollaboratorGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalRemoveAppCollaborator;
    }
    async appPublications(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppPublicationsQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalAppPublications;
    }
    async publishAppPrivately(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalPublishAppPrivatelyGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalPublishAppPrivately;
    }
    async unPublishAppPrivately(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalUnPublishAppPrivatelyGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalUnPublishAppPrivately;
    }
    async testAppWebhook(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalTestAppWebhookGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalTestAppWebhook;
    }
    async eventTypes(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalEventTypesQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalEventTypes;
    }
}
