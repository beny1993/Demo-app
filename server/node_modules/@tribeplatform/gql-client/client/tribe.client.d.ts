import { AuthTokenFields, LimitedTokenFields, SearchEntityFields } from '../graphql/index.js';
import { AppToken, AuthToken, ExtraProperty, PaginatedEmailLog, QueryEmailLogsArgs, QueryExtraPropertiesArgs, QueryLimitedTokenArgs, QuerySearchArgs, QueryTokensArgs, SearchResult } from '../types/index.js';
import { AppClient } from './clients/app.client.js';
import { AuthClient } from './clients/auth.client.js';
import { BadgeClient } from './clients/badge.client.js';
import { BillingClient } from './clients/billing.client.js';
import { CollectionsClient } from './clients/collections.client.js';
import { DevClient } from './clients/dev.client.js';
import { InvitationsClient } from './clients/invitations.client.js';
import { MediaClient } from './clients/media.client.js';
import { MembersClient } from './clients/members.client.js';
import { ModerationClient } from './clients/moderation.client.js';
import { NetworkClient } from './clients/network.client.js';
import { NotificationsClient } from './clients/notifications.client.js';
import { PostsClient } from './clients/posts.client.js';
import { ReportClient } from './clients/report.client.js';
import { RolesClient } from './clients/roles.client.js';
import { SlatesClient } from './clients/slates.client.js';
import { SpacePostTypeClient } from './clients/space-post-type.client.js';
import { SpaceMembersClient } from './clients/spaceMembers.client.js';
import { SpaceMembershipClient } from './clients/spaceMembership.client.js';
import { SpaceRolesClient } from './clients/spaceRoles.client.js';
import { SpacesClient } from './clients/spaces.client.js';
import { TagsClient } from './clients/tags.client.js';
import { ThemeClient } from './clients/theme.client.js';
import { TribeClientOptions } from './graphql.client.js';
export declare class TribeClient {
    app: AppClient;
    auth: AuthClient;
    badge: BadgeClient;
    billing: BillingClient;
    collections: CollectionsClient;
    dev: DevClient;
    invitations: InvitationsClient;
    media: MediaClient;
    members: MembersClient;
    moderation: ModerationClient;
    network: NetworkClient;
    notifications: NotificationsClient;
    posts: PostsClient;
    report: ReportClient;
    roles: RolesClient;
    spaceMembers: SpaceMembersClient;
    spaceMembership: SpaceMembershipClient;
    spaceRoles: SpaceRolesClient;
    spaces: SpacesClient;
    spacePostType: SpacePostTypeClient;
    tags: TagsClient;
    theme: ThemeClient;
    slates: SlatesClient;
    private client;
    constructor(options: TribeClientOptions);
    setToken(accessToken: string): void;
    /**
     * Get the guest access token for a community.
     * @query tokens(): AuthToken!
     * @example
     * ```typescript
     *  t.client.getTokens({networkDomain: 'community.tribe.so'})
     * ```
     * @returns The AuthToken.
     */
    getTokens(variables: QueryTokensArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    getLimitedToken(variables: QueryLimitedTokenArgs, fields?: LimitedTokenFields, useBasicToken?: boolean): Promise<AppToken>;
    search(variables: QuerySearchArgs, fields?: SearchEntityFields, accessToken?: string): Promise<SearchResult>;
    generateToken(options: {
        networkId: string;
        memberId?: string;
    }): Promise<string>;
    extraProperties(variables: QueryExtraPropertiesArgs, accessToken?: string): Promise<ExtraProperty[]>;
    emailLogs(variables: QueryEmailLogsArgs, accessToken?: string): Promise<PaginatedEmailLog>;
}
