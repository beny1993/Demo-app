import { ActionFields, PostFields, PostTypeFields, MemberFields } from '../../graphql/index.js';
import { Action, MutationAddReactionArgs, MutationCreatePostArgs, MutationCreateReplyArgs, MutationDeletePostArgs, MutationHidePostArgs, MutationPinPostToSpaceArgs, MutationRemoveReactionArgs, MutationUnhidePostArgs, MutationUnpinPostFromSpaceArgs, MutationUpdatePostArgs, PaginatedPost, PaginatedPostReactionParticipant, PaginatedPostType, Post, PostType, QueryFeedArgs, QueryGetPostsArgs, QueryMemberPostsArgs, QueryPostReactionParticipantsArgs, QueryPostTypesArgs, QueryRepliesArgs, QueryTagPostsArgs, Scalars } from '../../types/index.js';
import { GraphqlClient } from '../graphql.client.js';
export declare class PostsClient {
    private client;
    constructor(client: GraphqlClient);
    listPostTypes(variables: QueryPostTypesArgs, fields?: PostTypeFields, customToken?: string): Promise<PaginatedPostType>;
    getPostType(id: Scalars['ID'], fields?: PostTypeFields): Promise<PostType>;
    create(variables: MutationCreatePostArgs, fields?: PostFields, accessToken?: string): Promise<Post>;
    list(variables: QueryGetPostsArgs | QueryTagPostsArgs, fields?: PostFields, accessToken?: string): Promise<PaginatedPost>;
    get(id: Scalars['ID'], fields?: PostFields, accessToken?: string): Promise<Post>;
    feed(variables?: QueryFeedArgs, fields?: PostFields, accessToken?: string): Promise<PaginatedPost>;
    reply(postId: Scalars['ID'], variables: Omit<MutationCreateReplyArgs, 'postId'>, fields?: PostFields, accessToken?: string): Promise<Post>;
    byMember(memberId: Scalars['ID'], variables?: Omit<QueryMemberPostsArgs, 'memberId'>, fields?: PostFields, accessToken?: string): Promise<PaginatedPost>;
    replies(variables: QueryRepliesArgs, fields?: PostFields): Promise<PaginatedPost>;
    addReaction(variables: MutationAddReactionArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    removeReaction(variables: MutationRemoveReactionArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    hide(variables: MutationHidePostArgs, accessToken?: string): Promise<Action>;
    unhide(variables: MutationUnhidePostArgs, accessToken?: string): Promise<Action>;
    delete(variables: MutationDeletePostArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    update(variables: MutationUpdatePostArgs, fields?: PostFields, accessToken?: string): Promise<Post>;
    pinToSpace(variables: MutationPinPostToSpaceArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    unpinFromSpace(variables: MutationUnpinPostFromSpaceArgs, fields?: ActionFields, accessToken?: string): Promise<Action>;
    reactionParticipants(variables: QueryPostReactionParticipantsArgs, fields?: MemberFields, accessToken?: string): Promise<PaginatedPostReactionParticipant>;
}
