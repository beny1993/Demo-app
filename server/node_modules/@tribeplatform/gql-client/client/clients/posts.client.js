import { addReactionGQLMutation, createPostGQLQuery, createReplyGQLQuery, deletePostGQLMutation, getFeedGQLQuery, getMemberPostsGQLQuery, getPostGQLQuery, getPostTypeGQLQuery, getPostTypesGQLQuery, getPostsGQLQuery, getRepliesGQLQuery, getSpaceTaggedPostsGQLQuery, hidePostGQLMutation, pinPostToSpaceGQLMutation, removeReactionGQLMutation, unhidePostGQLMutation, unpinPostFromSpaceGQLMutation, updatePostGQLMutation, postReactionParticipantsGQLQuery, } from '../../graphql/index.js';
export class PostsClient {
    constructor(client) {
        this.client = client;
    }
    async listPostTypes(variables, fields = 'basic', customToken) {
        const result = await this.client.authorizedRequest({
            query: getPostTypesGQLQuery(fields),
            variables,
            customToken,
        });
        return result.postTypes;
    }
    async getPostType(id, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: getPostTypeGQLQuery(fields),
            variables: { id },
        });
        return result.postType;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createPostGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.createPost;
    }
    async list(variables, fields = 'basic', accessToken) {
        let query;
        if ('tagId' in variables) {
            query = getSpaceTaggedPostsGQLQuery(fields);
        }
        else {
            query = getPostsGQLQuery(fields);
        }
        const result = await this.client.authorizedRequest({
            query,
            variables,
            customToken: accessToken,
        });
        if ('tagPosts' in result) {
            return result.tagPosts;
        }
        return result.posts;
    }
    async get(id, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getPostGQLQuery(fields),
            variables: { id },
            customToken: accessToken,
        });
        return result.post;
    }
    async feed(variables = { limit: 10 }, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getFeedGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.feed;
    }
    async reply(postId, variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createReplyGQLQuery(fields),
            variables: Object.assign({ postId }, variables),
            customToken: accessToken,
        });
        return result.createReply;
    }
    async byMember(memberId, variables = { limit: 10 }, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMemberPostsGQLQuery(fields),
            variables: Object.assign({ memberId }, variables),
            customToken: accessToken,
        });
        return result.memberPosts;
    }
    async replies(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: getRepliesGQLQuery(fields),
            variables,
        });
        return result.replies;
    }
    async addReaction(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: addReactionGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.addReaction;
    }
    async removeReaction(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: removeReactionGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.removeReaction;
    }
    async hide(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: hidePostGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.hidePost;
    }
    async unhide(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: unhidePostGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.unhidePost;
    }
    async delete(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deletePostGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.deletePost;
    }
    async update(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updatePostGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.updatePost;
    }
    async pinToSpace(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: pinPostToSpaceGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.pinPostToSpace;
    }
    async unpinFromSpace(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: unpinPostFromSpaceGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.unpinPostFromSpace;
    }
    async reactionParticipants(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: postReactionParticipantsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.postReactionParticipants;
    }
}
