import { createSpaceGQLQuery, deleteSpaceGQLMutation, exploreSpacesGQLQuery, getSpaceGQLQuery, getSpacePinnedPostGQLQuery, getSpacesByIdsGQLQuery, getSpacesBySlugsGQLQuery, getSpacesGQLQuery, joinSpaceGQLMutation, leaveSpaceGQLMutation, organizeSpacesInCollectionGQLMutation, getPageGqlQuery, updateSpaceGQLMutation, updateSpaceHighlightedTagsMutation, } from '../../graphql/index.js';
export class SpacesClient {
    constructor(client) {
        this.client = client;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createSpaceGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.createSpace;
    }
    async list(variables, fields, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spaces;
    }
    async listByIds(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacesByIdsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacesByIds;
    }
    async listBySlugs(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacesBySlugsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacesBySlugs;
    }
    async organize(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: organizeSpacesInCollectionGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.organizeSpacesInCollection;
    }
    async get(variables, fields = 'default', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpaceGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.space;
    }
    async getByPath(variables, fields, customToken) {
        const result = await this.client.authorizedRequest({
            query: getPageGqlQuery(fields),
            variables,
            customToken,
        });
        return result.page;
    }
    async update(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: updateSpaceGQLMutation(fields),
            variables,
        });
        return result.updateSpace;
    }
    async join(variables) {
        const result = await this.client.authorizedRequest({
            query: joinSpaceGQLMutation(),
            variables,
        });
        return result.joinSpace;
    }
    async leave(variables) {
        const result = await this.client.authorizedRequest({
            query: leaveSpaceGQLMutation(),
            variables,
        });
        return result.leaveSpace;
    }
    async pinnedPosts(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacePinnedPostGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacePinnedPosts;
    }
    async explore(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: exploreSpacesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.exploreSpaces;
    }
    async updateHighlightedTags(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateSpaceHighlightedTagsMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateSpaceHighlightedTags;
    }
    async delete(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteSpaceGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.deleteSpace;
    }
}
