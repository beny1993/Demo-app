import { AuthTokenFields } from '../../graphql/index.js';
import { MemberFields } from '../../graphql/network/member.fields.js';
import { AuthToken, Action, QueryLoginNetworkArgs, Sso, SsoUrl, QuerySsosArgs, MutationSsoRedirectArgs, MutationJoinNetworkArgs, MutationJoinNetworkWithTokenArgs, MutationJoinNetworkWithInvitationLinkArgs, MutationVerifyMemberArgs, MutationSendResetPasswordEmailArgs, MutationUpdateCustomSsoArgs, MutationUpdateDefaultSsoStatusArgs, QuerySsoMembershipsArgs, SsoMembership, QuerySsoUrlArgs, MutationConfirmResetPasswordArgs, MutationUpdatePasswordWithTokenArgs, Member, MutationLogoutNetworkArgs, MutationDeleteSsoMembershipArgs, MutationUpdateJwtSsoArgs } from '../../types/index.js';
import { GraphqlClient } from '../graphql.client.js';
export declare class AuthClient {
    private client;
    constructor(client: GraphqlClient);
    resendVerification(accessToken?: string): Promise<Action>;
    login(variables: QueryLoginNetworkArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    logout(variables: MutationLogoutNetworkArgs): Promise<Action>;
    authMember(fields?: MemberFields): Promise<Member>;
    ssoRedirect(variables: MutationSsoRedirectArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    joinNetwork(variables: MutationJoinNetworkArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    joinNetworkWithInvitationLink(variables: MutationJoinNetworkWithInvitationLinkArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    joinNetworkWithToken(variables: MutationJoinNetworkWithTokenArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    verifyMember(variables: MutationVerifyMemberArgs, fields?: AuthTokenFields): Promise<AuthToken>;
    ssos(variables: QuerySsosArgs): Promise<Sso[]>;
    sendResetPasswordEmail(variables: MutationSendResetPasswordEmailArgs, accessToken?: string): Promise<Action>;
    updateJwtSso(variables: MutationUpdateJwtSsoArgs, accessToken?: string): Promise<Sso>;
    updateCustomSso(variables: MutationUpdateCustomSsoArgs, accessToken?: string): Promise<Sso>;
    updateDefaultSsoStatus(variables: MutationUpdateDefaultSsoStatusArgs, accessToken?: string): Promise<Action>;
    ssoMemberships(variables: QuerySsoMembershipsArgs): Promise<SsoMembership[]>;
    ssoUrl(variables: QuerySsoUrlArgs): Promise<SsoUrl>;
    confirmResetPassword(variables: MutationConfirmResetPasswordArgs, accessToken?: string): Promise<Action>;
    updatePasswordWithToken(variables: MutationUpdatePasswordWithTokenArgs, accessToken?: string): Promise<Action>;
    deleteSsoMembership(variables: MutationDeleteSsoMembershipArgs): Promise<Action>;
}
