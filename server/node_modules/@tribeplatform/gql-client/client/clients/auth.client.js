import { ssoMembershipsGQLQuery, ssoUrlGQLQuery, updateCustomSsoGQLMutation, updateJwtSsoGQLMutation, updateDefaultSsoStatusGQLMutation, resendVerificationGQLQuery, deleteSsoMembershipGQLMutation, loginNetworkQuery, joinNetworkMutation, joinNetworkWithInvitationLinkMutation, joinNetworkWithTokenMutation, ssosQuery, ssoRedirectMutation, verifyMemberMutation, sendResetPasswordEmailGQLMutation, confirmResetPasswordGQLMutation, updatePasswordWithTokenGQLMutation, authMemberQuery, logoutMutation, } from '../../graphql/index.js';
export class AuthClient {
    constructor(client) {
        this.client = client;
    }
    async resendVerification(accessToken) {
        const result = await this.client.authorizedRequest({
            query: resendVerificationGQLQuery(),
            customToken: accessToken,
        });
        return result.resendVerification;
    }
    async login(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: loginNetworkQuery(fields),
            variables,
        });
        return result.loginNetwork;
    }
    async logout(variables) {
        const result = await this.client.authorizedRequest({
            query: logoutMutation(),
            variables,
        });
        return result.logoutNetwork;
    }
    async authMember(fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: authMemberQuery(fields),
        });
        return result.authMember;
    }
    async ssoRedirect(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: ssoRedirectMutation(fields),
            variables,
        });
        return result.ssoRedirect;
    }
    async joinNetwork(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: joinNetworkMutation(fields),
            variables,
        });
        return result.joinNetwork;
    }
    async joinNetworkWithInvitationLink(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: joinNetworkWithInvitationLinkMutation(fields),
            variables,
        });
        return result.joinNetworkWithInvitationLink;
    }
    async joinNetworkWithToken(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: joinNetworkWithTokenMutation(fields),
            variables,
        });
        return result.joinNetworkWithToken;
    }
    async verifyMember(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: verifyMemberMutation(fields),
            variables,
        });
        return result.verifyMember;
    }
    async ssos(variables) {
        const result = await this.client.authorizedRequest({
            query: ssosQuery(),
            variables,
        });
        return result.ssos;
    }
    async sendResetPasswordEmail(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: sendResetPasswordEmailGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.sendResetPasswordEmail;
    }
    async updateJwtSso(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateJwtSsoGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateJwtSso;
    }
    async updateCustomSso(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateCustomSsoGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateCustomSso;
    }
    async updateDefaultSsoStatus(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateDefaultSsoStatusGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateDefaultSsoStatus;
    }
    async ssoMemberships(variables) {
        const result = await this.client.authorizedRequest({
            query: ssoMembershipsGQLQuery(),
            variables,
        });
        return result.ssoMemberships;
    }
    async ssoUrl(variables) {
        const result = await this.client.authorizedRequest({
            query: ssoUrlGQLQuery(),
            variables,
        });
        return result.ssoUrl;
    }
    async confirmResetPassword(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: confirmResetPasswordGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.confirmResetPassword;
    }
    async updatePasswordWithToken(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updatePasswordWithTokenGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updatePasswordWithToken;
    }
    async deleteSsoMembership(variables) {
        const result = await this.client.authorizedRequest({
            query: deleteSsoMembershipGQLMutation(),
            variables,
        });
        return result.deleteSsoMembership;
    }
}
