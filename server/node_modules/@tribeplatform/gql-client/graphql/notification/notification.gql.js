import gql from 'graphql-tag';
import { actionGQLFields } from '../common/action.fields.js';
import { memberPostNotificationSettingsFields } from './memberPostNotificationSettings.fields.js';
import { networkNotificationSettingsFields } from './networkNotificationSettings.fields.js';
import { notificationGQLFields, } from './notification.fields.js';
import { spaceNotificationSettingsFields } from './spaceNotificationSettings.fields.js';
export function getNotificationsGQLQuery(fields) {
    return gql `
    query getNotifications($after: String, $limit: Int!) {
      notifications(after: $after, limit: $limit) {
        edges {
          cursor
          node {
            ${notificationGQLFields(fields)}
          }
        }
        nodes {
          ${notificationGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}
export function getNotificationsCountGQLQuery() {
    return gql `
    query getNotificationsCount {
      notificationsCount {
        new
      }
    }
  `;
}
export function getMemberNotificationSettingsGQLQuery() {
    return gql `
    query memberNotificationSettings($id: ID) {
      memberNotificationSettings(id: $id) {
        __typename
        network {
          ${networkNotificationSettingsFields()}
        }
        spaces {
          ${spaceNotificationSettingsFields()}
        }
      }
    }
  `;
}
export function getMemberPostNotificationSettingsGQLQuery() {
    return gql `
    query memberPostNotificationSettings($memberId: ID, $postId: ID!) {
      memberPostNotificationSettings(memberId: $memberId, postId: $postId) {
        ${memberPostNotificationSettingsFields()}
      }
    }
  `;
}
export function updateMemberPostNotificationSettingsGQLMutation() {
    return gql `
    mutation updateMemberPostNotificationSettings(
      $input: UpdateMemberPostNotificationSettingsInput!
      $memberId: ID
      $postId: ID!
    ) {
      updateMemberPostNotificationSettings(
        input: $input
        memberId: $memberId
        postId: $postId
      ) {
        ${memberPostNotificationSettingsFields()}
      }
    }
  `;
}
export const updateNetworkNotificationSettingsGQLMutation = () => gql `
  mutation updateNetworkNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateMemberNetworkNotificationSettingsInput!
    $memberId: ID
  ) {
    updateMemberNetworkNotificationSettings(
      channel: $channel
      input: $input
      memberId: $memberId
    ) {
      ${networkNotificationSettingsFields()}
    }
  }
`;
export const updateSpaceNotificationSettingsGQLMutation = () => gql `
  mutation updateSpaceNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateMemberSpaceNotificationSettingsInput!
    $memberId: ID
    $spaceId: ID!
  ) {
    updateMemberSpaceNotificationSettings(
      channel: $channel
      input: $input
      memberId: $memberId
      spaceId: $spaceId
    ) {
      ${spaceNotificationSettingsFields()}
    }
  }
`;
export const readNotificationGQLMutation = (fields) => gql `
  mutation ReadNotification($notificationId: ID!) {
    readNotification(notificationId: $notificationId) {
      ${actionGQLFields(fields)}
    }
  }
`;
export const readNotificationsGQLMutation = (fields) => gql `
  mutation ReadNotifications($ids: [ID!]!) {
    readNotifications(ids: $ids) {
      ${actionGQLFields(fields)}
    }
  }
`;
export const deleteNotificationGQLMutation = (fields) => gql `
  mutation DeleteNotification($notificationId: ID!) {
    deleteNotification(notificationId: $notificationId) {
      ${actionGQLFields(fields)}
    }
  }
`;
export const deleteNotificationsGQLMutation = (fields) => gql `
  mutation DeleteNotifications($ids: [ID!]!) {
    deleteNotifications(ids: $ids) {
      ${actionGQLFields(fields)}
    }
  }
`;
export const clearNotificationsCountGQLMutation = (fields) => gql `
  mutation ClearNotificationsCount {
    clearNotificationsCount {
      ${actionGQLFields(fields)}
    }
  }
`;
export const unsubscribeFromNotificationGQLMutation = (fields) => gql `
    mutation UnsubscribeFromNotification($input: UnsubscribeWithTokenInput!) {
      unsubscribeFromNotification(input: $input) {
        ${actionGQLFields(fields)}
      }
    }
  `;
export const updateSpaceDefaultNotificationSettingsGQLMutation = () => gql `
  mutation UpdateSpaceDefaultNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateSpaceDefaultNotificationSettingsInput!
    $spaceId: ID!
  ) {
    updateSpaceDefaultNotificationSettings(
      channel: $channel
      input: $input
      spaceId: $spaceId
    ) {
      channel
      enabled
      isDefault
      preference
      sameAsDefault
    }
  }
`;
export const spaceDefaultNotificationSettingsGQLQuery = () => gql `
  query SpaceDefaultNotificationSettings($spaceId: ID!) {
    spaceDefaultNotificationSettings(spaceId: $spaceId) {
      channel
      enabled
      isDefault
      preference
      sameAsDefault
    }
  }
`;
