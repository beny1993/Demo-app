export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
    DateTime: string;
    /** The `Upload` scalar type represents a file upload. */
    Upload: any;
};
export declare type AccessGroup = {
    createdAt: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    entityId: Scalars['ID'];
    entityType: AccessGroupEntityType;
    id: Scalars['ID'];
    info?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    networkId: Scalars['ID'];
    type: Scalars['String'];
};
export declare enum AccessGroupEntityType {
    NETWORK = "network",
    POST = "post",
    SPACE = "space"
}
export declare type Action = {
    status: ActionStatus;
};
export declare type ActionPermissions = {
    inputPermissions: Array<InputPathPermissions>;
    isAuthorized: IsAuthorized;
    name: Scalars['String'];
    outputPermissions: Array<PathPermissions>;
};
export declare enum ActionStatus {
    FAILED = "failed",
    SUCCEEDED = "succeeded"
}
export declare type ActiveSso = {
    logoutUrl?: Maybe<Scalars['String']>;
    settingsUrl?: Maybe<Scalars['String']>;
};
export declare type AddAppCollaboratorInput = {
    email: Scalars['String'];
};
export declare type AddMediasInput = {
    contentTypes: Array<Scalars['String']>;
};
export declare type AddNetworkInput = {
    description?: Maybe<Scalars['String']>;
    domain?: Maybe<Scalars['String']>;
    entrancePage?: Maybe<Scalars['String']>;
    faviconId?: Maybe<Scalars['String']>;
    industry?: Maybe<NetworkIndustryType>;
    name: Scalars['String'];
    owner: JoinNetworkInput;
    primaryMembers?: Maybe<NetworkPrimaryMembersType>;
    referrer?: Maybe<Scalars['String']>;
    timeframe?: Maybe<NetworkTimeframeType>;
    utmCampaign?: Maybe<Scalars['String']>;
    utmContent?: Maybe<Scalars['String']>;
    utmMedium?: Maybe<Scalars['String']>;
    utmSource?: Maybe<Scalars['String']>;
    utmTerm?: Maybe<Scalars['String']>;
    visibility?: Maybe<NetworkVisibility>;
};
export declare type AddReactionInput = {
    reaction: Scalars['String'];
};
export declare type AddSpaceMemberInput = {
    memberId: Scalars['ID'];
    roleId?: Maybe<Scalars['ID']>;
};
export declare type AddTrialInput = {
    endDate: Scalars['DateTime'];
};
export declare type App = {
    about?: Maybe<Scalars['String']>;
    authorName?: Maybe<Scalars['String']>;
    authorUrl?: Maybe<Scalars['String']>;
    banner?: Maybe<Media>;
    bannerId?: Maybe<Scalars['ID']>;
    clientId?: Maybe<Scalars['String']>;
    clientSecret?: Maybe<Scalars['String']>;
    comingSoon: Scalars['Boolean'];
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<Member>;
    createdById?: Maybe<Scalars['ID']>;
    customCodes?: Maybe<AppCustomCodes>;
    description?: Maybe<Scalars['String']>;
    docsUrl?: Maybe<Scalars['String']>;
    embedIds: Array<Scalars['ID']>;
    embeds?: Maybe<Array<Embed>>;
    enabledContexts: Array<PermissionContext>;
    favicon?: Maybe<Media>;
    faviconId?: Maybe<Scalars['ID']>;
    globalBanner?: Maybe<Media>;
    globalEmbeds?: Maybe<Array<Embed>>;
    globalFavicon?: Maybe<Media>;
    globalImage?: Maybe<Media>;
    globalImages?: Maybe<Array<Media>>;
    globalNetwork?: Maybe<PluralNetwork>;
    id: Scalars['ID'];
    image?: Maybe<Media>;
    imageId?: Maybe<Scalars['ID']>;
    imageIds: Array<Scalars['ID']>;
    images?: Maybe<Array<Media>>;
    installed?: Maybe<Scalars['Boolean']>;
    locked: Scalars['Boolean'];
    name: Scalars['String'];
    network?: Maybe<Network>;
    networkId: Scalars['ID'];
    privacyPolicyUrl?: Maybe<Scalars['String']>;
    requiredPermissions: Array<PrimaryScopes>;
    requiredPlan: PlanName;
    secretToken?: Maybe<Scalars['String']>;
    slug: Scalars['String'];
    standing: StoreItemStanding;
    status: StoreItemStatus;
    termsOfServiceUrl?: Maybe<Scalars['String']>;
    updatedAt: Scalars['DateTime'];
    updatedBy?: Maybe<Member>;
    updatedById?: Maybe<Scalars['ID']>;
    webhookSignSecret?: Maybe<Scalars['String']>;
    webhookSubscriptions?: Maybe<Array<Scalars['String']>>;
    webhookUrl?: Maybe<Scalars['String']>;
};
export declare type AppAction = {
    data?: Maybe<Scalars['String']>;
    status: ActionStatus;
};
export declare type AppCollaborator = {
    addedById?: Maybe<Scalars['ID']>;
    app?: Maybe<App>;
    appId: Scalars['ID'];
    createdAt: Scalars['DateTime'];
    email: Scalars['String'];
    id: Scalars['ID'];
    type: AppCollaboratorType;
};
export declare enum AppCollaboratorType {
    COLLABORATOR = "COLLABORATOR",
    OWNER = "OWNER"
}
export declare type AppCustomCodes = {
    body?: Maybe<Scalars['String']>;
    head?: Maybe<Scalars['String']>;
};
export declare type AppEdge = {
    cursor: Scalars['String'];
    node: App;
};
export declare type AppInstallation = {
    app?: Maybe<App>;
    appVersion?: Maybe<Scalars['String']>;
    context: PermissionContext;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    installedAt: Scalars['DateTime'];
    installedBy?: Maybe<Member>;
    network?: Maybe<Network>;
    permissions: Array<Scalars['String']>;
    status: AppInstallationStatus;
    updatedAt: Scalars['DateTime'];
};
export declare type AppInstallationEdge = {
    cursor: Scalars['String'];
    node: AppInstallation;
};
export declare enum AppInstallationStatus {
    DELETED = "DELETED",
    DISABLED = "DISABLED",
    ENABLED = "ENABLED"
}
export declare type AppPublication = {
    addedById?: Maybe<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    id: Scalars['String'];
    itemId: Scalars['String'];
    networkId: Scalars['String'];
};
export declare type AppSetting = {
    appId: Scalars['String'];
    context: PermissionContext;
    entityId?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    networkId: Scalars['String'];
    settings: Scalars['String'];
};
export declare type AppToken = {
    accessToken: Scalars['String'];
};
export declare type AssignOrRevokeBadgeInput = {
    memberId: Scalars['String'];
};
export declare type AuthInfoWithOtp = {
    member: Member;
    network: Network;
    otp: Scalars['String'];
    role?: Maybe<Role>;
};
export declare type AuthToken = {
    accessToken: Scalars['String'];
    member: Member;
    network?: Maybe<Network>;
    networkPublicInfo: NetworkPublicInfo;
    refreshToken: Scalars['String'];
    role: Role;
};
export declare type AuthTokenWithOtp = {
    accessToken: Scalars['String'];
    member: Member;
    network?: Maybe<Network>;
    networkPublicInfo: NetworkPublicInfo;
    otp: Scalars['String'];
    refreshToken: Scalars['String'];
    role: Role;
};
export declare type Badge = {
    active: Scalars['Boolean'];
    backgroundColor?: Maybe<Scalars['String']>;
    daysUntilExpired?: Maybe<Scalars['Float']>;
    id: Scalars['ID'];
    image?: Maybe<Media>;
    imageId?: Maybe<Scalars['ID']>;
    longDescription?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    shortDescription: Scalars['String'];
    textColor?: Maybe<Scalars['String']>;
    type: BadgeType;
};
export declare enum BadgeType {
    ADMIN = "Admin",
    MANUAL = "Manual",
    MODERATOR = "Moderator",
    NEW_MEMBER = "NewMember"
}
export declare type BaseCustomFieldSchema = {
    archived?: Maybe<Scalars['Boolean']>;
    description?: Maybe<Scalars['String']>;
    items?: Maybe<BaseCustomFieldSchema>;
    key: Scalars['String'];
    name: Scalars['String'];
    properties?: Maybe<Array<BaseCustomFieldSchema>>;
    required?: Maybe<Scalars['Boolean']>;
    type: CustomFieldType;
    typeOptions?: Maybe<CustomFieldTypeOptions>;
    validators?: Maybe<Array<CustomFieldValidator>>;
};
export declare type BaseCustomFieldSchemaInput = {
    description?: Maybe<Scalars['String']>;
    items?: Maybe<BaseCustomFieldSchemaInput>;
    key: Scalars['String'];
    name: Scalars['String'];
    properties?: Maybe<Array<BaseCustomFieldSchemaInput>>;
    type: CustomFieldType;
    typeOptions?: Maybe<CustomFieldTypeOptionsInput>;
    validators?: Maybe<Array<CustomFieldValidatorInput>>;
};
export declare type BaseFilterInput = {
    and?: Maybe<Array<BaseFilterInput>>;
    filtername: Filtername;
    key?: Maybe<Scalars['String']>;
    negator?: Maybe<Scalars['String']>;
    operator?: Maybe<Scalars['String']>;
    or?: Maybe<Array<BaseFilterInput>>;
    value?: Maybe<Scalars['String']>;
};
export declare type Basket = {
    items?: Maybe<Array<BasketItem>>;
    renewalType: PlanRenewalType;
    total?: Maybe<Price>;
};
export declare type BasketItem = {
    note?: Maybe<Scalars['String']>;
    title: Scalars['String'];
    value: Price;
};
export declare type BasketsInput = {
    name: PlanName;
    seats: Scalars['Int'];
};
export declare type BillingAddress = {
    city?: Maybe<Scalars['String']>;
    country: Scalars['String'];
    postalCode?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    streetAddress?: Maybe<Scalars['String']>;
};
export declare type BillingAddressInput = {
    city?: Maybe<Scalars['String']>;
    country: Scalars['String'];
    postalCode?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    streetAddress?: Maybe<Scalars['String']>;
};
export declare type BillingDetails = {
    address?: Maybe<BillingAddress>;
    billingEmail?: Maybe<Scalars['String']>;
    card?: Maybe<CardPublicInformation>;
    companyName?: Maybe<Scalars['String']>;
    vat?: Maybe<Vat>;
};
export declare type BillingDetailsInput = {
    address?: Maybe<BillingAddressInput>;
    billingEmail?: Maybe<Scalars['String']>;
    card?: Maybe<CardInput>;
    companyName?: Maybe<Scalars['String']>;
    vat?: Maybe<VatInput>;
};
export declare type BlockInput = {
    children?: Maybe<Scalars['String']>;
    id: Scalars['String'];
    name: Scalars['String'];
    output?: Maybe<Scalars['String']>;
    props?: Maybe<Scalars['String']>;
};
export declare type By = Member;
export declare type CardInput = {
    cardNumber: Scalars['String'];
    cvc: Scalars['String'];
    expirationMonth: Scalars['Float'];
    expirationYear: Scalars['Float'];
    nameOnCard?: Maybe<Scalars['String']>;
};
export declare type CardPublicInformation = {
    expirationMonth: Scalars['Float'];
    expirationYear: Scalars['Float'];
    lastFourDigits: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare type ChartData = {
    label: Scalars['String'];
    points: Scalars['String'];
    value?: Maybe<Scalars['String']>;
};
export declare type Collection = {
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<Member>;
    customOrderingIndex: Scalars['Float'];
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    network?: Maybe<Network>;
    slug: Scalars['String'];
    spaces?: Maybe<PaginatedSpace>;
    updatedAt: Scalars['DateTime'];
};
export declare type CollectionSpacesArgs = {
    limit: Scalars['Int'];
};
export declare type CollectionEdge = {
    cursor: Scalars['String'];
    node: Collection;
};
export declare enum CollectionListOrderByEnum {
    CREATED_AT = "CREATED_AT",
    CUSTOM_ORDERING_INDEX = "CUSTOM_ORDERING_INDEX",
    UPDATED_AT = "UPDATED_AT"
}
export declare type ColumnSortInput = {
    key: Scalars['String'];
    order?: Maybe<SortOrder>;
};
export declare type ConfirmResetPasswordInput = {
    token: Scalars['String'];
};
export declare type ContextPermissions = {
    context: PermissionContext;
    entityActions: Array<EntityPermissions>;
};
export declare type ContextScopes = {
    context: PermissionContext;
    entityScopes: Array<EntityScopes>;
};
export declare type CreateAccessGroupInput = {
    description?: Maybe<Scalars['String']>;
    entityId: Scalars['ID'];
    entityType: AccessGroupEntityType;
    info?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    type: Scalars['String'];
};
export declare type CreateAppInput = {
    name: Scalars['String'];
    networkId: Scalars['String'];
    slug: Scalars['String'];
};
export declare type CreateBadgeInput = {
    active: Scalars['Boolean'];
    backgroundColor?: Maybe<Scalars['String']>;
    daysUntilExpired?: Maybe<Scalars['Float']>;
    imageId?: Maybe<Scalars['String']>;
    longDescription?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    shortDescription: Scalars['String'];
    textColor?: Maybe<Scalars['String']>;
};
export declare type CreateCollectionInput = {
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
};
export declare type CreateEmojiInput = {
    text: Scalars['String'];
};
export declare type CreateFileInput = {
    contentType: Scalars['String'];
    extension: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    size?: Maybe<Scalars['Int']>;
};
export declare type CreateHighlightedTag = {
    indent?: Maybe<Scalars['Float']>;
    tagId?: Maybe<Scalars['String']>;
    text: Scalars['String'];
    type: HighlightedTagType;
};
export declare type CreateImageInput = {
    contentType: Scalars['String'];
    cropHeight?: Maybe<Scalars['Int']>;
    cropWidth?: Maybe<Scalars['Int']>;
    cropX?: Maybe<Scalars['Int']>;
    cropY?: Maybe<Scalars['Int']>;
    cropZoom?: Maybe<Scalars['Float']>;
    name?: Maybe<Scalars['String']>;
};
export declare type CreateLimitedSupportTokenInput = {
    networkId: Scalars['String'];
};
export declare type CreatePermissionInput = {
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    scopes: Array<Scalars['String']>;
};
/** Input for creating a post */
export declare type CreatePostInput = {
    /** The id of all the attachments to this post. */
    attachmentIds?: Maybe<Array<Scalars['String']>>;
    /** The custom seo detail of this post */
    customSeoDetail?: Maybe<CustomSeoDetailInput>;
    /** The fields of the post. Depending of the post type it may include title, text, image, etc. */
    mappingFields?: Maybe<Array<PostMappingFieldInput>>;
    /** The id of this post's type */
    postTypeId: Scalars['String'];
    /** Whether the post is published */
    publish?: Maybe<Scalars['Boolean']>;
    /** The tags of this post. */
    tagNames?: Maybe<Array<Scalars['String']>>;
};
export declare type CreateReportInput = {
    description?: Maybe<Scalars['String']>;
    entityId: Scalars['String'];
    entityType: ModerationEntityType;
    reportCategory: ReportCategory;
    spaceId?: Maybe<Scalars['String']>;
};
/** Input for creating a space. */
export declare type CreateSpaceInput = {
    address?: Maybe<SpaceAddressInput>;
    adminIds?: Maybe<Array<Scalars['String']>>;
    /** The id of the collection in which the space is created. */
    collectionId?: Maybe<Scalars['ID']>;
    customSeoDetail?: Maybe<CustomSeoDetailInput>;
    /** The description of the space. */
    description?: Maybe<Scalars['String']>;
    /** Is this space hidden? */
    hidden?: Maybe<Scalars['Boolean']>;
    /** The id of the space image. */
    imageId?: Maybe<Scalars['String']>;
    /** Is this space invite only? */
    inviteOnly?: Maybe<Scalars['Boolean']>;
    layout?: Maybe<Scalars['String']>;
    memberIds?: Maybe<Array<Scalars['String']>>;
    /** The name of the space. */
    name: Scalars['String'];
    nonAdminsCanInvite?: Maybe<Scalars['Boolean']>;
    /** Is this space a private space? */
    private?: Maybe<Scalars['Boolean']>;
    seoDetail?: Maybe<SpaceSeoDetailInput>;
    slate?: Maybe<SlateInput>;
    /** The slug of the space. It will be auto-generated if not provided. */
    slug?: Maybe<Scalars['String']>;
    whoCanPost?: Maybe<Array<SpaceRoleType>>;
    whoCanReact?: Maybe<Array<SpaceRoleType>>;
    whoCanReply?: Maybe<Array<SpaceRoleType>>;
    withRoles?: Maybe<Scalars['Boolean']>;
};
/** Input for creating a tag. */
export declare type CreateTagInput = {
    /** The description of the tag. */
    description?: Maybe<Scalars['String']>;
    /** The slug of the tag. */
    slug: Scalars['String'];
    /** The name of the tag. */
    title: Scalars['String'];
};
export declare type CreateTemplateInput = {
    categories?: Maybe<Array<Scalars['String']>>;
    descriptions?: Maybe<Scalars['String']>;
    entityId: Scalars['String'];
    entityType: TemplateEntityType;
    name: Scalars['String'];
    slug: Scalars['String'];
};
export declare type CreateWidgetInput = {
    context: WidgetContexts;
    description?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    position: WidgetPositions;
    url: Scalars['String'];
};
export declare type CustomCode = {
    anonymize: Scalars['Boolean'];
    code: Scalars['String'];
    position: CustomCodePosition;
};
export declare enum CustomCodePosition {
    BODY = "BODY",
    HEAD = "HEAD"
}
export declare type CustomField = {
    key: Scalars['String'];
    value?: Maybe<Scalars['String']>;
};
export declare type CustomFieldInput = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type CustomFieldPrivacy = {
    allow: Array<CustomFieldPrivacyOptions>;
};
export declare type CustomFieldPrivacyInput = {
    allow: Array<CustomFieldPrivacyOptions>;
};
export declare enum CustomFieldPrivacyOptions {
    ADMIN = "ADMIN",
    OWN = "OWN"
}
export declare type CustomFieldSchema = {
    archived?: Maybe<Scalars['Boolean']>;
    default?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    items?: Maybe<BaseCustomFieldSchema>;
    key: Scalars['String'];
    name: Scalars['String'];
    properties?: Maybe<Array<BaseCustomFieldSchema>>;
    readPrivacy?: Maybe<CustomFieldPrivacy>;
    required?: Maybe<Scalars['Boolean']>;
    searchable?: Maybe<Scalars['Boolean']>;
    settings?: Maybe<Array<CustomFieldSettings>>;
    type: CustomFieldType;
    typeOptions?: Maybe<CustomFieldTypeOptions>;
    validators?: Maybe<Array<CustomFieldValidator>>;
    writePrivacy?: Maybe<CustomFieldPrivacy>;
};
export declare type CustomFieldSchemaInput = {
    default?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    items?: Maybe<BaseCustomFieldSchemaInput>;
    key: Scalars['String'];
    name: Scalars['String'];
    properties?: Maybe<Array<BaseCustomFieldSchemaInput>>;
    readPrivacy?: Maybe<CustomFieldPrivacyInput>;
    searchable?: Maybe<Scalars['Boolean']>;
    settings?: Maybe<Array<CustomFieldSettingsInput>>;
    type: CustomFieldType;
    typeOptions?: Maybe<CustomFieldTypeOptionsInput>;
    validators?: Maybe<Array<CustomFieldValidatorInput>>;
    writePrivacy?: Maybe<CustomFieldPrivacyInput>;
};
export declare type CustomFieldSettings = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type CustomFieldSettingsInput = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare enum CustomFieldType {
    ARRAY = "array",
    BOOLEAN = "boolean",
    DATE = "date",
    NUMBER = "number",
    OBJECT = "object",
    RELATION = "relation",
    RICH_TEXT = "richText",
    TEXT = "text"
}
export declare type CustomFieldTypeOptions = {
    dateType?: Maybe<DateTypeOptions>;
    numberType?: Maybe<NumberTypeOptions>;
    relationType?: Maybe<RelationTypeOptions>;
    richTextType?: Maybe<RichTextTypeOptions>;
    textType?: Maybe<TextTypeOptions>;
};
export declare type CustomFieldTypeOptionsInput = {
    dateType?: Maybe<DateTypeOptions>;
    numberType?: Maybe<NumberTypeOptions>;
    relationType?: Maybe<RelationTypeOptions>;
    richTextType?: Maybe<RichTextTypeOptions>;
    textType?: Maybe<TextTypeOptions>;
};
export declare type CustomFieldValidator = {
    customErrorMessage?: Maybe<Scalars['String']>;
    validation: CustomFieldValidators;
    value: Scalars['String'];
};
export declare type CustomFieldValidatorInput = {
    customErrorMessage?: Maybe<Scalars['String']>;
    validation: CustomFieldValidators;
    value: Scalars['String'];
};
export declare enum CustomFieldValidators {
    ALL_OF = "allOf",
    ANY_OF = "anyOf",
    ENUM = "enum",
    EXCLUSIVE_MAXIMUM = "exclusiveMaximum",
    EXCLUSIVE_MINIMUM = "exclusiveMinimum",
    FORMAT = "format",
    MAX_ITEMS = "maxItems",
    MAX_LENGTH = "maxLength",
    MAX_PROPERTIES = "maxProperties",
    MAXIMUM = "maximum",
    MIN_ITEMS = "minItems",
    MIN_LENGTH = "minLength",
    MIN_PROPERTIES = "minProperties",
    MINIMUM = "minimum",
    MULTIPLE_OF = "multipleOf",
    NOT = "not",
    ONE_OF = "oneOf",
    PATTERN = "pattern",
    UNIQUE_ITEMS = "uniqueItems"
}
export declare type CustomFieldsSchema = {
    fields: Array<CustomFieldSchema>;
};
export declare type CustomSeoDetail = {
    description?: Maybe<Scalars['String']>;
    noIndex?: Maybe<Scalars['Boolean']>;
    thumbnail?: Maybe<Media>;
    thumbnailId?: Maybe<Scalars['ID']>;
    title?: Maybe<Scalars['String']>;
};
export declare type CustomSeoDetailInput = {
    description?: Maybe<Scalars['String']>;
    noIndex?: Maybe<Scalars['Boolean']>;
    thumbnailId?: Maybe<Scalars['ID']>;
    title?: Maybe<Scalars['String']>;
};
export declare enum CustomSsoType {
    OAUTH2 = "oauth2"
}
export declare enum DateTypeOptions {
    DATE = "date",
    DATETIME = "datetime"
}
export declare enum DefaultSsoType {
    FACEBOOK = "facebook",
    GOOGLE = "google",
    LINKEDIN = "linkedin"
}
export declare type DomainAvailability = {
    available: Scalars['Boolean'];
};
export declare type DomainAvailabilityInput = {
    domain: Scalars['String'];
};
export declare type DomainTransferStatus = {
    aaaarecordSuccess: Scalars['Boolean'];
    aaaarecords: Array<Scalars['String']>;
    arecordSuccess: Scalars['Boolean'];
    arecords: Array<Scalars['String']>;
    cnameSuccess: Scalars['Boolean'];
    cnames: Array<Scalars['String']>;
    domain: Scalars['String'];
    ns: Array<Scalars['String']>;
    root: Scalars['Boolean'];
    success: Scalars['Boolean'];
    tribeARecords: Array<Scalars['String']>;
    tribeCname: Scalars['String'];
};
export declare type EmailAvailability = {
    available: Scalars['Boolean'];
};
export declare type EmailLog = {
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    reason?: Maybe<Scalars['String']>;
    recipient: Scalars['String'];
    status: EmailStatus;
    type: EmailType;
    updatedAt: Scalars['DateTime'];
};
export declare type EmailLogEdge = {
    cursor: Scalars['String'];
    node: EmailLog;
};
export declare enum EmailStatus {
    BLOCKED = "BLOCKED",
    BOUNCED = "BOUNCED",
    CREATED = "CREATED",
    DEFERRED = "DEFERRED",
    DELIVERED = "DELIVERED",
    DROPPED = "DROPPED",
    PROCESSED = "PROCESSED",
    SENT = "SENT"
}
export declare enum EmailType {
    COLLABORATOR_INVITATION = "CollaboratorInvitation",
    EMAIL_VERIFICATION = "EmailVerification",
    MEMBER_CONFIRMATION = "MemberConfirmation",
    MEMBER_INVITATION = "MemberInvitation",
    NOTIFICATION = "Notification",
    RESET_PASSWORD = "ResetPassword",
    UNKNOWN = "Unknown"
}
export declare type Embed = {
    author?: Maybe<Scalars['String']>;
    author_url?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    html?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    options?: Maybe<Scalars['String']>;
    provider_name?: Maybe<Scalars['String']>;
    thumbnail_height?: Maybe<Scalars['String']>;
    thumbnail_url?: Maybe<Scalars['String']>;
    thumbnail_width?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
    url: Scalars['String'];
};
export declare type EmbedInput = {
    options?: Maybe<Scalars['String']>;
    url: Scalars['String'];
};
export declare type Emoji = {
    id: Scalars['ID'];
    text: Scalars['String'];
};
export declare type EntityPermissions = {
    actions: Array<ActionPermissions>;
    id: Scalars['String'];
};
export declare type EntityReport = {
    data?: Maybe<Array<ReportData>>;
    description?: Maybe<Scalars['String']>;
    endDate?: Maybe<Scalars['DateTime']>;
    entity?: Maybe<ReportableEntity>;
    entityId: Scalars['ID'];
    entityType: ReportableEntityType;
    startDate?: Maybe<Scalars['DateTime']>;
    tooltip?: Maybe<Scalars['String']>;
};
export declare type EntityScopes = {
    id: Scalars['String'];
    scopes: Array<Scalars['String']>;
};
export declare type EventType = {
    description: Scalars['String'];
    name: Scalars['String'];
    noun: Scalars['String'];
    requiredScope: Scalars['String'];
    shortDescription: Scalars['String'];
    verb: EventVerb;
};
export declare enum EventVerb {
    ACCEPTED = "ACCEPTED",
    ADDED = "ADDED",
    BANNED = "BANNED",
    BLOCKED = "BLOCKED",
    CANCELED = "CANCELED",
    CREATED = "CREATED",
    DELETED = "DELETED",
    EXPIRED = "EXPIRED",
    FAILED = "FAILED",
    FOLLOWED = "FOLLOWED",
    HIDDEN = "HIDDEN",
    PERMITTED = "PERMITTED",
    PINGED = "PINGED",
    PINNED = "PINNED",
    PUBLISHED = "PUBLISHED",
    REJECTED = "REJECTED",
    REMOVED = "REMOVED",
    REVOKED = "REVOKED",
    UNBLOCKED = "UNBLOCKED",
    UNFOLLOWED = "UNFOLLOWED",
    UNHIDDEN = "UNHIDDEN",
    UNPINNED = "UNPINNED",
    UNPUBLISHED = "UNPUBLISHED",
    UNVERIFIED = "UNVERIFIED",
    UPDATED = "UPDATED",
    VERIFIED = "VERIFIED",
    VIEWED = "VIEWED"
}
export declare type ExtraProperty = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare enum ExtraPropertyEntityType {
    MEMBER = "Member",
    NETWORK = "Network"
}
export declare type File = {
    downloadUrl: Scalars['String'];
    extension: Scalars['String'];
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    size?: Maybe<Scalars['Int']>;
    url: Scalars['String'];
};
export declare enum Filtername {
    AND = "and",
    LEAF = "leaf",
    OR = "or"
}
export declare type FiltersInput = {
    filter: BaseFilterInput;
};
export declare enum FlaggedType {
    MEMBER = "MEMBER",
    SYSTEM = "SYSTEM"
}
export declare type Footer = {
    urls: Array<FooterUrl>;
};
export declare type FooterUrl = {
    title: Scalars['String'];
    url: Scalars['String'];
};
export declare type GlobalToken = {
    accessToken: Scalars['String'];
    email: Scalars['String'];
};
export declare type GlobalTokenInput = {
    email: Scalars['String'];
    verificationCode: Scalars['String'];
};
export declare type HighlightedTag = {
    indent?: Maybe<Scalars['Float']>;
    tag?: Maybe<Tag>;
    text: Scalars['String'];
    type: HighlightedTagType;
};
export declare enum HighlightedTagType {
    SECTION = "SECTION",
    TOPIC = "TOPIC"
}
export declare type Image = {
    cropHeight?: Maybe<Scalars['Int']>;
    cropWidth?: Maybe<Scalars['Int']>;
    cropX: Scalars['Int'];
    cropY: Scalars['Int'];
    cropZoom: Scalars['Float'];
    dominantColorHex?: Maybe<Scalars['String']>;
    downloadUrl: Scalars['String'];
    dpi?: Maybe<Scalars['Float']>;
    height?: Maybe<Scalars['Float']>;
    id: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    url: Scalars['String'];
    urls?: Maybe<MediaUrls>;
    width?: Maybe<Scalars['Float']>;
};
export declare type ImpersonateLoginToNetworkInput = {
    memberId: Scalars['ID'];
    networkId: Scalars['ID'];
};
export declare type ImportRequest = {
    changeMemberDetails: Scalars['Boolean'];
    id: Scalars['ID'];
    networkId: Scalars['ID'];
    prefixId: Scalars['String'];
    requesterId: Scalars['ID'];
    stage: ImportRequestStage;
    status: ImportRequestStatus;
};
export declare enum ImportRequestStage {
    ANSWER = "ANSWER",
    COMMENT = "COMMENT",
    DISCUSSION = "DISCUSSION",
    FIX_POST_TYPES = "FIX_POST_TYPES",
    MEMBER = "MEMBER",
    QUESTION = "QUESTION",
    SPACE = "SPACE",
    TOPIC = "TOPIC"
}
export declare enum ImportRequestStatus {
    DONE = "DONE",
    IN_PROGRESS = "IN_PROGRESS"
}
export declare type In = Space;
export declare type InputPathPermissions = {
    isAuthorized: IsAuthorized;
    path: Scalars['String'];
    values: Array<ValuePermissions>;
};
export declare type InstallAppInput = {
    context: PermissionContext;
    entityId: Scalars['String'];
    permissions?: Maybe<Array<Scalars['String']>>;
};
export declare type IntValue = {
    int: Scalars['Int'];
};
/** Input for inviting members. */
export declare type InviteMembersInput = {
    /** The ids of the default spaces the invitees have. */
    defaultSpacesIds?: Maybe<Array<Scalars['ID']>>;
    /** When does the invitations expire? Empty for no expiration. */
    expiresAt?: Maybe<Scalars['DateTime']>;
    /** Custom message for invitation. */
    invitationMessage?: Maybe<Scalars['String']>;
    /** The details of the invitees */
    invitees: Array<InviteeInput>;
    /** The id of the role the invitees have. */
    roleId?: Maybe<Scalars['ID']>;
};
export declare type InviteeInput = {
    /** The ids of the default spaces this invitee has. */
    defaultSpacesIds?: Maybe<Array<Scalars['ID']>>;
    /** The email address of the invitee. */
    email: Scalars['String'];
    /** The name of the invitee. */
    name?: Maybe<Scalars['String']>;
    /** The role id of the invitee. */
    roleId?: Maybe<Scalars['ID']>;
};
export declare type Invoice = {
    cardLastFourDigits?: Maybe<Scalars['String']>;
    currency: Scalars['String'];
    date: Scalars['DateTime'];
    invoiceUrl?: Maybe<Scalars['String']>;
    status: InvoiceStatus;
    total: Scalars['Float'];
};
export declare enum InvoiceStatus {
    CANCELLED = "cancelled",
    FAILED = "failed",
    PAID = "paid",
    PENDING = "pending"
}
export declare type IsAuthorized = {
    authorized: Scalars['Boolean'];
    reason?: Maybe<UnauthorizedReason>;
    requiredPlan?: Maybe<PlanName>;
};
export declare type JoinNetworkInput = {
    email: Scalars['String'];
    name: Scalars['String'];
    password: Scalars['String'];
    phone?: Maybe<Scalars['String']>;
    username?: Maybe<Scalars['String']>;
};
export declare type JoinNetworkWithLinkInput = {
    email: Scalars['String'];
    invitationLinkId: Scalars['String'];
    name: Scalars['String'];
    password: Scalars['String'];
    username?: Maybe<Scalars['String']>;
};
export declare type JoinNetworkWithTokenInput = {
    name: Scalars['String'];
    password: Scalars['String'];
    token: Scalars['String'];
    username?: Maybe<Scalars['String']>;
};
export declare type KeyValue = {
    key: Scalars['String'];
    value?: Maybe<Scalars['String']>;
};
export declare type LeaderboardItem = {
    member?: Maybe<Member>;
    memberId: Scalars['String'];
    score: Scalars['Float'];
};
export declare type LoginNetworkWithGlobalTokenInput = {
    networkId: Scalars['String'];
};
export declare type LoginNetworkWithPasswordInput = {
    password: Scalars['String'];
    usernameOrEmail: Scalars['String'];
};
export declare type LoginSupportWithSsoCodeInput = {
    code: Scalars['String'];
    hd: Scalars['String'];
    prompt: Scalars['String'];
    scope: Scalars['String'];
    state: Scalars['String'];
};
export declare type LoginWithSsoCodeInput = {
    code: Scalars['String'];
    hd?: Maybe<Scalars['String']>;
    prompt?: Maybe<Scalars['String']>;
    scope?: Maybe<Scalars['String']>;
    state: Scalars['String'];
};
export declare type LogoutNetworkInput = {
    sessionId: Scalars['String'];
};
export declare type Media = Emoji | File | Image;
export declare type MediaUrls = {
    full: Scalars['String'];
    large: Scalars['String'];
    medium: Scalars['String'];
    small: Scalars['String'];
    thumb: Scalars['String'];
};
export declare type Member = {
    activeSession?: Maybe<MemberSession>;
    /** @deprecated Has been replaced by locale field */
    attributes: MemberAttributes;
    authMemberProps?: Maybe<MemberAuthMemberProps>;
    badgeIds?: Maybe<Array<Scalars['String']>>;
    banner?: Maybe<Media>;
    bannerId?: Maybe<Scalars['ID']>;
    createdAt: Scalars['DateTime'];
    /** @deprecated Has been replaced with name */
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    emailStatus?: Maybe<MemberEmailStatus>;
    externalId?: Maybe<Scalars['ID']>;
    extraProperties?: Maybe<Array<ExtraProperty>>;
    fields?: Maybe<Array<CustomField>>;
    id: Scalars['ID'];
    lastSeen?: Maybe<Scalars['DateTime']>;
    lastSeenAt?: Maybe<Scalars['DateTime']>;
    locale: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    network?: Maybe<Network>;
    networkId: Scalars['ID'];
    newEmail?: Maybe<Scalars['String']>;
    overrideTeammate: Scalars['Boolean'];
    profilePicture?: Maybe<Media>;
    profilePictureId?: Maybe<Scalars['ID']>;
    role?: Maybe<Role>;
    roleId: Scalars['ID'];
    score?: Maybe<Scalars['Int']>;
    sessions?: Maybe<Array<MemberSession>>;
    sidebarWidgets?: Maybe<Array<Scalars['String']>>;
    spaces?: Maybe<PaginatedSpace>;
    status: MemberStatus;
    tagline?: Maybe<Scalars['String']>;
    teammate: Scalars['Boolean'];
    updatedAt: Scalars['DateTime'];
    username: Scalars['String'];
    verifiedAt?: Maybe<Scalars['DateTime']>;
};
export declare type MemberExtraPropertiesArgs = {
    keys?: Maybe<Array<Scalars['String']>>;
};
export declare type MemberSpacesArgs = {
    limit: Scalars['Int'];
};
export declare type MemberAttributes = {
    locale: Scalars['String'];
};
export declare type MemberAuthMemberProps = {
    context: PermissionContext;
    permissions?: Maybe<Array<ActionPermissions>>;
    scopes?: Maybe<Array<Scalars['String']>>;
};
export declare type MemberEdge = {
    cursor: Scalars['String'];
    node: Member;
};
export declare enum MemberEmailStatus {
    NOT_DELIVERED = "notDelivered",
    SENT = "sent",
    SPAMMED = "spammed",
    VERIFIED = "verified"
}
export declare type MemberInvitation = {
    createdAt: Scalars['DateTime'];
    emailLog?: Maybe<EmailLog>;
    expiresAt: Scalars['DateTime'];
    id: Scalars['ID'];
    invitationMessage?: Maybe<Scalars['String']>;
    invitee?: Maybe<Member>;
    inviteeEmail: Scalars['String'];
    inviteeId?: Maybe<Scalars['ID']>;
    inviteeName?: Maybe<Scalars['String']>;
    inviter?: Maybe<Member>;
    inviterId: Scalars['ID'];
    joinedAt?: Maybe<Scalars['DateTime']>;
    network?: Maybe<Network>;
    networkId: Scalars['ID'];
    role?: Maybe<Role>;
    roleId: Scalars['ID'];
    status: MemberInvitationStatus;
};
export declare type MemberInvitationEdge = {
    cursor: Scalars['String'];
    node: MemberInvitation;
};
export declare type MemberInvitationLink = {
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    inviter?: Maybe<Member>;
    link: Scalars['String'];
    network?: Maybe<Network>;
};
export declare enum MemberInvitationStatus {
    ACCEPTED = "accepted",
    DELIVERED = "delivered",
    NOT_DELIVERED = "notDelivered",
    NOT_SENT = "notSent",
    REJECTED = "rejected",
    SENT = "sent",
    SPAMMED = "spammed"
}
export declare type MemberListFilterByInput = {
    key: Scalars['String'];
    operator: MemberListFilterByOperator;
    value: Scalars['String'];
};
export declare enum MemberListFilterByOperator {
    CONTAINS = "contains",
    EQUALS = "equals",
    GT = "gt",
    GTE = "gte",
    LT = "lt",
    LTE = "lte",
    NOT = "not"
}
export declare type MemberNetworkNotificationSettings = {
    channel: NotificationChannel;
    enabled?: Maybe<Scalars['Boolean']>;
    isDefault: Scalars['Boolean'];
    mention?: Maybe<Scalars['Boolean']>;
    reaction?: Maybe<Scalars['Boolean']>;
    sameAsDefault: Scalars['Boolean'];
};
export declare type MemberNotificationSettings = {
    network: Array<MemberNetworkNotificationSettings>;
    spaces: Array<MemberSpaceNotificationSettings>;
};
export declare type MemberPostNotificationSettings = {
    enabled?: Maybe<Scalars['Boolean']>;
    memberId: Scalars['String'];
    postId: Scalars['String'];
};
export declare type MemberSession = {
    active: Scalars['Boolean'];
    country?: Maybe<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    deviceBrand?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    ip: Scalars['String'];
    lastActivityAt: Scalars['DateTime'];
    os?: Maybe<Scalars['String']>;
    osVersion?: Maybe<Scalars['String']>;
};
export declare type MemberSpaceNotificationSettings = {
    channel: NotificationChannel;
    enabled?: Maybe<Scalars['Boolean']>;
    isDefault: Scalars['Boolean'];
    preference?: Maybe<SpaceNotificationPreference>;
    sameAsDefault: Scalars['Boolean'];
    space?: Maybe<Space>;
};
export declare enum MemberStatus {
    BLOCKED = "BLOCKED",
    DELETED = "DELETED",
    REMOVED = "REMOVED",
    UNVERIFIED = "UNVERIFIED",
    VERIFIED = "VERIFIED"
}
export declare enum MemberStatusInput {
    BLOCKED = "BLOCKED",
    UNVERIFIED = "UNVERIFIED",
    VERIFIED = "VERIFIED"
}
export declare enum ModerationEntityType {
    MEMBER = "MEMBER",
    POST = "POST"
}
export declare type ModerationItem = {
    createdAt: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    entity?: Maybe<ModerationItemEntity>;
    flaggedBy: FlaggedType;
    id: Scalars['String'];
    moderator?: Maybe<Member>;
    reporters?: Maybe<PaginatedModerationItemReporter>;
    spaceId?: Maybe<Scalars['String']>;
    status: ModerationStatus;
    updatedAt: Scalars['DateTime'];
};
export declare type ModerationItemReportersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type ModerationItemEdge = {
    cursor: Scalars['String'];
    node: ModerationItem;
};
export declare type ModerationItemEntity = Member | Post;
export declare type ModerationItemReporter = {
    createdAt: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    id: Scalars['String'];
    reportCategory: ReportCategory;
    reporter?: Maybe<Member>;
    updatedAt: Scalars['DateTime'];
};
export declare type ModerationItemReporterEdge = {
    cursor: Scalars['String'];
    node: ModerationItemReporter;
};
export declare type ModerationSettings = {
    customBlacklist?: Maybe<Array<Scalars['String']>>;
    enableBlacklisting: Scalars['Boolean'];
    useDefaultBlacklisting?: Maybe<Scalars['Boolean']>;
};
export declare enum ModerationStatus {
    ACCEPTED = "ACCEPTED",
    REJECTED = "REJECTED",
    REVIEW = "REVIEW"
}
export declare type Mutation = {
    /** @deprecated This mutation will be replaced by createEmojis */
    addEmoji: Emoji;
    /** @deprecated This mutation will be replaced by createEmojis */
    addEmojis: Array<Emoji>;
    /** @deprecated This mutation will be replaced by createCollection */
    addGroup: Collection;
    /** @deprecated This mutation will be replaced by createImages */
    addImage: SignedUrl;
    /** @deprecated This mutation will be replaced by createImages */
    addImages: Array<SignedUrl>;
    /** @deprecated This mutation will be replaced by createImages or createEmojis */
    addMedias: Array<SignedUrl>;
    addMemberSchemaField: Network;
    /** @deprecated This mutation will be replaced by createReport */
    addModerationReport: ModerationItem;
    /** @deprecated This mutation will be replaced by createNetwork */
    addNetwork: AuthTokenWithOtp;
    /** @deprecated This mutation will be replaced by updateNewDomain */
    addNewDomain: DomainTransferStatus;
    /** @deprecated This mutation will be replaced by createPost */
    addPost: Post;
    addReaction: Action;
    /** @deprecated This mutation will be replaced by createReply */
    addReply: Post;
    /** @deprecated This mutation will be replaced by createSpace */
    addSpace: Space;
    addSpaceMembers: Array<SpaceMember>;
    /** @deprecated This mutation will be replaced by createTag */
    addSpaceTopic: Tag;
    addTrialPlan: Plan;
    /** @deprecated This mutation will be replaced by approveSpaceMembershipRequest */
    approveSpaceJoinRequest: Action;
    approveSpaceMembershipRequest: Action;
    archiveMemberSchemaField: Network;
    assignBadge: Action;
    cancelEmailUpdate: Action;
    changeNetworkSubscriptionPlan: Network;
    clearNewDomain: Action;
    clearNotificationsCount: Action;
    confirmResetPassword: Action;
    createAccessGroup: AccessGroup;
    createBadge: Badge;
    createCollection: Collection;
    createEmojis: Array<Emoji>;
    createFiles: Array<SignedUrl>;
    createImages: Array<SignedUrl>;
    createMigrationRequest: ImportRequest;
    createNetwork: AuthTokenWithOtp;
    createPermission: Permission;
    /** Create a new post in a space. */
    createPost: Post;
    createReply: Post;
    createReport: ModerationItem;
    /** Create a space inside your community. */
    createSpace: Space;
    /** Create a new tag in a space. */
    createTag: Tag;
    createTemplate: Template;
    /** @deprecated This mutation will be replaced by declineSpaceMembershipRequest */
    declineSpaceJoinRequest: Action;
    declineSpaceMembershipRequest: Action;
    deleteAccessGroup: Action;
    deleteBadge: Action;
    deleteCollection: Action;
    deleteMember: Action;
    deleteMemberSchemaField: Network;
    deleteNetwork: Action;
    deleteNotification: Action;
    deleteNotifications: Action;
    deletePermission: Action;
    deletePost: Action;
    deleteSpace: Action;
    deleteSsoMembership: Action;
    /** @deprecated This mutation will be replaced by updatePasswordWithToken */
    doResetPassword: Action;
    /** @deprecated This mutation will be replaced by updateImage */
    editImage: Image;
    extendCurrentTrial: Plan;
    globalAddAppCollaborator: AppCollaborator;
    globalCreateApp: App;
    globalCreateEmojis: Array<Emoji>;
    globalCreateImages: Array<SignedUrl>;
    globalCreateWidget: Widget;
    globalDeleteApp: Action;
    globalDeleteAppSetting: AppSetting;
    globalDeleteWidget: Action;
    globalPublishAppPrivately: AppPublication;
    globalRegenerateClientSecret: App;
    globalRemoveAppCollaborator: Action;
    globalTestAppWebhook: Action;
    globalUnPublishAppPrivately: Action;
    globalUpdateApp: App;
    globalUpdateAppSetting: AppSetting;
    globalUpdateWidget: Widget;
    hidePost: Action;
    impersonateLoginToNetwork: AuthInfoWithOtp;
    installApp: AppInstallation;
    /** Invite members to join your community. */
    inviteMembers: Array<MemberInvitation>;
    joinNetwork: AuthToken;
    joinNetworkWithInvitationLink: AuthToken;
    joinNetworkWithToken: AuthToken;
    joinSpace: Action;
    leaveSpace: Action;
    loginNetwork: AuthToken;
    loginNetworkWithPassword: AuthToken;
    loginWithSsoCode: AuthToken;
    logoutNetwork: Action;
    organizeCollections: Action;
    /** @deprecated This mutation will be replaced by organizeSpacesInCollection */
    organizeGroupSpaces: Action;
    /** @deprecated This mutation will be replaced by organizeCollections */
    organizeGroups: Action;
    organizeSpacesInCollection: Action;
    pinPostToSpace: Action;
    pinReplyToPost: Action;
    purchase: Subscription;
    readNotification: Action;
    readNotifications: Action;
    /** @deprecated This mutation will be replaced by deleteCollection */
    removeGroup: Action;
    /** @deprecated This mutation will be replaced by deleteMember */
    removeMember: Action;
    /** @deprecated This mutation will be replaced by deleteNetwork */
    removeNetwork: Action;
    /** @deprecated This mutation will be replaced by deletePost */
    removePost: Action;
    removeReaction: Action;
    /** @deprecated This mutation will be replaced by deleteSpace */
    removeSpace: Action;
    removeSpaceMembers: Array<Action>;
    reorderMemberSchemaFields: Network;
    requestGlobalTokenCode: Action;
    requestSpaceMembership: SpaceJoinRequest;
    resendGlobalTokenCode: Action;
    resendVerification: Action;
    /** @deprecated This mutation will be replaced by sendResetPasswordEmail */
    resetPassword: Action;
    revokeBadge: Action;
    sendResetPasswordEmail: Action;
    /** @deprecated This mutation will be replaced by loginWithSsoCode */
    ssoRedirect: AuthToken;
    /** @deprecated This mutation will be replaced by loginSupportWithSsoCode */
    supportSsoRedirect: SupportAuthToken;
    transferToNewDomain: Action;
    unArchiveMemberSchemaField: Network;
    unhidePost: Action;
    uninstallApp?: Maybe<AppInstallation>;
    unpinPostFromSpace: Action;
    unpinReplyFromPost: Action;
    unsubscribeFromNotification: Action;
    /** @deprecated This mutation will be replaced by unsubscribeFromNotification */
    unsubscribeWithToken: Action;
    updateAccessGroup: AccessGroup;
    updateAppInstallation: AppInstallation;
    updateAppNetworkSettings: AppAction;
    updateAppSpaceSetting: AppAction;
    updateBadge: Badge;
    updateBillingDetails: BillingDetails;
    updateCollection: Action;
    updateCustomSso: Sso;
    updateDefaultSsoStatus: Action;
    updateFile: File;
    /** @deprecated This mutation will be replaced by updateCollection */
    updateGroup: Action;
    updateImage: Image;
    updateJwtSso: Sso;
    updateMember: Member;
    updateMemberNetworkNotificationSettings: MemberNetworkNotificationSettings;
    updateMemberPostNotificationSettings: MemberPostNotificationSettings;
    updateMemberSchemaField: Network;
    updateMemberSpaceNotificationSettings: MemberSpaceNotificationSettings;
    updateMemberSpaceRole: Action;
    /** @deprecated This mutation will be replaced by updateModerationItem */
    updateModeration: Action;
    updateModerationItem: Action;
    updateModerationSettings: ModerationSettings;
    updateNetwork: Network;
    updateNetworkCustomCapacities: Network;
    updateNetworkStatus: Action;
    updateNewDomain: DomainTransferStatus;
    updatePasswordWithToken: Action;
    updatePermission: Permission;
    updatePost: Post;
    updateSlates: Array<Slate>;
    updateSpace: Space;
    updateSpaceDefaultNotificationSettings: SpaceDefaultNotificationSettings;
    updateSpaceHighlightedTags: Action;
    /** @deprecated This mutation will be replaced by updateSpaceHighlightedTags */
    updateSpaceHighlightedTopics: Action;
    /** @deprecated This mutation will be replaced by updateMemberSpaceRole */
    updateSpaceMemberRole: Action;
    updateSpacePostTypes: Array<SpacePostType>;
    updateSpaceTagFilter: Action;
    /** @deprecated This mutation will be replaced by updateTag */
    updateSpaceTopic: Tag;
    /** @deprecated This mutation will be replaced by updateSpaceTagFilter */
    updateSpaceTopicFilter: Action;
    updateTag: Tag;
    uploadMigrationFiles: UploadCollectionsResponse;
    upsertExtraProperty: Action;
    upsertTheme: NewTheme;
    useSpaceTemplate: UseTemplateRequest;
    useTemplateStatus: UseTemplateRequest;
    verifyMember: AuthToken;
};
export declare type MutationAddEmojiArgs = {
    input: CreateEmojiInput;
};
export declare type MutationAddEmojisArgs = {
    input: Array<CreateEmojiInput>;
};
export declare type MutationAddGroupArgs = {
    input: CreateCollectionInput;
};
export declare type MutationAddImageArgs = {
    input: CreateImageInput;
};
export declare type MutationAddImagesArgs = {
    input: Array<CreateImageInput>;
};
export declare type MutationAddMediasArgs = {
    input: AddMediasInput;
};
export declare type MutationAddMemberSchemaFieldArgs = {
    input: CustomFieldSchemaInput;
};
export declare type MutationAddModerationReportArgs = {
    input: CreateReportInput;
};
export declare type MutationAddNetworkArgs = {
    input: AddNetworkInput;
};
export declare type MutationAddNewDomainArgs = {
    input: DomainAvailabilityInput;
};
export declare type MutationAddPostArgs = {
    input: CreatePostInput;
    spaceId: Scalars['ID'];
};
export declare type MutationAddReactionArgs = {
    input: AddReactionInput;
    postId: Scalars['ID'];
};
export declare type MutationAddReplyArgs = {
    input: CreatePostInput;
    postId: Scalars['ID'];
};
export declare type MutationAddSpaceArgs = {
    input: CreateSpaceInput;
};
export declare type MutationAddSpaceMembersArgs = {
    input: Array<AddSpaceMemberInput>;
    spaceId: Scalars['ID'];
};
export declare type MutationAddSpaceTopicArgs = {
    input: CreateTagInput;
    spaceId: Scalars['ID'];
};
export declare type MutationAddTrialPlanArgs = {
    trial: AddTrialInput;
};
export declare type MutationApproveSpaceJoinRequestArgs = {
    spaceId: Scalars['ID'];
    spaceJoinRequestId: Scalars['ID'];
};
export declare type MutationApproveSpaceMembershipRequestArgs = {
    spaceId: Scalars['ID'];
    spaceMembershipRequestId: Scalars['ID'];
};
export declare type MutationArchiveMemberSchemaFieldArgs = {
    key: Scalars['String'];
};
export declare type MutationAssignBadgeArgs = {
    id: Scalars['String'];
    input: AssignOrRevokeBadgeInput;
};
export declare type MutationCancelEmailUpdateArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type MutationChangeNetworkSubscriptionPlanArgs = {
    name: PlanName;
};
export declare type MutationConfirmResetPasswordArgs = {
    input: ConfirmResetPasswordInput;
};
export declare type MutationCreateAccessGroupArgs = {
    input: CreateAccessGroupInput;
};
export declare type MutationCreateBadgeArgs = {
    input: CreateBadgeInput;
};
export declare type MutationCreateCollectionArgs = {
    input: CreateCollectionInput;
};
export declare type MutationCreateEmojisArgs = {
    input: Array<CreateEmojiInput>;
};
export declare type MutationCreateFilesArgs = {
    input: Array<CreateFileInput>;
};
export declare type MutationCreateImagesArgs = {
    input: Array<CreateImageInput>;
};
export declare type MutationCreateMigrationRequestArgs = {
    changeMemberDetails?: Maybe<Scalars['Boolean']>;
    prefixId?: Maybe<Scalars['String']>;
};
export declare type MutationCreateNetworkArgs = {
    input: AddNetworkInput;
};
export declare type MutationCreatePermissionArgs = {
    input: CreatePermissionInput;
};
export declare type MutationCreatePostArgs = {
    input: CreatePostInput;
    spaceId: Scalars['ID'];
};
export declare type MutationCreateReplyArgs = {
    input: CreatePostInput;
    postId: Scalars['ID'];
};
export declare type MutationCreateReportArgs = {
    input: CreateReportInput;
};
export declare type MutationCreateSpaceArgs = {
    input: CreateSpaceInput;
};
export declare type MutationCreateTagArgs = {
    input: CreateTagInput;
    spaceId: Scalars['ID'];
};
export declare type MutationCreateTemplateArgs = {
    input: CreateTemplateInput;
};
export declare type MutationDeclineSpaceJoinRequestArgs = {
    spaceId: Scalars['ID'];
    spaceJoinRequestId: Scalars['ID'];
};
export declare type MutationDeclineSpaceMembershipRequestArgs = {
    spaceId: Scalars['ID'];
    spaceMembershipRequestId: Scalars['ID'];
};
export declare type MutationDeleteAccessGroupArgs = {
    id: Scalars['ID'];
};
export declare type MutationDeleteBadgeArgs = {
    id: Scalars['String'];
};
export declare type MutationDeleteCollectionArgs = {
    id: Scalars['ID'];
};
export declare type MutationDeleteMemberArgs = {
    id: Scalars['ID'];
};
export declare type MutationDeleteMemberSchemaFieldArgs = {
    key: Scalars['String'];
};
export declare type MutationDeleteNotificationArgs = {
    notificationId: Scalars['ID'];
};
export declare type MutationDeleteNotificationsArgs = {
    ids?: Maybe<Array<Scalars['ID']>>;
};
export declare type MutationDeletePermissionArgs = {
    id: Scalars['ID'];
};
export declare type MutationDeletePostArgs = {
    id: Scalars['ID'];
};
export declare type MutationDeleteSpaceArgs = {
    id: Scalars['ID'];
};
export declare type MutationDeleteSsoMembershipArgs = {
    memberId: Scalars['String'];
    type: SsoType;
};
export declare type MutationDoResetPasswordArgs = {
    input: UpdatePasswordWithTokenInput;
};
export declare type MutationEditImageArgs = {
    imageId: Scalars['String'];
    input: UpdateImageInput;
};
export declare type MutationExtendCurrentTrialArgs = {
    newEndDate: Scalars['DateTime'];
};
export declare type MutationGlobalAddAppCollaboratorArgs = {
    appId: Scalars['String'];
    input: AddAppCollaboratorInput;
};
export declare type MutationGlobalCreateAppArgs = {
    input: CreateAppInput;
};
export declare type MutationGlobalCreateEmojisArgs = {
    input: Array<CreateEmojiInput>;
};
export declare type MutationGlobalCreateImagesArgs = {
    input: Array<CreateImageInput>;
};
export declare type MutationGlobalCreateWidgetArgs = {
    appId: Scalars['ID'];
    input: CreateWidgetInput;
};
export declare type MutationGlobalDeleteAppArgs = {
    id: Scalars['ID'];
};
export declare type MutationGlobalDeleteAppSettingArgs = {
    context: PermissionContext;
    entityId?: Maybe<Scalars['ID']>;
    networkId: Scalars['ID'];
};
export declare type MutationGlobalDeleteWidgetArgs = {
    id: Scalars['ID'];
};
export declare type MutationGlobalPublishAppPrivatelyArgs = {
    appId: Scalars['ID'];
    networkId: Scalars['ID'];
};
export declare type MutationGlobalRegenerateClientSecretArgs = {
    appId: Scalars['ID'];
};
export declare type MutationGlobalRemoveAppCollaboratorArgs = {
    appId: Scalars['String'];
    collaboratorId: Scalars['String'];
};
export declare type MutationGlobalTestAppWebhookArgs = {
    appId: Scalars['ID'];
    input: TestAppWebhookInput;
};
export declare type MutationGlobalUnPublishAppPrivatelyArgs = {
    appId: Scalars['ID'];
    networkId: Scalars['ID'];
};
export declare type MutationGlobalUpdateAppArgs = {
    id: Scalars['ID'];
    input: UpdateAppInput;
};
export declare type MutationGlobalUpdateAppSettingArgs = {
    context: PermissionContext;
    entityId?: Maybe<Scalars['ID']>;
    networkId: Scalars['ID'];
    settings: Scalars['String'];
};
export declare type MutationGlobalUpdateWidgetArgs = {
    id: Scalars['ID'];
    input: UpdateWidgetInput;
};
export declare type MutationHidePostArgs = {
    id: Scalars['ID'];
};
export declare type MutationImpersonateLoginToNetworkArgs = {
    input: ImpersonateLoginToNetworkInput;
};
export declare type MutationInstallAppArgs = {
    appId: Scalars['ID'];
    input: InstallAppInput;
};
export declare type MutationInviteMembersArgs = {
    input: InviteMembersInput;
};
export declare type MutationJoinNetworkArgs = {
    input: JoinNetworkInput;
};
export declare type MutationJoinNetworkWithInvitationLinkArgs = {
    input: JoinNetworkWithLinkInput;
};
export declare type MutationJoinNetworkWithTokenArgs = {
    input: JoinNetworkWithTokenInput;
};
export declare type MutationJoinSpaceArgs = {
    spaceId: Scalars['ID'];
};
export declare type MutationLeaveSpaceArgs = {
    spaceId: Scalars['ID'];
};
export declare type MutationLoginNetworkArgs = {
    input: LoginNetworkWithPasswordInput;
};
export declare type MutationLoginNetworkWithPasswordArgs = {
    input: LoginNetworkWithPasswordInput;
};
export declare type MutationLoginWithSsoCodeArgs = {
    input: LoginWithSsoCodeInput;
};
export declare type MutationLogoutNetworkArgs = {
    input?: Maybe<LogoutNetworkInput>;
};
export declare type MutationOrganizeCollectionsArgs = {
    ids: Array<Scalars['String']>;
};
export declare type MutationOrganizeGroupSpacesArgs = {
    groupId: Scalars['String'];
    spaceIds: Array<Scalars['String']>;
};
export declare type MutationOrganizeGroupsArgs = {
    groupIds: Array<Scalars['String']>;
};
export declare type MutationOrganizeSpacesInCollectionArgs = {
    collectionId: Scalars['String'];
    spaceIds: Array<Scalars['String']>;
};
export declare type MutationPinPostToSpaceArgs = {
    postId: Scalars['ID'];
};
export declare type MutationPinReplyToPostArgs = {
    postId: Scalars['ID'];
    replyId: Scalars['ID'];
};
export declare type MutationPurchaseArgs = {
    input: PurchaseInput;
};
export declare type MutationReadNotificationArgs = {
    notificationId: Scalars['ID'];
};
export declare type MutationReadNotificationsArgs = {
    ids?: Maybe<Array<Scalars['ID']>>;
};
export declare type MutationRemoveGroupArgs = {
    groupId?: Maybe<Scalars['ID']>;
};
export declare type MutationRemoveMemberArgs = {
    memberId: Scalars['ID'];
};
export declare type MutationRemovePostArgs = {
    postId: Scalars['ID'];
};
export declare type MutationRemoveReactionArgs = {
    postId: Scalars['ID'];
    reaction: Scalars['String'];
};
export declare type MutationRemoveSpaceArgs = {
    spaceId: Scalars['ID'];
};
export declare type MutationRemoveSpaceMembersArgs = {
    memberIds: Array<Scalars['ID']>;
    spaceId: Scalars['ID'];
};
export declare type MutationReorderMemberSchemaFieldsArgs = {
    input: Array<ReOrderSchemaFieldInput>;
};
export declare type MutationRequestGlobalTokenCodeArgs = {
    input: RequestGlobalTokenInput;
};
export declare type MutationRequestSpaceMembershipArgs = {
    spaceId: Scalars['ID'];
};
export declare type MutationResendGlobalTokenCodeArgs = {
    input: RequestGlobalTokenInput;
};
export declare type MutationResetPasswordArgs = {
    input: ResetPasswordInput;
};
export declare type MutationRevokeBadgeArgs = {
    id: Scalars['String'];
    input: AssignOrRevokeBadgeInput;
};
export declare type MutationSendResetPasswordEmailArgs = {
    email: Scalars['String'];
};
export declare type MutationSsoRedirectArgs = {
    input: LoginWithSsoCodeInput;
};
export declare type MutationSupportSsoRedirectArgs = {
    input: LoginSupportWithSsoCodeInput;
};
export declare type MutationUnArchiveMemberSchemaFieldArgs = {
    key: Scalars['String'];
};
export declare type MutationUnhidePostArgs = {
    id: Scalars['ID'];
};
export declare type MutationUninstallAppArgs = {
    appInstallationId: Scalars['ID'];
    reason?: Maybe<Scalars['String']>;
};
export declare type MutationUnpinPostFromSpaceArgs = {
    postId: Scalars['ID'];
};
export declare type MutationUnpinReplyFromPostArgs = {
    postId: Scalars['ID'];
    replyId: Scalars['ID'];
};
export declare type MutationUnsubscribeFromNotificationArgs = {
    input: UnsubscribeWithTokenInput;
};
export declare type MutationUnsubscribeWithTokenArgs = {
    input: UnsubscribeWithTokenInput;
};
export declare type MutationUpdateAccessGroupArgs = {
    id: Scalars['ID'];
    input: UpdateAccessGroupInput;
};
export declare type MutationUpdateAppInstallationArgs = {
    appInstallationId: Scalars['ID'];
    input: UpdateAppInstallationInput;
};
export declare type MutationUpdateAppNetworkSettingsArgs = {
    appId: Scalars['ID'];
    settings: Scalars['String'];
};
export declare type MutationUpdateAppSpaceSettingArgs = {
    appId: Scalars['ID'];
    settings: Scalars['String'];
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateBadgeArgs = {
    id: Scalars['String'];
    input: UpdateBadgeInput;
};
export declare type MutationUpdateBillingDetailsArgs = {
    input: BillingDetailsInput;
};
export declare type MutationUpdateCollectionArgs = {
    id: Scalars['ID'];
    input: UpdateCollectionInput;
};
export declare type MutationUpdateCustomSsoArgs = {
    input: UpdateCustomSsoInput;
};
export declare type MutationUpdateDefaultSsoStatusArgs = {
    sso: DefaultSsoType;
    status: SsoStatus;
};
export declare type MutationUpdateFileArgs = {
    id: Scalars['String'];
    input: UpdateFileInput;
};
export declare type MutationUpdateGroupArgs = {
    groupId?: Maybe<Scalars['ID']>;
    input: UpdateCollectionInput;
};
export declare type MutationUpdateImageArgs = {
    id: Scalars['String'];
    input: UpdateImageInput;
};
export declare type MutationUpdateJwtSsoArgs = {
    input: UpdateJwtSsoInput;
};
export declare type MutationUpdateMemberArgs = {
    id?: Maybe<Scalars['ID']>;
    input: UpdateMemberInput;
};
export declare type MutationUpdateMemberNetworkNotificationSettingsArgs = {
    channel: NotificationChannel;
    input: UpdateMemberNetworkNotificationSettingsInput;
    memberId?: Maybe<Scalars['ID']>;
};
export declare type MutationUpdateMemberPostNotificationSettingsArgs = {
    input: UpdateMemberPostNotificationSettingsInput;
    memberId?: Maybe<Scalars['ID']>;
    postId: Scalars['ID'];
};
export declare type MutationUpdateMemberSchemaFieldArgs = {
    input: UpdateCustomFieldSchemaInput;
};
export declare type MutationUpdateMemberSpaceNotificationSettingsArgs = {
    channel: NotificationChannel;
    input: UpdateMemberSpaceNotificationSettingsInput;
    memberId?: Maybe<Scalars['ID']>;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateMemberSpaceRoleArgs = {
    input: UpdateSpaceMemberRoleInput;
    memberId: Scalars['ID'];
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateModerationArgs = {
    id: Scalars['ID'];
    input: UpdateModerationItemInput;
};
export declare type MutationUpdateModerationItemArgs = {
    id: Scalars['ID'];
    input: UpdateModerationItemInput;
};
export declare type MutationUpdateModerationSettingsArgs = {
    input: UpdateModerationSettingsInput;
};
export declare type MutationUpdateNetworkArgs = {
    input: UpdateNetworkInput;
};
export declare type MutationUpdateNetworkCustomCapacitiesArgs = {
    additionalSeats?: Maybe<Scalars['Int']>;
    customMemberCapacity?: Maybe<Scalars['Int']>;
};
export declare type MutationUpdateNetworkStatusArgs = {
    input: UpdateNetworkStatusInput;
};
export declare type MutationUpdateNewDomainArgs = {
    input: UpdateNewDomainInput;
};
export declare type MutationUpdatePasswordWithTokenArgs = {
    input: UpdatePasswordWithTokenInput;
};
export declare type MutationUpdatePermissionArgs = {
    id: Scalars['ID'];
    input: UpdatePermissionInput;
};
export declare type MutationUpdatePostArgs = {
    id: Scalars['ID'];
    input: UpdatePostInput;
};
export declare type MutationUpdateSlatesArgs = {
    input: Array<UpdateSlateInput>;
};
export declare type MutationUpdateSpaceArgs = {
    id: Scalars['ID'];
    input: UpdateSpaceInput;
};
export declare type MutationUpdateSpaceDefaultNotificationSettingsArgs = {
    channel: NotificationChannel;
    input: UpdateSpaceDefaultNotificationSettingsInput;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateSpaceHighlightedTagsArgs = {
    input: UpdateHighlightedTags;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateSpaceHighlightedTopicsArgs = {
    input: UpdateHighlightedTags;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateSpaceMemberRoleArgs = {
    input: UpdateSpaceMemberRoleInput;
    memberId: Scalars['ID'];
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateSpacePostTypesArgs = {
    input: UpdateSpacePostTypeInput;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateSpaceTagFilterArgs = {
    input: UpdateTagFilter;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateSpaceTopicArgs = {
    input: UpdateTagInput;
    spaceId: Scalars['ID'];
    topicId: Scalars['ID'];
};
export declare type MutationUpdateSpaceTopicFilterArgs = {
    input: UpdateTagFilter;
    spaceId: Scalars['ID'];
};
export declare type MutationUpdateTagArgs = {
    id: Scalars['ID'];
    input: UpdateTagInput;
    spaceId: Scalars['ID'];
};
export declare type MutationUploadMigrationFilesArgs = {
    answers?: Maybe<Scalars['Upload']>;
    comments?: Maybe<Scalars['Upload']>;
    groups?: Maybe<Scalars['Upload']>;
    posts?: Maybe<Scalars['Upload']>;
    questions?: Maybe<Scalars['Upload']>;
    tags?: Maybe<Scalars['Upload']>;
    users?: Maybe<Scalars['Upload']>;
};
export declare type MutationUpsertExtraPropertyArgs = {
    input: UpsertExtraPropertyInput;
};
export declare type MutationUpsertThemeArgs = {
    input: UpsertTheme;
};
export declare type MutationUseSpaceTemplateArgs = {
    input: CreateSpaceInput;
    style?: Maybe<Scalars['String']>;
    templateId: Scalars['String'];
};
export declare type MutationUseTemplateStatusArgs = {
    id: Scalars['String'];
};
export declare type MutationVerifyMemberArgs = {
    input: VerifyMemberInput;
};
export declare type NavigationItem = {
    link?: Maybe<Scalars['String']>;
    openInNewWindow?: Maybe<Scalars['Boolean']>;
    text: Scalars['String'];
    type: NavigationItemType;
};
export declare enum NavigationItemType {
    PRIMARY_BUTTON = "PRIMARY_BUTTON",
    PRIMARY_LINK = "PRIMARY_LINK",
    SECONDARY_BUTTON = "SECONDARY_BUTTON",
    TEXT_LINK = "TEXT_LINK"
}
export declare type NavigationSlateUpdatesInput = {
    footer?: Maybe<SlateUpdatesInput>;
    header?: Maybe<SlateUpdatesInput>;
    sidebar1?: Maybe<SlateUpdatesInput>;
    sidebar2?: Maybe<SlateUpdatesInput>;
};
export declare type NavigationSlates = {
    footer?: Maybe<Slate>;
    header: Slate;
    sidebar1: Slate;
    sidebar2?: Maybe<Slate>;
};
export declare type Network = {
    activeSso?: Maybe<ActiveSso>;
    activeTheme?: Maybe<NewTheme>;
    additionalSeatsCapacity: Scalars['Int'];
    aliases: Array<Scalars['String']>;
    authMemberProps?: Maybe<NetworkAuthMemberProps>;
    badges?: Maybe<Array<Badge>>;
    billingEmail?: Maybe<Scalars['String']>;
    /** @deprecated Has been replaced by activeTheme */
    brandColor?: Maybe<Scalars['String']>;
    /** @deprecated Has been moved to extraProperties */
    companyName?: Maybe<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<Member>;
    createdById: Scalars['ID'];
    customCodes?: Maybe<Array<CustomCode>>;
    customMemberCapacity: Scalars['Int'];
    customSeoDetail?: Maybe<CustomSeoDetail>;
    defaultSpaces?: Maybe<Array<Space>>;
    description?: Maybe<Scalars['String']>;
    domain: Scalars['String'];
    extraProperties?: Maybe<Array<ExtraProperty>>;
    favicon?: Maybe<Media>;
    faviconId?: Maybe<Scalars['ID']>;
    /** @deprecated Has been replaced by navigation slates */
    footer?: Maybe<Footer>;
    /** @deprecated Has been moved to extraProperties */
    hideDefaultAuthenticationForm: Scalars['Boolean'];
    id: Scalars['ID'];
    incidentEmails?: Maybe<Array<Scalars['String']>>;
    /** @deprecated Has been moved to extraProperties */
    industry?: Maybe<NetworkIndustryType>;
    landingPages?: Maybe<NetworkSettings>;
    locale: Scalars['String'];
    logo?: Maybe<Media>;
    logoId?: Maybe<Scalars['ID']>;
    /** Calculated member capacity */
    memberCapacity: Scalars['Int'];
    memberCapacityDeclared: Scalars['Int'];
    memberFields?: Maybe<CustomFieldsSchema>;
    members?: Maybe<PaginatedMember>;
    membersCount?: Maybe<Scalars['Int']>;
    membership: NetworkMembership;
    name: Scalars['String'];
    navigationSlates: NavigationSlates;
    newDomain?: Maybe<Scalars['String']>;
    organizationId?: Maybe<Scalars['String']>;
    owner?: Maybe<Member>;
    ownerId: Scalars['ID'];
    passwordComplexity: NetworkPasswordComplexity;
    /** @deprecated Has been moved to extraProperties */
    privacyPolicyUrl?: Maybe<Scalars['String']>;
    /** @deprecated Has been moved to extraProperties */
    releaseChannel?: Maybe<NetworkReleaseChannelType>;
    roles?: Maybe<Array<Role>>;
    seatCapacityDeclared: Scalars['Int'];
    /** Calculated seats capacity */
    seatsCapacity: Scalars['Int'];
    spaces?: Maybe<PaginatedSpace>;
    status: NetworkStatus;
    statusLocked: Scalars['Boolean'];
    statusReason?: Maybe<StatusReason>;
    subscriptionPlan?: Maybe<Plan>;
    systemSpaces?: Maybe<Array<Space>>;
    /** @deprecated Has been moved to extraProperties */
    termsOfServiceUrl?: Maybe<Scalars['String']>;
    /** @deprecated Has been replaced by activeTheme */
    themes?: Maybe<Themes>;
    /** @deprecated Has been replaced by navigation slates */
    topNavigation?: Maybe<TopNavigation>;
    tribeBranding: Scalars['Boolean'];
    visibility: NetworkVisibility;
    whoCanInvite?: Maybe<Array<Role>>;
    whoCanInviteIds: Array<Scalars['ID']>;
};
export declare type NetworkCustomCodesArgs = {
    anonymize: Scalars['Boolean'];
};
export declare type NetworkExtraPropertiesArgs = {
    keys?: Maybe<Array<Scalars['String']>>;
};
export declare type NetworkMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<Array<MemberStatusInput>>;
};
export declare type NetworkSpacesArgs = {
    limit: Scalars['Int'];
};
export declare type NetworkAuthMemberProps = {
    context: PermissionContext;
    permissions?: Maybe<Array<ActionPermissions>>;
    scopes?: Maybe<Array<Scalars['String']>>;
};
export declare enum NetworkIndustryType {
    BLOGGER_COACH_CREATOR = "BloggerCoachCreator",
    CONSULTING_AND_AGENCY = "ConsultingAndAgency",
    ECOMERCE_AND_RETAIL = "EcomerceAndRetail",
    ENTERTAINMENT_AND_EVENTS = "EntertainmentAndEvents",
    FINANCIAN_SERVICES = "FinancianServices",
    HEALTHCARE = "Healthcare",
    INTERNET_AND_ONLINE_SERVICE = "InternetAndOnlineService",
    MEDIA_AND_PUBLISHING = "MediaAndPublishing",
    NON_PROFIT_AND_ASSOCIATION = "NonProfitAndAssociation",
    ONLINE_TRAINING_AND_EDUCATION = "OnlineTrainingAndEducation",
    OTHER = "Other",
    SOFTWARE_AND_SAAS = "SoftwareAndSaas"
}
export declare enum NetworkLandingPage {
    EXPLORE = "EXPLORE",
    FEED = "FEED",
    SPACES = "SPACES"
}
export declare enum NetworkMembership {
    INVITE_ONLY = "inviteOnly",
    OPEN = "open"
}
export declare enum NetworkPasswordComplexity {
    COMPLEX = "Complex",
    SIMPLE = "Simple",
    STANDARD = "Standard"
}
export declare enum NetworkPrimaryMembersType {
    CUSTOMERS = "Customers",
    EMPLOYEES = "Employees",
    MEMBERS = "Members",
    OTHER = "Other",
    STUDENTS = "Students"
}
export declare type NetworkPublicInfo = {
    domain: Scalars['String'];
    favicon?: Maybe<Media>;
    faviconId?: Maybe<Scalars['ID']>;
    id: Scalars['ID'];
    logo?: Maybe<Media>;
    logoId?: Maybe<Scalars['ID']>;
    membership: NetworkMembership;
    name: Scalars['String'];
    status: NetworkStatus;
    systemSpaces?: Maybe<Array<Space>>;
    visibility: NetworkVisibility;
};
export declare enum NetworkReleaseChannelType {
    EDGE = "edge",
    STABLE = "stable"
}
export declare type NetworkSettings = {
    landingPageForGuest: NetworkLandingPage;
    landingPageForMember: NetworkLandingPage;
    landingPageForNewMember: NetworkLandingPage;
};
export declare enum NetworkStatus {
    ARCHIVED = "archived",
    PUBLISHED = "published",
    UNPUBLISHED = "unpublished"
}
export declare enum NetworkStatusChangedBy {
    ADMIN = "admin",
    SUPPORT = "support",
    SYSTEM = "system"
}
export declare enum NetworkStatusReason {
    MEMBER_CAPACITY_EXCEEDED = "memberCapacityExceeded",
    NETWORK_CREATED = "networkCreated",
    NETWORK_LOCK_LIFTED = "networkLockLifted",
    SEATS_CAPACITY_EXCEEDED = "seatsCapacityExceeded"
}
export declare enum NetworkTimeframeType {
    FEW_MONTHS = "FewMonths",
    FEW_WEEKS = "FewWeeks",
    NOT_SURE = "NotSure",
    VERY_SOON = "VerySoon"
}
export declare enum NetworkVisibility {
    PRIVATE = "private",
    PUBLIC = "public"
}
export declare type NewTheme = {
    colors?: Maybe<ThemeColors>;
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    typography?: Maybe<Array<ThemeToken>>;
};
export declare type Notification = {
    actor?: Maybe<Payload>;
    createdAt: Scalars['DateTime'];
    id: Scalars['ID'];
    meta?: Maybe<NotificationMeta>;
    object?: Maybe<Payload>;
    read: Scalars['Boolean'];
    space?: Maybe<Space>;
    target?: Maybe<Payload>;
    verb: NotificationVerb;
};
export declare enum NotificationChannel {
    DESKTOP = "DESKTOP",
    EMAIL = "EMAIL",
    IN_APP = "IN_APP"
}
export declare type NotificationEdge = {
    cursor: Scalars['String'];
    node: Notification;
};
export declare type NotificationMeta = {
    body: Scalars['String'];
    fullTitle: Scalars['String'];
    reason: NotificationReason;
    relativeUrl: Scalars['String'];
    textBody: Scalars['String'];
    textFullTitle: Scalars['String'];
    textTitle: Scalars['String'];
    title: Scalars['String'];
    url: Scalars['String'];
};
export declare enum NotificationReason {
    NETWORK_ADMIN = "NETWORK_ADMIN",
    NETWORK_SUBSCRIPTION = "NETWORK_SUBSCRIPTION",
    POST_AUTHOR = "POST_AUTHOR",
    POST_SUBSCRIPTION = "POST_SUBSCRIPTION",
    SPACE_ADMIN = "SPACE_ADMIN",
    SPACE_SUBSCRIPTION = "SPACE_SUBSCRIPTION"
}
export declare enum NotificationVerb {
    COMMENT_CREATED = "COMMENT_CREATED",
    COMMENT_DELETED = "COMMENT_DELETED",
    COMMENT_UPDATED = "COMMENT_UPDATED",
    JOIN_REQUEST_STATUS_UPDATED = "JOIN_REQUEST_STATUS_UPDATED",
    MEMBER_MENTIONED = "MEMBER_MENTIONED",
    POST_CREATED = "POST_CREATED",
    POST_DELETED = "POST_DELETED",
    POST_FOLLOWED = "POST_FOLLOWED",
    POST_UPDATED = "POST_UPDATED",
    REACTION_CREATED = "REACTION_CREATED",
    REPLY_CREATED = "REPLY_CREATED",
    SPACE_MEMBER_ADDED = "SPACE_MEMBER_ADDED"
}
export declare type NotificationsCount = {
    new: Scalars['Float'];
};
export declare enum NumberTypeOptions {
    INTEGER = "integer",
    NUMBER = "number"
}
export declare type Page = {
    entity?: Maybe<PageEntity>;
    seoDetail: PageSeo;
    space: Space;
};
export declare type PageEntity = Collection | Member | Post;
export declare type PageInfo = {
    endCursor?: Maybe<Scalars['String']>;
    hasNextPage: Scalars['Boolean'];
};
export declare type PageSeo = {
    additionalMeta?: Maybe<Array<PageTag>>;
    description?: Maybe<Scalars['String']>;
    jsonld?: Maybe<Scalars['String']>;
    thumbnail?: Maybe<Media>;
    title: Scalars['String'];
};
export declare enum PageSeoTagType {
    LINK = "LINK",
    META = "META",
    TITLE = "TITLE"
}
export declare type PageTag = {
    properties: Array<KeyValue>;
    type: PageSeoTagType;
};
export declare type PaginatedApp = {
    edges?: Maybe<Array<AppEdge>>;
    nodes?: Maybe<Array<App>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedAppInstallation = {
    edges?: Maybe<Array<AppInstallationEdge>>;
    nodes?: Maybe<Array<AppInstallation>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedEmailLog = {
    edges?: Maybe<Array<EmailLogEdge>>;
    nodes?: Maybe<Array<EmailLog>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedMember = {
    edges?: Maybe<Array<MemberEdge>>;
    nodes?: Maybe<Array<Member>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedMemberInvitation = {
    edges?: Maybe<Array<MemberInvitationEdge>>;
    nodes?: Maybe<Array<MemberInvitation>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedModeration = {
    edges?: Maybe<Array<ModerationItemEdge>>;
    nodes?: Maybe<Array<ModerationItem>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedModerationItemReporter = {
    edges?: Maybe<Array<ModerationItemReporterEdge>>;
    nodes?: Maybe<Array<ModerationItemReporter>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedNetwork = {
    edges?: Maybe<Array<PluralNetworkEdge>>;
    nodes?: Maybe<Array<PluralNetwork>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedNotification = {
    edges?: Maybe<Array<NotificationEdge>>;
    nodes?: Maybe<Array<Notification>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedPluralMember = {
    edges?: Maybe<Array<PluralMemberEdge>>;
    nodes?: Maybe<Array<PluralMember>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedPost = {
    edges?: Maybe<Array<PostEdge>>;
    nodes?: Maybe<Array<Post>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedPostReactionParticipant = {
    edges?: Maybe<Array<PostReactionParticipantEdge>>;
    nodes?: Maybe<Array<PostReactionParticipant>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedPostType = {
    edges?: Maybe<Array<PostTypeEdge>>;
    nodes?: Maybe<Array<PostType>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedSpace = {
    edges?: Maybe<Array<SpaceEdge>>;
    nodes?: Maybe<Array<Space>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedSpaceMember = {
    edges?: Maybe<Array<SpaceMemberEdge>>;
    nodes?: Maybe<Array<SpaceMember>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedSpacePostType = {
    edges?: Maybe<Array<SpacePostTypeEdge>>;
    nodes?: Maybe<Array<SpacePostType>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedTag = {
    edges?: Maybe<Array<TagEdge>>;
    nodes?: Maybe<Array<Tag>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedTemplate = {
    edges?: Maybe<Array<TemplateEdge>>;
    nodes?: Maybe<Array<Template>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PaginatedWidget = {
    edges?: Maybe<Array<WidgetEdge>>;
    nodes?: Maybe<Array<Widget>>;
    pageInfo: PageInfo;
    totalCount: Scalars['Int'];
};
export declare type PasswordComplexity = {
    complex: Scalars['Boolean'];
};
export declare type PathPermissions = {
    isAuthorized: IsAuthorized;
    path: Scalars['String'];
};
export declare type Payload = {
    id: Scalars['ID'];
    media?: Maybe<Media>;
    member?: Maybe<Member>;
    name?: Maybe<Scalars['String']>;
    post?: Maybe<Post>;
    space?: Maybe<Space>;
    summary?: Maybe<Scalars['String']>;
    type: PayloadType;
};
export declare enum PayloadType {
    JOIN_REQUEST_STATUS = "JOIN_REQUEST_STATUS",
    MEMBER = "MEMBER",
    NETWORK = "NETWORK",
    POST = "POST",
    REACTION = "REACTION",
    SPACE = "SPACE"
}
export declare type Permission = {
    createdAt: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    scopes: Array<Scalars['String']>;
};
export declare enum PermissionContext {
    MEMBER = "MEMBER",
    NETWORK = "NETWORK",
    POST = "POST",
    SPACE = "SPACE"
}
export declare type Permissions = {
    actions: Array<ActionPermissions>;
    contextAwareActions: Array<ContextPermissions>;
};
export declare type PermissionsContextInput = {
    context: PermissionContext;
    ids: Array<Scalars['String']>;
};
export declare enum PinnedInto {
    MEMBER = "member",
    NETWORK = "network",
    POST = "post",
    SPACE = "space"
}
export declare type Plan = {
    createdAt: Scalars['DateTime'];
    endDate?: Maybe<Scalars['DateTime']>;
    extendable: Scalars['Boolean'];
    memberCapacity: Scalars['Int'];
    name: PlanName;
    renewDate?: Maybe<Scalars['DateTime']>;
    renewalType: PlanRenewalType;
    seatCapacity: Scalars['Int'];
    startDate: Scalars['DateTime'];
    trial: Scalars['Boolean'];
};
export declare enum PlanName {
    BASIC = "basic",
    ENTERPRISE = "enterprise",
    PLUS = "plus",
    PREMIUM = "premium"
}
export declare enum PlanRenewalType {
    MONTH = "month",
    YEAR = "year"
}
export declare type PluralMember = {
    activeSession?: Maybe<MemberSession>;
    /** @deprecated Has been replaced by locale field */
    attributes: MemberAttributes;
    authMemberProps?: Maybe<MemberAuthMemberProps>;
    badgeIds?: Maybe<Array<Scalars['String']>>;
    banner?: Maybe<Media>;
    bannerId?: Maybe<Scalars['ID']>;
    createdAt: Scalars['DateTime'];
    /** @deprecated Has been replaced with name */
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    emailStatus?: Maybe<MemberEmailStatus>;
    externalId?: Maybe<Scalars['ID']>;
    extraProperties?: Maybe<Array<ExtraProperty>>;
    fields?: Maybe<Array<CustomField>>;
    id: Scalars['ID'];
    lastSeen?: Maybe<Scalars['DateTime']>;
    lastSeenAt?: Maybe<Scalars['DateTime']>;
    locale: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    network?: Maybe<PluralNetwork>;
    networkId: Scalars['ID'];
    newEmail?: Maybe<Scalars['String']>;
    overrideTeammate: Scalars['Boolean'];
    profilePicture?: Maybe<Media>;
    profilePictureId?: Maybe<Scalars['ID']>;
    role?: Maybe<Role>;
    roleId: Scalars['ID'];
    score?: Maybe<Scalars['Int']>;
    sessions?: Maybe<Array<MemberSession>>;
    sidebarWidgets?: Maybe<Array<Scalars['String']>>;
    spaces?: Maybe<PaginatedSpace>;
    status: MemberStatus;
    tagline?: Maybe<Scalars['String']>;
    teammate: Scalars['Boolean'];
    updatedAt: Scalars['DateTime'];
    username: Scalars['String'];
    verifiedAt?: Maybe<Scalars['DateTime']>;
};
export declare type PluralMemberExtraPropertiesArgs = {
    keys?: Maybe<Array<Scalars['String']>>;
};
export declare type PluralMemberSpacesArgs = {
    limit: Scalars['Int'];
};
export declare type PluralMemberEdge = {
    cursor: Scalars['String'];
    node: PluralMember;
};
export declare type PluralNetwork = {
    activeSso?: Maybe<ActiveSso>;
    activeTheme?: Maybe<NewTheme>;
    additionalSeatsCapacity: Scalars['Int'];
    aliases: Array<Scalars['String']>;
    authMemberProps?: Maybe<NetworkAuthMemberProps>;
    badges?: Maybe<Array<Badge>>;
    billingEmail?: Maybe<Scalars['String']>;
    /** @deprecated Has been replaced by activeTheme */
    brandColor?: Maybe<Scalars['String']>;
    /** @deprecated Has been moved to extraProperties */
    companyName?: Maybe<Scalars['String']>;
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<Member>;
    createdById: Scalars['ID'];
    customCodes?: Maybe<Array<CustomCode>>;
    customMemberCapacity: Scalars['Int'];
    customSeoDetail?: Maybe<CustomSeoDetail>;
    defaultSpaces?: Maybe<Array<Space>>;
    description?: Maybe<Scalars['String']>;
    domain: Scalars['String'];
    extraProperties?: Maybe<Array<ExtraProperty>>;
    favicon?: Maybe<Media>;
    faviconId?: Maybe<Scalars['ID']>;
    /** @deprecated Has been replaced by navigation slates */
    footer?: Maybe<Footer>;
    globalFavicon?: Maybe<Media>;
    globalLogo?: Maybe<Media>;
    /** @deprecated Has been moved to extraProperties */
    hideDefaultAuthenticationForm: Scalars['Boolean'];
    id: Scalars['ID'];
    incidentEmails?: Maybe<Array<Scalars['String']>>;
    /** @deprecated Has been moved to extraProperties */
    industry?: Maybe<NetworkIndustryType>;
    landingPages?: Maybe<NetworkSettings>;
    locale: Scalars['String'];
    logo?: Maybe<Media>;
    logoId?: Maybe<Scalars['ID']>;
    /** Calculated member capacity */
    memberCapacity: Scalars['Int'];
    memberCapacityDeclared: Scalars['Int'];
    memberFields?: Maybe<CustomFieldsSchema>;
    members?: Maybe<PaginatedMember>;
    membersCount?: Maybe<Scalars['Int']>;
    membership: NetworkMembership;
    name: Scalars['String'];
    navigationSlates: NavigationSlates;
    newDomain?: Maybe<Scalars['String']>;
    organizationId?: Maybe<Scalars['String']>;
    owner?: Maybe<Member>;
    ownerId: Scalars['ID'];
    passwordComplexity: NetworkPasswordComplexity;
    /** @deprecated Has been moved to extraProperties */
    privacyPolicyUrl?: Maybe<Scalars['String']>;
    /** @deprecated Has been moved to extraProperties */
    releaseChannel?: Maybe<NetworkReleaseChannelType>;
    roles?: Maybe<Array<Role>>;
    seatCapacityDeclared: Scalars['Int'];
    /** Calculated seats capacity */
    seatsCapacity: Scalars['Int'];
    spaces?: Maybe<PaginatedSpace>;
    status: NetworkStatus;
    statusLocked: Scalars['Boolean'];
    statusReason?: Maybe<StatusReason>;
    subscriptionPlan?: Maybe<Plan>;
    systemSpaces?: Maybe<Array<Space>>;
    /** @deprecated Has been moved to extraProperties */
    termsOfServiceUrl?: Maybe<Scalars['String']>;
    /** @deprecated Has been replaced by activeTheme */
    themes?: Maybe<Themes>;
    /** @deprecated Has been replaced by navigation slates */
    topNavigation?: Maybe<TopNavigation>;
    tribeBranding: Scalars['Boolean'];
    visibility: NetworkVisibility;
    whoCanInvite?: Maybe<Array<Role>>;
    whoCanInviteIds: Array<Scalars['ID']>;
};
export declare type PluralNetworkCustomCodesArgs = {
    anonymize: Scalars['Boolean'];
};
export declare type PluralNetworkExtraPropertiesArgs = {
    keys?: Maybe<Array<Scalars['String']>>;
};
export declare type PluralNetworkMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<Array<MemberStatusInput>>;
};
export declare type PluralNetworkSpacesArgs = {
    limit: Scalars['Int'];
};
export declare type PluralNetworkEdge = {
    cursor: Scalars['String'];
    node: PluralNetwork;
};
export declare type Post = {
    allowedEmojis?: Maybe<Array<Scalars['String']>>;
    attachmentIds: Array<Scalars['ID']>;
    attachments?: Maybe<Array<File>>;
    authMemberProps?: Maybe<PostAuthMemberProps>;
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<SpaceMember>;
    createdById: Scalars['ID'];
    customSeoDetail?: Maybe<CustomSeoDetail>;
    embedIds: Array<Scalars['String']>;
    embeds?: Maybe<Array<Embed>>;
    followersCount?: Maybe<Scalars['Int']>;
    forbiddenEmojis?: Maybe<Array<Scalars['String']>>;
    hasMoreContent: Scalars['Boolean'];
    id: Scalars['ID'];
    imageIds: Array<Scalars['ID']>;
    images?: Maybe<Array<Media>>;
    isAnonymous: Scalars['Boolean'];
    isHidden?: Maybe<Scalars['Boolean']>;
    language?: Maybe<Scalars['String']>;
    mappingFields?: Maybe<Array<PostMappingField>>;
    mentionedMembers: Array<Scalars['String']>;
    mentions?: Maybe<Array<Member>>;
    negativeReactions?: Maybe<Array<Scalars['String']>>;
    negativeReactionsCount: Scalars['Int'];
    networkId: Scalars['ID'];
    owner?: Maybe<SpaceMember>;
    ownerId: Scalars['ID'];
    pinnedInto: Array<PinnedInto>;
    pinnedReplies?: Maybe<Array<Post>>;
    positiveReactions?: Maybe<Array<Scalars['String']>>;
    positiveReactionsCount: Scalars['Int'];
    postType?: Maybe<PostType>;
    postTypeId: Scalars['ID'];
    primaryReactionType: ReactionType;
    publishedAt?: Maybe<Scalars['DateTime']>;
    reactions?: Maybe<Array<PostReactionDetail>>;
    reactionsCount: Scalars['Int'];
    repliedTo?: Maybe<Post>;
    repliedToId?: Maybe<Scalars['ID']>;
    repliedToIds?: Maybe<Array<Scalars['String']>>;
    repliedTos?: Maybe<Array<Post>>;
    replies?: Maybe<PaginatedPost>;
    repliesCount: Scalars['Int'];
    seoDetail: PostSeoDetail;
    shortContent?: Maybe<Scalars['String']>;
    sidebarWidgets?: Maybe<Array<Scalars['String']>>;
    singleChoiceReactions: Array<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
    space?: Maybe<Space>;
    spaceId: Scalars['ID'];
    status: PostStatus;
    tags?: Maybe<Array<Tag>>;
    title?: Maybe<Scalars['String']>;
    topRepliers: Array<PostTopReplier>;
    /** @deprecated This field will be replaced by tagIds */
    topicIds?: Maybe<Array<Scalars['String']>>;
    totalRepliesCount: Scalars['Int'];
};
export declare type PostRepliesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    excludePins?: Maybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type PostAuthMemberProps = {
    availableReplyTypes?: Maybe<Array<PostType>>;
    canReact?: Maybe<Scalars['Boolean']>;
    context: PermissionContext;
    memberPostNotificationSettingsEnabled?: Maybe<Scalars['Boolean']>;
    permissions?: Maybe<Array<ActionPermissions>>;
    scopes?: Maybe<Array<Scalars['String']>>;
};
export declare type PostEdge = {
    cursor: Scalars['String'];
    node: Post;
};
export declare enum PostFieldsEnum {
    BOOLEAN1 = "boolean1",
    BOOLEAN2 = "boolean2",
    BOOLEAN3 = "boolean3",
    BOOLEAN4 = "boolean4",
    BOOLEAN5 = "boolean5",
    DATE1 = "date1",
    DATE2 = "date2",
    DATE3 = "date3",
    DATE4 = "date4",
    DATE5 = "date5",
    HTML1 = "html1",
    HTML2 = "html2",
    HTML3 = "html3",
    HTML4 = "html4",
    HTML5 = "html5",
    HTML6 = "html6",
    HTML7 = "html7",
    HTML8 = "html8",
    HTML9 = "html9",
    HTML10 = "html10",
    IMAGE1 = "image1",
    IMAGE2 = "image2",
    IMAGE3 = "image3",
    IMAGE4 = "image4",
    IMAGE5 = "image5",
    NUMBER1 = "number1",
    NUMBER2 = "number2",
    NUMBER3 = "number3",
    NUMBER4 = "number4",
    NUMBER5 = "number5",
    NUMBER_ARRAY1 = "numberArray1",
    NUMBER_ARRAY2 = "numberArray2",
    NUMBER_ARRAY3 = "numberArray3",
    NUMBER_ARRAY4 = "numberArray4",
    NUMBER_ARRAY5 = "numberArray5",
    TEXT1 = "text1",
    TEXT2 = "text2",
    TEXT3 = "text3",
    TEXT4 = "text4",
    TEXT5 = "text5",
    TEXT6 = "text6",
    TEXT7 = "text7",
    TEXT8 = "text8",
    TEXT9 = "text9",
    TEXT10 = "text10",
    TEXT_ARRAY1 = "textArray1",
    TEXT_ARRAY2 = "textArray2",
    TEXT_ARRAY3 = "textArray3",
    TEXT_ARRAY4 = "textArray4",
    TEXT_ARRAY5 = "textArray5"
}
export declare enum PostListFilterByEnum {
    BOOLEAN1 = "boolean1",
    BOOLEAN2 = "boolean2",
    BOOLEAN3 = "boolean3",
    BOOLEAN4 = "boolean4",
    BOOLEAN5 = "boolean5",
    CREATED_AT = "createdAt",
    DATE1 = "date1",
    DATE2 = "date2",
    DATE3 = "date3",
    DATE4 = "date4",
    DATE5 = "date5",
    NUMBER1 = "number1",
    NUMBER2 = "number2",
    NUMBER3 = "number3",
    NUMBER4 = "number4",
    NUMBER5 = "number5",
    UPDATED_AT = "updatedAt"
}
export declare type PostListFilterByInput = {
    key: PostListFilterByEnum;
    operator?: Maybe<PostListFilterByOperator>;
    value: Scalars['String'];
};
export declare enum PostListFilterByOperator {
    EQUALS = "equals",
    GT = "gt",
    GTE = "gte",
    IN = "in",
    LT = "lt",
    LTE = "lte",
    NOT = "not"
}
export declare enum PostListOrderByEnum {
    BOOLEAN1 = "boolean1",
    BOOLEAN2 = "boolean2",
    BOOLEAN3 = "boolean3",
    BOOLEAN4 = "boolean4",
    BOOLEAN5 = "boolean5",
    CREATED_AT = "createdAt",
    DATE1 = "date1",
    DATE2 = "date2",
    DATE3 = "date3",
    DATE4 = "date4",
    DATE5 = "date5",
    NEGATIVE_REACTIONS_COUNT = "negativeReactionsCount",
    NUMBER1 = "number1",
    NUMBER2 = "number2",
    NUMBER3 = "number3",
    NUMBER4 = "number4",
    NUMBER5 = "number5",
    POSITIVE_REACTIONS_COUNT = "positiveReactionsCount",
    REACTIONS_COUNT = "reactionsCount",
    REPLIES_COUNT = "repliesCount",
    TEXT1 = "text1",
    TEXT2 = "text2",
    TEXT3 = "text3",
    TEXT4 = "text4",
    TEXT5 = "text5",
    TOTAL_REPLIES_COUNT = "totalRepliesCount",
    UPDATED_AT = "updatedAt"
}
export declare type PostMappingField = {
    key: Scalars['String'];
    type: PostMappingTypeEnum;
    value: Scalars['String'];
};
export declare type PostMappingFieldInput = {
    key: Scalars['String'];
    type: PostMappingTypeEnum;
    value: Scalars['String'];
};
export declare enum PostMappingTypeEnum {
    BOOLEAN = "boolean",
    DATE = "date",
    HTML = "html",
    IMAGE = "image",
    NUMBER = "number",
    NUMBER_ARRAY = "numberArray",
    TEXT = "text",
    TEXT_ARRAY = "textArray"
}
export declare type PostReactionDetail = {
    count: Scalars['Int'];
    participants?: Maybe<PaginatedPostReactionParticipant>;
    reacted: Scalars['Boolean'];
    reaction: Scalars['String'];
};
export declare type PostReactionDetailParticipantsArgs = {
    limit: Scalars['Int'];
};
export declare type PostReactionParticipant = {
    participant?: Maybe<Member>;
};
export declare type PostReactionParticipantEdge = {
    cursor: Scalars['String'];
    node: PostReactionParticipant;
};
export declare type PostSeoDetail = {
    description?: Maybe<Scalars['String']>;
    image?: Maybe<Scalars['String']>;
    title: Scalars['String'];
};
export declare enum PostStatus {
    ARCHIVED = "ARCHIVED",
    BLOCKED = "BLOCKED",
    DELETED = "DELETED",
    DRAFTED = "DRAFTED",
    PUBLISHED = "PUBLISHED"
}
export declare type PostTopReplier = {
    member?: Maybe<Member>;
    repliesCount: Scalars['Int'];
};
export declare type PostType = {
    allowedEmojis?: Maybe<Array<Scalars['String']>>;
    context: PostTypeContext;
    createdAt: Scalars['DateTime'];
    forbiddenEmojis?: Maybe<Array<Scalars['String']>>;
    id: Scalars['ID'];
    languageTemplate?: Maybe<Scalars['String']>;
    mappings?: Maybe<Array<PostTypeMapping>>;
    name: Scalars['String'];
    negativeReactions?: Maybe<Array<Scalars['String']>>;
    pluralName: Scalars['String'];
    positiveReactions?: Maybe<Array<Scalars['String']>>;
    primaryReactionType: ReactionType;
    shortContentTemplate?: Maybe<Scalars['String']>;
    singleChoiceReactions: Array<Scalars['String']>;
    slug: Scalars['String'];
    titleTemplate?: Maybe<Scalars['String']>;
    updatedAt: Scalars['DateTime'];
    validReplyTypes?: Maybe<Array<PostType>>;
};
export declare enum PostTypeContext {
    POST = "post",
    REPLY = "reply"
}
export declare type PostTypeEdge = {
    cursor: Scalars['String'];
    node: PostType;
};
export declare type PostTypeMapping = {
    default?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    field: PostFieldsEnum;
    isMainContent?: Maybe<Scalars['Boolean']>;
    isSearchable?: Maybe<Scalars['Boolean']>;
    key: Scalars['String'];
    required?: Maybe<Scalars['Boolean']>;
    title?: Maybe<Scalars['String']>;
    type: PostMappingTypeEnum;
};
export declare type Price = {
    currency: Scalars['String'];
    formattedValue: Scalars['String'];
    value: Scalars['Float'];
};
export declare enum PrimaryScopes {
    ALL_ACCESS = "ALL_ACCESS",
    ASSIGN_BADGE = "ASSIGN_BADGE",
    IMPERSONATE_MEMBER = "IMPERSONATE_MEMBER",
    UPDATE_BADGE = "UPDATE_BADGE",
    UPDATE_NETWORK = "UPDATE_NETWORK",
    VIEW_APP = "VIEW_APP",
    VIEW_APP_INSTALLATION = "VIEW_APP_INSTALLATION",
    VIEW_BILLING_SUBSCRIPTION = "VIEW_BILLING_SUBSCRIPTION",
    VIEW_IMPORT_REQUEST = "VIEW_IMPORT_REQUEST",
    VIEW_MEMBER = "VIEW_MEMBER",
    VIEW_MEMBER_INVITATION = "VIEW_MEMBER_INVITATION",
    VIEW_MODERATION = "VIEW_MODERATION",
    VIEW_NETWORK = "VIEW_NETWORK",
    VIEW_NETWORK_PLAN = "VIEW_NETWORK_PLAN",
    VIEW_ORGANIZATION = "VIEW_ORGANIZATION",
    VIEW_POST = "VIEW_POST",
    VIEW_ROLE = "VIEW_ROLE",
    VIEW_SPACE = "VIEW_SPACE",
    VIEW_SPACE_COLLECTION = "VIEW_SPACE_COLLECTION",
    VIEW_SPACE_JOIN_REQUEST = "VIEW_SPACE_JOIN_REQUEST",
    VIEW_SPACE_MEMBERSHIP = "VIEW_SPACE_MEMBERSHIP",
    VIEW_SPACE_ROLE = "VIEW_SPACE_ROLE",
    VIEW_SSO = "VIEW_SSO",
    VIEW_SSO_MEMBERSHIP = "VIEW_SSO_MEMBERSHIP",
    VIEW_SYNC_EVENT = "VIEW_SYNC_EVENT",
    VIEW_TRACKER = "VIEW_TRACKER"
}
export declare type PurchaseInput = {
    billingDetails?: Maybe<BillingDetailsInput>;
    planName: PlanName;
    renewalType: PlanRenewalType;
    seats: Scalars['Int'];
};
export declare type Query = {
    accessGroup: AccessGroup;
    accessGroups: Array<AccessGroup>;
    activityLogs: Array<ReportRecord>;
    app: App;
    apps: PaginatedApp;
    authMember: Member;
    baskets: Array<Basket>;
    billingDetails: BillingDetails;
    cancelSubscription: Action;
    /** @deprecated This query will be replaced by domainAvailability */
    checkDomainAvailability: DomainAvailability;
    /** @deprecated This query will be replaced by emailAvailability */
    checkEmailAvailability: EmailAvailability;
    /** @deprecated This query will be replaced by invitationLinkValidity */
    checkInvitationLinkValidity: MemberInvitationLink;
    /** @deprecated This query will be replaced by memberInvitationValidity */
    checkMemberInvitationValidity: MemberInvitation;
    /** @deprecated This query will be replaced by newDomainStatus */
    checkNewDomainStatus: DomainTransferStatus;
    /** @deprecated This query will be replaced by passwordComplexity */
    checkPasswordComplexity: PasswordComplexity;
    /** @deprecated This query will be replaced by usernameAvailability */
    checkUsernameAvailability: UsernameAvailability;
    collection: Collection;
    collections: Array<Collection>;
    domainAvailability: DomainAvailability;
    emailAvailability: EmailAvailability;
    emailLogs: PaginatedEmailLog;
    embed: Embed;
    exploreSpaces: PaginatedSpace;
    extraProperties: Array<ExtraProperty>;
    feed: PaginatedPost;
    /** @deprecated This query will be replaced by app */
    getAppById: App;
    /** @deprecated This query will be replaced by app */
    getAppBySlug: App;
    getAppNetworkSettings: Scalars['String'];
    getAppSpaceSettings: Scalars['String'];
    getAppWidget: Widget;
    getAppWidgets: PaginatedWidget;
    /** @deprecated This query will be replaced by apps */
    getApps: PaginatedApp;
    /** @deprecated This query will be replaced by authMember */
    getAuthMember: Member;
    /** @deprecated This query will be replaced by embed */
    getEmbed: Embed;
    /** @deprecated This query will be replaced by feed */
    getFeed: PaginatedPost;
    /** @deprecated This query will be replaced by collection */
    getGroup: Collection;
    /** @deprecated This query will be replaced by collections */
    getGroups: Array<Collection>;
    /** @deprecated This query will be replaced by media */
    getMedia: Media;
    /** @deprecated This query will be replaced by member */
    getMember: Member;
    getMemberAppInstallations: PaginatedAppInstallation;
    /** @deprecated This query will be replaced by memberInvitation */
    getMemberInvitation: MemberInvitation;
    /** @deprecated This query will be replaced by memberInvitationLink */
    getMemberInvitationLink: MemberInvitationLink;
    /** @deprecated This query will be replaced by memberInvitations */
    getMemberInvitations: PaginatedMemberInvitation;
    /** @deprecated This query will be replaced by memberNotificationSettings */
    getMemberNetworkNotificationSettings: Array<MemberNetworkNotificationSettings>;
    /** @deprecated This query will be replaced by memberNotificationSettings */
    getMemberNotificationSettings: MemberNotificationSettings;
    /** @deprecated This query will be replaced by memberPosts */
    getMemberPosts: PaginatedPost;
    /** @deprecated This query will be replaced by memberNotificationSettings */
    getMemberSpaceNotificationSettings: Array<MemberSpaceNotificationSettings>;
    /** @deprecated This query will be replaced by memberSpaces */
    getMemberSpaces: PaginatedSpaceMember;
    /** @deprecated This query will be replaced by members */
    getMembers: PaginatedMember;
    /** @deprecated This query will be replaced by moderationItem */
    getModerationById: ModerationItem;
    /** @deprecated This query will be replaced by moderationItemReporters */
    getModerationReporters: PaginatedModerationItemReporter;
    /** @deprecated This query will be replaced by moderationSettings */
    getModerationSetting: ModerationSettings;
    /** @deprecated This query will be replaced by moderationItems */
    getModerations: PaginatedModeration;
    /** @deprecated This query will be replaced by network */
    getNetwork: Network;
    getNetworkAppInstallations: PaginatedAppInstallation;
    /** @deprecated This query will be replaced by networkApps */
    getNetworkApps: Array<App>;
    /** @deprecated This query will be replaced by networkPublicInfo */
    getNetworkPublicInfo: NetworkPublicInfo;
    /** @deprecated This query will be replaced by networks */
    getNetworks: PaginatedNetwork;
    /** @deprecated This query will be replaced by notifications */
    getNotifications: PaginatedNotification;
    /** @deprecated This query will be replaced by notificationsCount */
    getNotificationsCount: NotificationsCount;
    /** @deprecated This query will be replaced by permissions */
    getPermissions: Permissions;
    /** @deprecated This query will be replaced by post */
    getPost: Post;
    getPostAppInstallations: PaginatedAppInstallation;
    /** @deprecated This query will be replaced by postReactionParticipants */
    getPostReactionParticipants: PaginatedPostReactionParticipant;
    /** @deprecated This query will be replaced by posts */
    getPosts: PaginatedPost;
    /** @deprecated This query will be replaced by redirect */
    getRedirectUrl: Redirect;
    /** @deprecated This query will be replaced by replies */
    getReplies: PaginatedPost;
    /** @deprecated This query will be replaced by report */
    getReport: Report;
    /** @deprecated This query will be replaced by roles */
    getRoles: Array<Role>;
    /** @deprecated This query will be replaced by scopes */
    getScopes: Scopes;
    /** @deprecated This query will be replaced by space */
    getSpace: Space;
    getSpaceAppInstallations: PaginatedAppInstallation;
    /** @deprecated This query will be replaced by spaceMembers */
    getSpaceMembers: PaginatedSpaceMember;
    /** @deprecated This query will be replaced by memberSpaceMembershipRequest */
    getSpaceMembershipRequestForMember: Array<SpaceJoinRequest>;
    /** @deprecated This query will be replaced by spaceMembershipRequests */
    getSpaceMembershipRequests: Array<SpaceJoinRequest>;
    /** @deprecated This query will be replaced by spacePinnedPosts */
    getSpacePinnedPosts: Array<Post>;
    /** @deprecated This query will be replaced by report */
    getSpaceReport: Report;
    /** @deprecated This query will be replaced by spaceRoles */
    getSpaceRoles: Array<SpaceRole>;
    /** @deprecated This query will be replaced by tagPosts */
    getSpaceTopicPosts: PaginatedPost;
    /** @deprecated This query will be replaced by tags */
    getSpaceTopics: PaginatedTag;
    /** @deprecated This query will be replaced by spaces */
    getSpaces: PaginatedSpace;
    /** @deprecated This query will be replaced by ssoMemberships */
    getSsoMemberships: Array<SsoMembership>;
    /** @deprecated This query will be replaced by supportNetworkTokens */
    getSupportNetworkTokens: SupportLimitedAuthToken;
    /** @deprecated This query will be replaced by tokens */
    getTokens: AuthToken;
    globalApp: App;
    globalAppCollaborators: Array<AppCollaborator>;
    globalAppPublications: Array<AppPublication>;
    globalAppSettings: AppSetting;
    globalAppWidget: Widget;
    globalAppWidgets: PaginatedWidget;
    globalApps: PaginatedApp;
    globalEmbed: Embed;
    globalEventTypes: Array<EventType>;
    globalMedia: Media;
    globalNetworks: PaginatedNetwork;
    globalToken: GlobalToken;
    /** @deprecated This query will be replaced by impersonateLoginToNetwork mutation */
    impersonateLoginToNetwork: AuthInfoWithOtp;
    invitationLinkValidity: MemberInvitationLink;
    invoices: Array<Invoice>;
    leaderboard: Array<Member>;
    leaderboardWithScores: Array<LeaderboardItem>;
    limitedToken: AppToken;
    /** @deprecated This query will be replaced by loginNetwork mutation */
    loginNetwork: AuthToken;
    loginNetworkWithGlobalToken: AuthToken;
    /** @deprecated This query will be replaced by loginNetworkWithPassword mutation */
    loginNetworkWithPassword: AuthToken;
    /** @deprecated This query will be replaced by supportSsoUrl */
    loginSupportWithSso: SupportSsoUrl;
    loginSupportWithSsoCode: SupportAuthToken;
    /** @deprecated This query will be replaced by ssoUrl */
    loginWithSso: SsoUrl;
    /** @deprecated This query will be replaced by loginWithSsoCode mutation */
    loginWithSsoCode: AuthToken;
    media: Media;
    member: Member;
    memberInvitation: MemberInvitation;
    memberInvitationLink: MemberInvitationLink;
    memberInvitationValidity: MemberInvitation;
    memberInvitations: PaginatedMemberInvitation;
    memberNotificationSettings: MemberNotificationSettings;
    memberPostNotificationSettings: MemberPostNotificationSettings;
    memberPosts: PaginatedPost;
    memberScore: Report;
    memberSpaceMembershipRequest: Array<SpaceJoinRequest>;
    memberSpaces: PaginatedSpaceMember;
    members: PaginatedMember;
    moderationItem: ModerationItem;
    moderationItemReporters: PaginatedModerationItemReporter;
    moderationItems: PaginatedModeration;
    moderationSettings: ModerationSettings;
    network: Network;
    networkApps: Array<App>;
    networkPublicInfo: NetworkPublicInfo;
    networks: PaginatedNetwork;
    networksMembers: PaginatedPluralMember;
    newDomainStatus: DomainTransferStatus;
    notifications: PaginatedNotification;
    notificationsCount: NotificationsCount;
    page: Page;
    passwordComplexity: PasswordComplexity;
    permission: Permission;
    permissions: Array<Permission>;
    post: Post;
    postReactionParticipants: PaginatedPostReactionParticipant;
    postType: PostType;
    postTypes: PaginatedPostType;
    posts: PaginatedPost;
    postsByIds: Array<Post>;
    redirect: Redirect;
    replies: PaginatedPost;
    report: Report;
    roles: Array<Role>;
    scopes: Scopes;
    search: SearchResult;
    space: Space;
    spaceDefaultNotificationSettings: Array<SpaceDefaultNotificationSettings>;
    spaceMembers: PaginatedSpaceMember;
    spaceMembershipRequests: Array<SpaceJoinRequest>;
    spacePinnedPosts: Array<Post>;
    spacePostType: SpacePostType;
    spacePostTypes: PaginatedSpacePostType;
    spaceRoles: Array<SpaceRole>;
    spaces: PaginatedSpace;
    spacesByIds: Array<Space>;
    spacesBySlugs: Array<Space>;
    ssoMemberships: Array<SsoMembership>;
    ssoUrl: SsoUrl;
    ssos: Array<Sso>;
    subscription: Subscription;
    supportNetworkTokens: SupportLimitedAuthToken;
    supportSsoUrl: SupportSsoUrl;
    systemSpaces: Array<Space>;
    tagPosts: PaginatedPost;
    tags: PaginatedTag;
    templates: PaginatedTemplate;
    tokens: AuthToken;
    usernameAvailability: UsernameAvailability;
    vatTypes: Array<VatTypeInfo>;
};
export declare type QueryAccessGroupArgs = {
    id: Scalars['ID'];
};
export declare type QueryActivityLogsArgs = {
    query: Scalars['String'];
};
export declare type QueryAppArgs = {
    id?: Maybe<Scalars['ID']>;
    slug?: Maybe<Scalars['String']>;
};
export declare type QueryAppsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<StoreItemStatus>;
};
export declare type QueryBasketsArgs = {
    input: BasketsInput;
};
export declare type QueryCheckDomainAvailabilityArgs = {
    input: DomainAvailabilityInput;
};
export declare type QueryCheckEmailAvailabilityArgs = {
    email: Scalars['String'];
};
export declare type QueryCheckInvitationLinkValidityArgs = {
    invitationLinkId: Scalars['String'];
};
export declare type QueryCheckMemberInvitationValidityArgs = {
    token: Scalars['String'];
};
export declare type QueryCheckNewDomainStatusArgs = {
    domain: Scalars['String'];
};
export declare type QueryCheckPasswordComplexityArgs = {
    password: Scalars['String'];
};
export declare type QueryCheckUsernameAvailabilityArgs = {
    username: Scalars['String'];
};
export declare type QueryCollectionArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type QueryCollectionsArgs = {
    orderBy?: Maybe<CollectionListOrderByEnum>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryDomainAvailabilityArgs = {
    input: DomainAvailabilityInput;
};
export declare type QueryEmailAvailabilityArgs = {
    email: Scalars['String'];
};
export declare type QueryEmailLogsArgs = {
    after?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    recipient?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    statuses?: Maybe<Array<EmailStatus>>;
    types?: Maybe<Array<EmailType>>;
};
export declare type QueryEmbedArgs = {
    input: EmbedInput;
};
export declare type QueryExploreSpacesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    collectionId?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryExtraPropertiesArgs = {
    entityId?: Maybe<Scalars['String']>;
    entityType: ExtraPropertyEntityType;
    keys?: Maybe<Array<Scalars['String']>>;
};
export declare type QueryFeedArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    filterBy?: Maybe<Array<PostListFilterByInput>>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    onlyMemberSpaces?: Maybe<Scalars['Boolean']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    postTypeIds?: Maybe<Array<Scalars['String']>>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetAppByIdArgs = {
    id: Scalars['ID'];
};
export declare type QueryGetAppBySlugArgs = {
    slug: Scalars['String'];
};
export declare type QueryGetAppNetworkSettingsArgs = {
    appId: Scalars['ID'];
};
export declare type QueryGetAppSpaceSettingsArgs = {
    appId: Scalars['ID'];
    spaceId: Scalars['ID'];
};
export declare type QueryGetAppWidgetArgs = {
    appId: Scalars['ID'];
    widgetId: Scalars['ID'];
};
export declare type QueryGetAppWidgetsArgs = {
    after?: Maybe<Scalars['String']>;
    appId: Scalars['ID'];
    before?: Maybe<Scalars['String']>;
    context?: Maybe<WidgetContexts>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    position?: Maybe<WidgetPositions>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetAppsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<StoreItemStatus>;
};
export declare type QueryGetEmbedArgs = {
    input: EmbedInput;
};
export declare type QueryGetFeedArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    filterBy?: Maybe<Array<PostListFilterByInput>>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    onlyMemberSpaces?: Maybe<Scalars['Boolean']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    postTypeIds?: Maybe<Array<Scalars['String']>>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetGroupArgs = {
    groupId?: Maybe<Scalars['ID']>;
};
export declare type QueryGetMediaArgs = {
    mediaId: Scalars['ID'];
};
export declare type QueryGetMemberArgs = {
    memberId?: Maybe<Scalars['ID']>;
    username?: Maybe<Scalars['String']>;
};
export declare type QueryGetMemberAppInstallationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<AppInstallationStatus>;
};
export declare type QueryGetMemberInvitationArgs = {
    id: Scalars['ID'];
};
export declare type QueryGetMemberInvitationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<MemberInvitationStatus>;
};
export declare type QueryGetMemberNetworkNotificationSettingsArgs = {
    memberId?: Maybe<Scalars['ID']>;
};
export declare type QueryGetMemberNotificationSettingsArgs = {
    memberId?: Maybe<Scalars['ID']>;
};
export declare type QueryGetMemberPostsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    memberId: Scalars['ID'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetMemberSpaceNotificationSettingsArgs = {
    memberId?: Maybe<Scalars['ID']>;
    spaceId: Scalars['ID'];
};
export declare type QueryGetMemberSpacesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    groupId?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    memberId: Scalars['ID'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type QueryGetMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleIds?: Maybe<Array<Scalars['ID']>>;
    status?: Maybe<Array<MemberStatusInput>>;
};
export declare type QueryGetModerationByIdArgs = {
    moderationId: Scalars['ID'];
};
export declare type QueryGetModerationReportersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    moderationId: Scalars['String'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetModerationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    entityId?: Maybe<Scalars['String']>;
    entityType?: Maybe<ModerationEntityType>;
    flaggedBy?: Maybe<FlaggedType>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId?: Maybe<Scalars['String']>;
    status?: Maybe<ModerationStatus>;
};
export declare type QueryGetNetworkAppInstallationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<AppInstallationStatus>;
};
export declare type QueryGetNetworkAppsArgs = {
    status?: Maybe<AppInstallationStatus>;
};
export declare type QueryGetNetworksArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetNotificationsArgs = {
    after?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
};
export declare type QueryGetPermissionsArgs = {
    contexts?: Maybe<Array<PermissionsContextInput>>;
};
export declare type QueryGetPostArgs = {
    postId: Scalars['ID'];
};
export declare type QueryGetPostAppInstallationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    postId: Scalars['ID'];
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<AppInstallationStatus>;
};
export declare type QueryGetPostReactionParticipantsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    postId: Scalars['ID'];
    reaction: Scalars['ID'];
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetPostsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    excludePins?: Maybe<Scalars['Boolean']>;
    filterBy?: Maybe<Array<PostListFilterByInput>>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    postTypeIds?: Maybe<Array<Scalars['String']>>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type QueryGetRedirectUrlArgs = {
    url: Scalars['String'];
};
export declare type QueryGetRepliesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    excludePins?: Maybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    postId: Scalars['ID'];
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetReportArgs = {
    input: ReportInput;
};
export declare type QueryGetScopesArgs = {
    contexts?: Maybe<Array<PermissionsContextInput>>;
};
export declare type QueryGetSpaceArgs = {
    spaceId?: Maybe<Scalars['ID']>;
    spaceSlug?: Maybe<Scalars['ID']>;
};
export declare type QueryGetSpaceAppInstallationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId: Scalars['ID'];
    status?: Maybe<AppInstallationStatus>;
};
export declare type QueryGetSpaceMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleIds?: Maybe<Array<Scalars['ID']>>;
    spaceId: Scalars['ID'];
};
export declare type QueryGetSpaceMembershipRequestForMemberArgs = {
    status?: Maybe<SpaceJoinRequestStatus>;
};
export declare type QueryGetSpaceMembershipRequestsArgs = {
    spaceId: Scalars['ID'];
    status?: Maybe<SpaceJoinRequestStatus>;
};
export declare type QueryGetSpacePinnedPostsArgs = {
    spaceId: Scalars['ID'];
};
export declare type QueryGetSpaceReportArgs = {
    input: ReportInput;
    spaceId: Scalars['String'];
};
export declare type QueryGetSpaceRolesArgs = {
    spaceId?: Maybe<Scalars['ID']>;
};
export declare type QueryGetSpaceTopicPostsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId: Scalars['ID'];
    topicId: Scalars['ID'];
};
export declare type QueryGetSpaceTopicsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId: Scalars['ID'];
};
export declare type QueryGetSpacesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    memberId?: Maybe<Scalars['ID']>;
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGetSsoMembershipsArgs = {
    memberId: Scalars['String'];
};
export declare type QueryGetSupportNetworkTokensArgs = {
    input: CreateLimitedSupportTokenInput;
};
export declare type QueryGetTokensArgs = {
    networkDomain?: Maybe<Scalars['String']>;
    networkId?: Maybe<Scalars['ID']>;
    otp?: Maybe<Scalars['String']>;
    refreshToken?: Maybe<Scalars['String']>;
};
export declare type QueryGlobalAppArgs = {
    id?: Maybe<Scalars['ID']>;
    slug?: Maybe<Scalars['String']>;
};
export declare type QueryGlobalAppCollaboratorsArgs = {
    appId: Scalars['String'];
};
export declare type QueryGlobalAppPublicationsArgs = {
    appId: Scalars['ID'];
};
export declare type QueryGlobalAppSettingsArgs = {
    context: PermissionContext;
    entityId?: Maybe<Scalars['ID']>;
    networkId: Scalars['ID'];
};
export declare type QueryGlobalAppWidgetArgs = {
    appId: Scalars['ID'];
    widgetId: Scalars['ID'];
};
export declare type QueryGlobalAppWidgetsArgs = {
    after?: Maybe<Scalars['String']>;
    appId: Scalars['ID'];
    before?: Maybe<Scalars['String']>;
    context?: Maybe<WidgetContexts>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    position?: Maybe<WidgetPositions>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryGlobalAppsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<StoreItemStatus>;
};
export declare type QueryGlobalEmbedArgs = {
    input: EmbedInput;
};
export declare type QueryGlobalMediaArgs = {
    id: Scalars['ID'];
};
export declare type QueryGlobalNetworksArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleType?: Maybe<RoleType>;
};
export declare type QueryGlobalTokenArgs = {
    input: GlobalTokenInput;
};
export declare type QueryImpersonateLoginToNetworkArgs = {
    input: ImpersonateLoginToNetworkInput;
};
export declare type QueryInvitationLinkValidityArgs = {
    id: Scalars['String'];
};
export declare type QueryLeaderboardArgs = {
    input: ReportInput;
};
export declare type QueryLeaderboardWithScoresArgs = {
    includeAuthMember: Scalars['Boolean'];
    input: ReportInput;
};
export declare type QueryLimitedTokenArgs = {
    context: PermissionContext;
    entityId: Scalars['String'];
    impersonateMemberId?: Maybe<Scalars['String']>;
    networkId: Scalars['String'];
};
export declare type QueryLoginNetworkArgs = {
    input: LoginNetworkWithPasswordInput;
};
export declare type QueryLoginNetworkWithGlobalTokenArgs = {
    input: LoginNetworkWithGlobalTokenInput;
};
export declare type QueryLoginNetworkWithPasswordArgs = {
    input: LoginNetworkWithPasswordInput;
};
export declare type QueryLoginSupportWithSsoArgs = {
    input?: Maybe<SupportSsoUrlInput>;
};
export declare type QueryLoginSupportWithSsoCodeArgs = {
    input: LoginSupportWithSsoCodeInput;
};
export declare type QueryLoginWithSsoArgs = {
    input: SsoUrlInput;
};
export declare type QueryLoginWithSsoCodeArgs = {
    input: LoginWithSsoCodeInput;
};
export declare type QueryMediaArgs = {
    id: Scalars['ID'];
};
export declare type QueryMemberArgs = {
    id?: Maybe<Scalars['ID']>;
    username?: Maybe<Scalars['String']>;
};
export declare type QueryMemberInvitationArgs = {
    id: Scalars['ID'];
};
export declare type QueryMemberInvitationValidityArgs = {
    token: Scalars['String'];
};
export declare type QueryMemberInvitationsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<MemberInvitationStatus>;
};
export declare type QueryMemberNotificationSettingsArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type QueryMemberPostNotificationSettingsArgs = {
    memberId?: Maybe<Scalars['ID']>;
    postId: Scalars['ID'];
};
export declare type QueryMemberPostsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    hasParent?: Maybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
    memberId: Scalars['ID'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryMemberScoreArgs = {
    input: ReportInput;
    spaceId?: Maybe<Scalars['String']>;
};
export declare type QueryMemberSpaceMembershipRequestArgs = {
    status?: Maybe<SpaceJoinRequestStatus>;
};
export declare type QueryMemberSpacesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    collectionId?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    memberId: Scalars['ID'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type QueryMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    filterBy?: Maybe<Array<MemberListFilterByInput>>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Scalars['String']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleIds?: Maybe<Array<Scalars['ID']>>;
    status?: Maybe<Array<MemberStatusInput>>;
};
export declare type QueryModerationItemArgs = {
    id: Scalars['ID'];
};
export declare type QueryModerationItemReportersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    moderationId: Scalars['String'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryModerationItemsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    entityId?: Maybe<Scalars['String']>;
    entityType?: Maybe<ModerationEntityType>;
    flaggedBy?: Maybe<FlaggedType>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId?: Maybe<Scalars['String']>;
    status?: Maybe<ModerationStatus>;
};
export declare type QueryNetworkAppsArgs = {
    status?: Maybe<AppInstallationStatus>;
};
export declare type QueryNetworksArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryNetworksMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleType?: Maybe<RoleType>;
    status?: Maybe<Array<MemberStatus>>;
};
export declare type QueryNewDomainStatusArgs = {
    domain: Scalars['String'];
};
export declare type QueryNotificationsArgs = {
    after?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
};
export declare type QueryPageArgs = {
    path: Scalars['String'];
};
export declare type QueryPasswordComplexityArgs = {
    password: Scalars['String'];
};
export declare type QueryPermissionArgs = {
    id: Scalars['ID'];
};
export declare type QueryPostArgs = {
    id: Scalars['ID'];
};
export declare type QueryPostReactionParticipantsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    postId: Scalars['ID'];
    reaction: Scalars['ID'];
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryPostTypeArgs = {
    id: Scalars['ID'];
};
export declare type QueryPostTypesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    context?: Maybe<PostTypeContext>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryPostsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    excludePins?: Maybe<Scalars['Boolean']>;
    filterBy?: Maybe<Array<PostListFilterByInput>>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    postTypeIds?: Maybe<Array<Scalars['String']>>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceIds?: Maybe<Array<Scalars['ID']>>;
};
export declare type QueryPostsByIdsArgs = {
    ids: Array<Scalars['ID']>;
    statuses?: Maybe<Array<Scalars['ID']>>;
};
export declare type QueryRedirectArgs = {
    url: Scalars['String'];
};
export declare type QueryRepliesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    excludePins?: Maybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PostListOrderByEnum>;
    postId: Scalars['ID'];
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryReportArgs = {
    input: ReportInput;
    spaceId?: Maybe<Scalars['String']>;
};
export declare type QueryRolesArgs = {
    orderBy?: Maybe<RoleListOrderByEnum>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type QueryScopesArgs = {
    contexts?: Maybe<Array<PermissionsContextInput>>;
};
export declare type QuerySearchArgs = {
    input: SearchInput;
};
export declare type QuerySpaceArgs = {
    id?: Maybe<Scalars['ID']>;
    path?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['ID']>;
};
export declare type QuerySpaceDefaultNotificationSettingsArgs = {
    spaceId: Scalars['ID'];
};
export declare type QuerySpaceMembersArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SpaceMemberListOrderByEnum>;
    reverse?: Maybe<Scalars['Boolean']>;
    roleIds?: Maybe<Array<Scalars['ID']>>;
    spaceId: Scalars['ID'];
};
export declare type QuerySpaceMembershipRequestsArgs = {
    spaceId: Scalars['ID'];
    status?: Maybe<SpaceJoinRequestStatus>;
};
export declare type QuerySpacePinnedPostsArgs = {
    spaceId: Scalars['ID'];
};
export declare type QuerySpacePostTypeArgs = {
    postTypeId: Scalars['Int'];
    spaceId: Scalars['Int'];
};
export declare type QuerySpacePostTypesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    context?: Maybe<PostTypeContext>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId: Scalars['Int'];
};
export declare type QuerySpaceRolesArgs = {
    orderBy?: Maybe<SpaceRoleListOrderByEnum>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId?: Maybe<Scalars['ID']>;
};
export declare type QuerySpacesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    collectionId?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    memberId?: Maybe<Scalars['ID']>;
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SpaceListOrderByEnum>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    type?: Maybe<Array<SpaceType>>;
};
export declare type QuerySpacesByIdsArgs = {
    ids: Array<Scalars['ID']>;
};
export declare type QuerySpacesBySlugsArgs = {
    slugs: Array<Scalars['String']>;
};
export declare type QuerySsoMembershipsArgs = {
    memberId: Scalars['String'];
};
export declare type QuerySsoUrlArgs = {
    input: SsoUrlInput;
};
export declare type QuerySsosArgs = {
    status?: Maybe<SsoStatus>;
};
export declare type QuerySubscriptionArgs = {
    input: SubscriptionInput;
};
export declare type QuerySupportNetworkTokensArgs = {
    networkId: Scalars['String'];
};
export declare type QuerySupportSsoUrlArgs = {
    input?: Maybe<SupportSsoUrlInput>;
};
export declare type QueryTagPostsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId?: Maybe<Scalars['ID']>;
    tagId: Scalars['ID'];
};
export declare type QueryTagsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TagListOrderByEnum>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
    spaceId?: Maybe<Scalars['ID']>;
};
export declare type QueryTemplatesArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    entityTypes?: Maybe<Array<TemplateEntityType>>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<StoreItemStatus>;
};
export declare type QueryTokensArgs = {
    networkDomain?: Maybe<Scalars['String']>;
    networkId?: Maybe<Scalars['ID']>;
    otp?: Maybe<Scalars['String']>;
    refreshToken?: Maybe<Scalars['String']>;
    ssoToken?: Maybe<Scalars['String']>;
};
export declare type QueryUsernameAvailabilityArgs = {
    username: Scalars['String'];
};
export declare type ReOrderSchemaFieldInput = {
    index: Scalars['Int'];
    key: Scalars['String'];
};
export declare enum ReactionType {
    EMOJI_BASE = "EMOJI_BASE",
    LIKE_BASE = "LIKE_BASE",
    VOTE_BASE = "VOTE_BASE"
}
export declare type Redirect = {
    resolvedUrl: Scalars['String'];
    url: Scalars['String'];
};
export declare enum RelationTypeOptions {
    MEDIA = "media",
    MEMBER = "member",
    POST = "post",
    TAG = "tag"
}
export declare type Report = {
    data?: Maybe<Array<ReportData>>;
    description?: Maybe<Scalars['String']>;
    endDate?: Maybe<Scalars['DateTime']>;
    previousValue?: Maybe<Scalars['String']>;
    slug: Scalars['String'];
    startDate?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
    tooltip?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['String']>;
};
export declare enum ReportCategory {
    HARASSMENT = "HARASSMENT",
    MISINFORMATION = "MISINFORMATION",
    NUDITY = "NUDITY",
    SPAM = "SPAM",
    SUICIDE = "SUICIDE",
    TERRORISM = "TERRORISM",
    VIOLENCE = "VIOLENCE"
}
export declare type ReportData = {
    description?: Maybe<Scalars['String']>;
    key: Scalars['String'];
    previousValue?: Maybe<ReportDataValue>;
    type: ReportDataType;
    value: ReportDataValue;
};
export declare enum ReportDataType {
    CHART_DATA = "chartData",
    ENTITY_REPORT = "entityReport",
    INT_VALUE = "intValue",
    STRING_VALUE = "stringValue"
}
export declare type ReportDataValue = ChartData | EntityReport | IntValue | StringValue;
export declare type ReportEntities = {
    actor?: Maybe<Member>;
    app?: Maybe<App>;
    member?: Maybe<Member>;
    network?: Maybe<Network>;
    post?: Maybe<Post>;
    space?: Maybe<Space>;
    tag?: Maybe<Tag>;
};
export declare type ReportInput = {
    endDate?: Maybe<Scalars['String']>;
    limit?: Maybe<Scalars['Int']>;
    slug: ReportSlug;
    sort?: Maybe<ColumnSortInput>;
    startDate?: Maybe<Scalars['String']>;
    timeFrame?: Maybe<ReportTimeFrame>;
    timeZone: Scalars['String'];
};
export declare type ReportPayload = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type ReportRecord = {
    entities: ReportEntities;
    payload: Array<ReportPayload>;
};
export declare enum ReportSlug {
    ACTIVE_MEMBERS = "activeMembers",
    AVERAGE_DAILY_ACTIVE_MEMBERS = "averageDailyActiveMembers",
    HIGHLIGHTS = "highlights",
    MEMBER_SCORE = "memberScore",
    NEW_MEMBERS_OVER_TIME = "newMembersOverTime",
    NEW_POSTS = "newPosts",
    NEW_REACTIONS = "newReactions",
    NEW_REPLIES = "newReplies",
    POPULAR_DAYS_OF_WEEK = "popularDaysOfWeek",
    POPULAR_HOURS_OF_DAY = "popularHoursOfDay",
    POSTS_V_SREPLIES = "postsVSreplies",
    TOP_MEMBERS = "topMembers",
    TOP_POSTS = "topPosts",
    TOP_SPACES = "topSpaces",
    TOTAL_MEMBERS = "totalMembers",
    TOTAL_POSTS = "totalPosts",
    TOTAL_REACTIONS = "totalReactions",
    TOTAL_REPLIES = "totalReplies",
    TOTAL_VISITORS = "totalVisitors",
    TRENDING_TAGS = "trendingTags"
}
export declare enum ReportTimeFrame {
    ALL_TIME = "allTime",
    LAST_CALENDAR_QUARTER = "lastCalendarQuarter",
    LAST_CALENDAR_YEAR = "lastCalendarYear",
    LAST_MONTH = "lastMonth",
    LAST_NINETY_DAYS = "lastNinetyDays",
    LAST_SEVEN_DAYS = "lastSevenDays",
    LAST_THIRTY_DAYS = "lastThirtyDays",
    LAST_TWELVE_MONTH = "lastTwelveMonth",
    LAST_WEEK = "lastWeek",
    TODAY = "today",
    YESTERDAY = "yesterday"
}
export declare type ReportableEntity = Member | Post | Space | Tag;
export declare enum ReportableEntityType {
    MEMBER = "member",
    POST = "post",
    SPACE = "space",
    TOPIC = "topic"
}
export declare type RequestGlobalTokenInput = {
    email: Scalars['String'];
};
export declare type ResetPasswordInput = {
    email: Scalars['String'];
};
export declare enum RichTextTypeOptions {
    HTML = "html",
    MARKUP = "markup"
}
export declare type Role = {
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    scopes: Array<Scalars['String']>;
    type?: Maybe<RoleType>;
    visible: Scalars['Boolean'];
};
export declare enum RoleListOrderByEnum {
    CREATED_AT = "CREATED_AT",
    UPDATED_AT = "UPDATED_AT"
}
export declare enum RoleType {
    ADMIN = "admin",
    GUEST = "guest",
    MEMBER = "member",
    MODERATOR = "moderator"
}
export declare type Scopes = {
    contextAwareScopes: Array<ContextScopes>;
    scopes: Array<Scalars['String']>;
};
export declare type SearchEntity = {
    by?: Maybe<By>;
    content?: Maybe<Scalars['String']>;
    created: Scalars['DateTime'];
    entityId: Scalars['String'];
    entityType: SearchEntityType;
    id: Scalars['ID'];
    in?: Maybe<In>;
    media?: Maybe<Media>;
    subtitle?: Maybe<Scalars['String']>;
    title: Scalars['String'];
};
export declare type SearchEntityGroup = {
    entityType: SearchEntityType;
    hits: Array<SearchEntity>;
};
export declare enum SearchEntityType {
    MEMBER = "member",
    POST = "post",
    SPACE = "space"
}
export declare type SearchInput = {
    filters?: Maybe<Array<FiltersInput>>;
    query: Scalars['String'];
};
export declare type SearchResult = {
    hits: Array<SearchEntityGroup>;
    totalCount: Scalars['Float'];
};
export declare type SignedUrl = {
    fields: Scalars['String'];
    mediaDownloadUrl: Scalars['String'];
    mediaId: Scalars['ID'];
    mediaUrl: Scalars['String'];
    signedUrl: Scalars['String'];
    urls?: Maybe<MediaUrls>;
};
export declare type Slate = {
    blocks: Array<SlateComponent>;
    components: Array<SlateComponentOrPlaceholder>;
    id: Scalars['String'];
    restrictions?: Maybe<SlateRestrictions>;
    rootBlock: Scalars['String'];
    rootComponents: Array<Scalars['String']>;
};
export declare type SlateComponent = {
    children?: Maybe<Scalars['String']>;
    id: Scalars['String'];
    name: Scalars['String'];
    output?: Maybe<Scalars['String']>;
    props?: Maybe<Scalars['String']>;
};
export declare type SlateComponentOrPlaceholder = SlateComponent | SlatePlaceholder;
export declare type SlateInput = {
    blocks: Array<BlockInput>;
    id: Scalars['String'];
    rootBlock: Scalars['String'];
};
export declare type SlatePlaceholder = {
    id: Scalars['String'];
    slate: Scalars['String'];
};
export declare type SlateRestrictions = {
    lockedChildrenBlocks?: Maybe<Array<Scalars['String']>>;
    nonEditableBlocks?: Maybe<Array<Scalars['String']>>;
    nonRemovableBlocks?: Maybe<Array<Scalars['String']>>;
};
export declare type SlateUpdatesInput = {
    addedBlocks?: Maybe<Array<BlockInput>>;
    removedBlocks?: Maybe<Array<Scalars['String']>>;
    rootBlock?: Maybe<Scalars['String']>;
    updatedBlocks?: Maybe<Array<UpdateBlockInput>>;
};
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export declare type Space = {
    address: SpaceAddress;
    authMemberProps?: Maybe<SpaceAuthMemberProps>;
    banner?: Maybe<Media>;
    bannerId?: Maybe<Scalars['ID']>;
    collection?: Maybe<Collection>;
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<Member>;
    createdById: Scalars['ID'];
    customOrderingIndexInGroup: Scalars['Float'];
    customSeoDetail?: Maybe<CustomSeoDetail>;
    description?: Maybe<Scalars['String']>;
    groupId?: Maybe<Scalars['ID']>;
    hidden?: Maybe<Scalars['Boolean']>;
    highlightedTags?: Maybe<Array<HighlightedTag>>;
    id: Scalars['ID'];
    image?: Maybe<Media>;
    imageId?: Maybe<Scalars['ID']>;
    installedApps?: Maybe<PaginatedAppInstallation>;
    inviteOnly?: Maybe<Scalars['Boolean']>;
    layout: Scalars['String'];
    members?: Maybe<PaginatedSpaceMember>;
    membersCount: Scalars['Int'];
    name: Scalars['String'];
    network?: Maybe<Network>;
    networkId: Scalars['ID'];
    nonAdminsCanInvite?: Maybe<Scalars['Boolean']>;
    pinnedPosts?: Maybe<Array<Post>>;
    posts?: Maybe<PaginatedPost>;
    postsCount?: Maybe<Scalars['Int']>;
    private?: Maybe<Scalars['Boolean']>;
    roles?: Maybe<Array<SpaceRole>>;
    seoDetail?: Maybe<SpaceSeoDetail>;
    sidebarWidgets?: Maybe<Array<Scalars['String']>>;
    slate?: Maybe<Slate>;
    slug: Scalars['String'];
    tagFilter?: Maybe<TagFilter>;
    tags?: Maybe<PaginatedTag>;
    type: SpaceType;
    whoCanPost?: Maybe<Array<Scalars['ID']>>;
    whoCanReact?: Maybe<Array<Scalars['ID']>>;
    whoCanReply?: Maybe<Array<Scalars['ID']>>;
};
export declare type SpaceInstalledAppsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    reverse?: Maybe<Scalars['Boolean']>;
    status?: Maybe<AppInstallationStatus>;
};
export declare type SpaceMembersArgs = {
    limit: Scalars['Int'];
};
export declare type SpacePostsArgs = {
    excludePins?: Maybe<Scalars['Boolean']>;
    limit: Scalars['Int'];
};
export declare type SpaceTagsArgs = {
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    limit: Scalars['Int'];
    offset?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TagListOrderByEnum>;
    query?: Maybe<Scalars['String']>;
    reverse?: Maybe<Scalars['Boolean']>;
};
export declare type SpaceAddress = {
    editable: Scalars['Boolean'];
    exact: Scalars['Boolean'];
    path: Scalars['String'];
};
export declare type SpaceAddressInput = {
    editable?: Maybe<Scalars['Boolean']>;
    exact: Scalars['Boolean'];
    path: Scalars['String'];
};
export declare type SpaceAuthMemberProps = {
    availablePostTypes?: Maybe<Array<PostType>>;
    context: PermissionContext;
    membershipStatus?: Maybe<SpaceMembershipStatus>;
    permissions?: Maybe<Array<ActionPermissions>>;
    scopes?: Maybe<Array<Scalars['String']>>;
};
export declare type SpaceDefaultNotificationSettings = {
    channel: NotificationChannel;
    enabled?: Maybe<Scalars['Boolean']>;
    isDefault: Scalars['Boolean'];
    preference?: Maybe<SpaceNotificationPreference>;
    sameAsDefault: Scalars['Boolean'];
};
export declare type SpaceEdge = {
    cursor: Scalars['String'];
    node: Space;
};
export declare type SpaceJoinRequest = {
    id: Scalars['ID'];
    member?: Maybe<Member>;
    spaceId: Scalars['ID'];
    status: SpaceJoinRequestStatus;
};
export declare enum SpaceJoinRequestStatus {
    COMPLETED = "COMPLETED",
    DECLINED = "DECLINED",
    PENDING = "PENDING"
}
export declare enum SpaceListOrderByEnum {
    CREATED_AT = "CREATED_AT",
    CUSTOM_ORDERING_INDEX = "CUSTOM_ORDERING_INDEX",
    UPDATED_AT = "UPDATED_AT"
}
export declare type SpaceMember = {
    member?: Maybe<Member>;
    role?: Maybe<SpaceRole>;
    space?: Maybe<Space>;
};
export declare type SpaceMemberEdge = {
    cursor: Scalars['String'];
    node: SpaceMember;
};
export declare enum SpaceMemberListOrderByEnum {
    CREATED_AT = "CREATED_AT",
    UPDATED_AT = "UPDATED_AT"
}
export declare enum SpaceMembershipStatus {
    JOINED = "joined",
    NOT_JOINED = "notJoined",
    REQUESTED = "requested"
}
export declare enum SpaceNotificationPreference {
    ALL = "ALL",
    NEW_POST = "NEW_POST",
    NONE = "NONE"
}
export declare type SpacePostType = {
    postType?: Maybe<PostType>;
    postTypeId: Scalars['ID'];
    space?: Maybe<Space>;
    spaceId: Scalars['ID'];
    whoCanPost?: Maybe<Array<Scalars['ID']>>;
    whoCanReact?: Maybe<Array<Scalars['ID']>>;
    whoCanReply?: Maybe<Array<Scalars['ID']>>;
};
export declare type SpacePostTypeEdge = {
    cursor: Scalars['String'];
    node: SpacePostType;
};
export declare type SpaceRole = {
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    network?: Maybe<Network>;
    scopes: Array<Scalars['String']>;
    type?: Maybe<SpaceRoleType>;
};
export declare enum SpaceRoleListOrderByEnum {
    CREATED_AT = "CREATED_AT",
    UPDATED_AT = "UPDATED_AT"
}
export declare enum SpaceRoleType {
    ADMIN = "admin",
    MEMBER = "member"
}
export declare type SpaceSeoDetail = {
    description?: Maybe<Scalars['String']>;
    image?: Maybe<Media>;
    title: Scalars['String'];
};
export declare type SpaceSeoDetailInput = {
    description?: Maybe<Scalars['String']>;
    imageId?: Maybe<Scalars['String']>;
    title: Scalars['String'];
};
export declare enum SpaceType {
    BROADCAST = "Broadcast",
    ENTITY = "Entity",
    GROUP = "Group",
    PAGE = "Page",
    PRIVATE_MESSAGE = "PrivateMessage"
}
export declare type Sso = {
    authorizationUrl?: Maybe<Scalars['String']>;
    buttonText?: Maybe<Scalars['String']>;
    clientId?: Maybe<Scalars['String']>;
    clientSecret?: Maybe<Scalars['String']>;
    idpUrl?: Maybe<Scalars['String']>;
    logoutUrl?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    provider?: Maybe<SsoProvider>;
    scopes?: Maybe<Array<Scalars['String']>>;
    settingsUrl?: Maybe<Scalars['String']>;
    status: SsoStatus;
    tokenUrl?: Maybe<Scalars['String']>;
    type: SsoType;
    userProfileUrl?: Maybe<Scalars['String']>;
};
export declare type SsoMembership = {
    id: Scalars['String'];
    memberId: Scalars['String'];
    ssoType: SsoType;
};
export declare enum SsoProvider {
    AUTH0 = "auth0",
    CUSTOM = "custom",
    MEMBERFUL = "memberful",
    OKTA = "okta",
    OUTSETA = "outseta",
    WORDPRESS = "wordpress"
}
export declare enum SsoStatus {
    DISABLE = "disable",
    ENABLE = "enable"
}
export declare enum SsoType {
    FACEBOOK = "facebook",
    GOOGLE = "google",
    JWT = "jwt",
    LINKEDIN = "linkedin",
    OAUTH2 = "oauth2"
}
export declare type SsoUrl = {
    url: Scalars['String'];
};
export declare type SsoUrlInput = {
    callbackUrl?: Maybe<Scalars['String']>;
    invitationLinkId?: Maybe<Scalars['String']>;
    invitationToken?: Maybe<Scalars['String']>;
    type: SsoType;
};
export declare type StatusReason = {
    changedAt: Scalars['DateTime'];
    changedBy: NetworkStatusChangedBy;
    changedById?: Maybe<Scalars['String']>;
    reason?: Maybe<NetworkStatusReason>;
};
export declare enum StoreItemStanding {
    OFFICIAL = "OFFICIAL",
    REGULAR = "REGULAR",
    VERIFIED = "VERIFIED"
}
export declare enum StoreItemStatus {
    DELETED = "DELETED",
    PRIVATE = "PRIVATE",
    PUBLIC = "PUBLIC"
}
export declare type StringValue = {
    string: Scalars['String'];
};
export declare type Subscription = {
    createdAt: Scalars['DateTime'];
    id: Scalars['String'];
    status: SubscriptionStatus;
    updatedAt: Scalars['DateTime'];
};
export declare enum SubscriptionStatus {
    ACTIVE = "active",
    CANCELED = "canceled",
    FAILED = "failed",
    INCOMPLETE = "incomplete",
    INCOMPLETE_EXPIRED = "incomplete_expired",
    PAST_DUE = "past_due",
    TRIALING = "trialing",
    UNPAID = "unpaid"
}
export declare type SupportAuthToken = {
    accessToken: Scalars['String'];
    refreshToken: Scalars['String'];
};
export declare type SupportLimitedAuthToken = {
    accessToken: Scalars['String'];
    member: Member;
};
export declare type SupportSsoUrl = {
    url: Scalars['String'];
};
export declare type SupportSsoUrlInput = {
    callbackUrl?: Maybe<Scalars['String']>;
};
export declare type Tag = {
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    slug: Scalars['String'];
    title: Scalars['String'];
};
export declare type TagEdge = {
    cursor: Scalars['String'];
    node: Tag;
};
export declare type TagFilter = {
    filterType: TagFilterType;
    filters: Array<Scalars['String']>;
};
export declare enum TagFilterType {
    BLACKLIST = "BLACKLIST",
    WHITELIST = "WHITELIST"
}
export declare enum TagListOrderByEnum {
    CREATED_AT = "CREATED_AT",
    UPDATED_AT = "UPDATED_AT"
}
export declare type Template = {
    about?: Maybe<Scalars['String']>;
    authorName?: Maybe<Scalars['String']>;
    authorUrl?: Maybe<Scalars['String']>;
    banner?: Maybe<Media>;
    bannerId?: Maybe<Scalars['ID']>;
    categories: Array<Scalars['String']>;
    comingSoon: Scalars['Boolean'];
    createdAt: Scalars['DateTime'];
    createdBy?: Maybe<Member>;
    createdById?: Maybe<Scalars['ID']>;
    description?: Maybe<Scalars['String']>;
    embedIds: Array<Scalars['ID']>;
    embeds?: Maybe<Array<Embed>>;
    entityType: TemplateEntityType;
    favicon?: Maybe<Media>;
    faviconId?: Maybe<Scalars['ID']>;
    id: Scalars['ID'];
    image?: Maybe<Media>;
    imageId?: Maybe<Scalars['ID']>;
    imageIds: Array<Scalars['ID']>;
    images?: Maybe<Array<Media>>;
    installed?: Maybe<Scalars['Boolean']>;
    name: Scalars['String'];
    network?: Maybe<Network>;
    networkId: Scalars['ID'];
    privacyPolicyUrl?: Maybe<Scalars['String']>;
    requiredPlan: PlanName;
    slug: Scalars['String'];
    standing: StoreItemStanding;
    status: StoreItemStatus;
    styles: Array<TemplateStyle>;
    termsOfServiceUrl?: Maybe<Scalars['String']>;
    updatedAt: Scalars['DateTime'];
    updatedBy?: Maybe<Member>;
    updatedById?: Maybe<Scalars['ID']>;
};
export declare type TemplateEdge = {
    cursor: Scalars['String'];
    node: Template;
};
export declare enum TemplateEntityType {
    POST = "Post",
    POST_TYPE = "PostType",
    SPACE = "Space",
    SPACE_POST_TYPE = "SpacePostType",
    TAG = "Tag"
}
export declare type TemplateStyle = {
    key: Scalars['String'];
    name: Scalars['String'];
    previewImage?: Maybe<Media>;
    previewImageId?: Maybe<Scalars['String']>;
    slate: Slate;
};
export declare type TestAppWebhookInput = {
    webhookUrl: Scalars['String'];
};
export declare enum TextTypeOptions {
    FULL_TEXT = "fullText",
    SHORT_TEXT = "shortText"
}
export declare type Theme = {
    name: Scalars['String'];
    status: ThemeStatus;
    tokens: ThemeTokens;
};
export declare type ThemeColor = {
    key: Scalars['String'];
    weights: Array<ThemeToken>;
};
export declare type ThemeColors = {
    dark?: Maybe<Array<ThemeColor>>;
    light?: Maybe<Array<ThemeColor>>;
};
export declare enum ThemeStatus {
    DRAFT = "draft",
    PUBLISHED = "published"
}
export declare type ThemeToken = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type ThemeTokens = {
    breakpoints?: Maybe<Array<ThemeToken>>;
    colors?: Maybe<Array<ThemeToken>>;
    fontSizes?: Maybe<Array<ThemeToken>>;
    fontWeights?: Maybe<Array<ThemeToken>>;
    opacity?: Maybe<Array<ThemeToken>>;
    shadows?: Maybe<Array<ThemeToken>>;
    sizes?: Maybe<Array<ThemeToken>>;
    textStyles?: Maybe<Array<ThemeToken>>;
    zIndices?: Maybe<Array<ThemeToken>>;
};
export declare type Themes = {
    active: Theme;
    drafts?: Maybe<Array<Theme>>;
    published: Array<Theme>;
};
export declare type TopNavigation = {
    alignment: TopNavigationAlignment;
    enabled: Scalars['Boolean'];
    items: Array<NavigationItem>;
};
export declare enum TopNavigationAlignment {
    CENTER = "CENTER",
    LEFT = "LEFT",
    RIGHT = "RIGHT"
}
export declare enum UnauthorizedReason {
    ACCESS = "ACCESS",
    PLAN = "PLAN"
}
export declare enum UnsubscribeTokenContext {
    ALL = "ALL",
    MEMBER = "MEMBER",
    MENTIONS = "MENTIONS",
    POST = "POST",
    REACTIONS = "REACTIONS",
    SPACE = "SPACE"
}
export declare type UnsubscribeWithTokenInput = {
    context: UnsubscribeTokenContext;
    entityId?: Maybe<Scalars['String']>;
    token: Scalars['String'];
};
export declare type UpdateAccessGroupInput = {
    description?: Maybe<Scalars['String']>;
    entityId?: Maybe<Scalars['ID']>;
    entityType?: Maybe<AccessGroupEntityType>;
    info?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    type?: Maybe<Scalars['String']>;
};
export declare type UpdateAppCustomCodes = {
    body?: Maybe<Scalars['String']>;
    head?: Maybe<Scalars['String']>;
};
export declare type UpdateAppInput = {
    about?: Maybe<Scalars['String']>;
    authorName?: Maybe<Scalars['String']>;
    authorUrl?: Maybe<Scalars['String']>;
    bannerId?: Maybe<Scalars['String']>;
    comingSoon?: Maybe<Scalars['Boolean']>;
    customCodes?: Maybe<UpdateAppCustomCodes>;
    description?: Maybe<Scalars['String']>;
    docsUrl?: Maybe<Scalars['String']>;
    enabledContexts?: Maybe<Array<PermissionContext>>;
    faviconId?: Maybe<Scalars['String']>;
    imageId?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    privacyPolicyUrl?: Maybe<Scalars['String']>;
    requiredPermissions?: Maybe<Array<PrimaryScopes>>;
    requiredPlan?: Maybe<PlanName>;
    slug?: Maybe<Scalars['String']>;
    termsOfServiceUrl?: Maybe<Scalars['String']>;
    webhookSubscriptions?: Maybe<Array<Scalars['String']>>;
    webhookUrl?: Maybe<Scalars['String']>;
};
export declare type UpdateAppInstallationInput = {
    permissions?: Maybe<Array<Scalars['String']>>;
};
export declare type UpdateBadgeInput = {
    active: Scalars['Boolean'];
    backgroundColor?: Maybe<Scalars['String']>;
    daysUntilExpired?: Maybe<Scalars['Float']>;
    imageId?: Maybe<Scalars['ID']>;
    longDescription?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    shortDescription: Scalars['String'];
    textColor?: Maybe<Scalars['String']>;
};
export declare type UpdateBlockInput = {
    children?: Maybe<Scalars['String']>;
    id: Scalars['String'];
    output?: Maybe<Scalars['String']>;
    props?: Maybe<Scalars['String']>;
};
export declare type UpdateCollectionInput = {
    description?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type UpdateCustomFieldSchemaInput = {
    default?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    items?: Maybe<BaseCustomFieldSchemaInput>;
    key: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    properties?: Maybe<Array<BaseCustomFieldSchemaInput>>;
    readPrivacy?: Maybe<CustomFieldPrivacyInput>;
    required?: Maybe<Scalars['Boolean']>;
    settings?: Maybe<Array<CustomFieldSettingsInput>>;
    validators?: Maybe<Array<CustomFieldValidatorInput>>;
    writePrivacy?: Maybe<CustomFieldPrivacyInput>;
};
export declare type UpdateCustomSsoInput = {
    authorizationUrl?: Maybe<Scalars['String']>;
    buttonText?: Maybe<Scalars['String']>;
    clientId?: Maybe<Scalars['String']>;
    clientSecret?: Maybe<Scalars['String']>;
    idpUrl?: Maybe<Scalars['String']>;
    logoutUrl?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    provider?: Maybe<SsoProvider>;
    scopes?: Maybe<Array<Scalars['String']>>;
    settingsUrl?: Maybe<Scalars['String']>;
    status?: Maybe<SsoStatus>;
    tokenUrl?: Maybe<Scalars['String']>;
    type: CustomSsoType;
    userProfileUrl?: Maybe<Scalars['String']>;
};
export declare type UpdateFileInput = {
    name?: Maybe<Scalars['String']>;
};
export declare type UpdateFooter = {
    urls: Array<UpdateFooterUrl>;
};
export declare type UpdateFooterUrl = {
    title: Scalars['String'];
    url: Scalars['String'];
};
export declare type UpdateHighlightedTags = {
    highlightedTags: Array<CreateHighlightedTag>;
};
export declare type UpdateImageInput = {
    cropHeight?: Maybe<Scalars['Int']>;
    cropWidth?: Maybe<Scalars['Int']>;
    cropX?: Maybe<Scalars['Int']>;
    cropY?: Maybe<Scalars['Int']>;
    cropZoom?: Maybe<Scalars['Float']>;
    name?: Maybe<Scalars['String']>;
};
export declare type UpdateJwtSsoInput = {
    status: SsoStatus;
};
export declare type UpdateMemberAttributesInput = {
    locale?: Maybe<Scalars['String']>;
};
export declare type UpdateMemberInput = {
    attributes?: Maybe<UpdateMemberAttributesInput>;
    bannerId?: Maybe<Scalars['String']>;
    currentPassword?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    fields?: Maybe<Array<CustomFieldInput>>;
    locale?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    newPassword?: Maybe<Scalars['String']>;
    profilePictureId?: Maybe<Scalars['String']>;
    roleId?: Maybe<Scalars['ID']>;
    tagline?: Maybe<Scalars['String']>;
    username?: Maybe<Scalars['String']>;
};
export declare type UpdateMemberNetworkNotificationSettingsInput = {
    enabled?: Maybe<Scalars['Boolean']>;
    mention?: Maybe<Scalars['Boolean']>;
    /** Required if channel is DESKTOP */
    options?: Maybe<UpdateMemberNetworkNotificationSettingsOptionsInput>;
    reaction?: Maybe<Scalars['Boolean']>;
    sameAsDefault?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateMemberNetworkNotificationSettingsOptionsInput = {
    /** Required if channel is DESKTOP */
    fcmDeviceToken?: Maybe<Scalars['String']>;
};
export declare type UpdateMemberPostNotificationSettingsInput = {
    enabled?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateMemberSpaceNotificationSettingsInput = {
    enabled?: Maybe<Scalars['Boolean']>;
    preference?: Maybe<SpaceNotificationPreference>;
    sameAsDefault?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateModerationItemInput = {
    changeStatusReason?: Maybe<Scalars['String']>;
    status: ModerationStatus;
};
export declare type UpdateModerationSettingsInput = {
    customBlacklist?: Maybe<Array<Scalars['String']>>;
    enableBlacklisting?: Maybe<Scalars['Boolean']>;
    useDefaultBlacklisting?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateNavigationItem = {
    link?: Maybe<Scalars['String']>;
    openInNewWindow?: Maybe<Scalars['Boolean']>;
    text: Scalars['String'];
    type: NavigationItemType;
};
export declare type UpdateNetworkInput = {
    aliases?: Maybe<Array<Scalars['String']>>;
    billingEmail?: Maybe<Scalars['String']>;
    brandColor?: Maybe<Scalars['String']>;
    companyName?: Maybe<Scalars['String']>;
    customSeoDetail?: Maybe<CustomSeoDetailInput>;
    defaultSpaceIds?: Maybe<Array<Scalars['ID']>>;
    description?: Maybe<Scalars['String']>;
    domain?: Maybe<Scalars['String']>;
    entrancePage?: Maybe<Scalars['String']>;
    faviconId?: Maybe<Scalars['String']>;
    footer?: Maybe<UpdateFooter>;
    hideDefaultAuthenticationForm?: Maybe<Scalars['Boolean']>;
    incidentEmails?: Maybe<Array<Scalars['String']>>;
    industry?: Maybe<NetworkIndustryType>;
    landingPages?: Maybe<UpdateNetworkSettingsInput>;
    locale?: Maybe<Scalars['String']>;
    logoId?: Maybe<Scalars['String']>;
    membership?: Maybe<NetworkMembership>;
    name?: Maybe<Scalars['String']>;
    navigationSlates?: Maybe<NavigationSlateUpdatesInput>;
    newDomain?: Maybe<Scalars['String']>;
    passwordComplexity?: Maybe<NetworkPasswordComplexity>;
    primaryMembers?: Maybe<NetworkPrimaryMembersType>;
    privacyPolicyUrl?: Maybe<Scalars['String']>;
    referrer?: Maybe<Scalars['String']>;
    releaseChannel?: Maybe<NetworkReleaseChannelType>;
    termsOfServiceUrl?: Maybe<Scalars['String']>;
    themes?: Maybe<UpdateThemes>;
    timeframe?: Maybe<NetworkTimeframeType>;
    topNavigation?: Maybe<UpdateTopNavigation>;
    tribeBranding?: Maybe<Scalars['Boolean']>;
    utmCampaign?: Maybe<Scalars['String']>;
    utmContent?: Maybe<Scalars['String']>;
    utmMedium?: Maybe<Scalars['String']>;
    utmSource?: Maybe<Scalars['String']>;
    utmTerm?: Maybe<Scalars['String']>;
    visibility?: Maybe<NetworkVisibility>;
    whoCanInviteIds?: Maybe<Array<Scalars['String']>>;
};
export declare type UpdateNetworkSettingsInput = {
    landingPageForGuest?: Maybe<NetworkLandingPage>;
    landingPageForMember?: Maybe<NetworkLandingPage>;
    landingPageForNewMember?: Maybe<NetworkLandingPage>;
};
export declare type UpdateNetworkStatusInput = {
    status: NetworkStatus;
    statusLocked?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateNewDomainInput = {
    domain: Scalars['String'];
};
export declare type UpdatePasswordWithTokenInput = {
    newPassword: Scalars['String'];
    token: Scalars['String'];
};
export declare type UpdatePermissionInput = {
    description?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    scopes?: Maybe<Array<Scalars['String']>>;
};
export declare type UpdatePostInput = {
    attachmentIds?: Maybe<Array<Scalars['String']>>;
    /** The custom seo detail of this post */
    customSeoDetail?: Maybe<CustomSeoDetailInput>;
    mappingFields?: Maybe<Array<PostMappingFieldInput>>;
    publish?: Maybe<Scalars['Boolean']>;
    seoDetail?: Maybe<UpdatePostSeoDetailInput>;
    tagNames?: Maybe<Array<Scalars['String']>>;
};
export declare type UpdatePostSeoDetailInput = {
    description?: Maybe<Scalars['String']>;
    image?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
};
export declare type UpdateSlateInput = {
    addedComponents?: Maybe<Array<BlockInput>>;
    id: Scalars['String'];
    removedComponentIds?: Maybe<Array<Scalars['String']>>;
    rootComponents?: Maybe<Array<Scalars['String']>>;
    updatedComponents?: Maybe<Array<BlockInput>>;
};
export declare type UpdateSpaceDefaultNotificationSettingsInput = {
    enabled?: Maybe<Scalars['Boolean']>;
    preference?: Maybe<SpaceNotificationPreference>;
    sameAsDefault?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateSpaceInput = {
    address?: Maybe<SpaceAddressInput>;
    bannerId?: Maybe<Scalars['String']>;
    collectionId?: Maybe<Scalars['ID']>;
    customSeoDetail?: Maybe<CustomSeoDetailInput>;
    description?: Maybe<Scalars['String']>;
    hidden?: Maybe<Scalars['Boolean']>;
    imageId?: Maybe<Scalars['String']>;
    inviteOnly?: Maybe<Scalars['Boolean']>;
    layout?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    nonAdminsCanInvite?: Maybe<Scalars['Boolean']>;
    private?: Maybe<Scalars['Boolean']>;
    seoDetail?: Maybe<UpdateSpaceSeoDetailInput>;
    slate?: Maybe<SlateUpdatesInput>;
    slug?: Maybe<Scalars['String']>;
    type?: Maybe<SpaceType>;
    whoCanPost?: Maybe<Array<Scalars['ID']>>;
    whoCanReact?: Maybe<Array<Scalars['ID']>>;
    whoCanReply?: Maybe<Array<Scalars['ID']>>;
    withRoles?: Maybe<Scalars['Boolean']>;
};
export declare type UpdateSpaceMemberRoleInput = {
    roleId: Scalars['String'];
};
export declare type UpdateSpacePostTypeInput = {
    postTypeId: Scalars['ID'];
    whoCanPost?: Maybe<Array<Scalars['ID']>>;
    whoCanReact?: Maybe<Array<Scalars['ID']>>;
    whoCanReply?: Maybe<Array<Scalars['ID']>>;
};
export declare type UpdateSpaceSeoDetailInput = {
    description?: Maybe<Scalars['String']>;
    imageId?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
};
export declare type UpdateTagFilter = {
    filterType: TagFilterType;
    filters: Array<Scalars['String']>;
};
export declare type UpdateTagInput = {
    description?: Maybe<Scalars['String']>;
    slug?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
};
export declare type UpdateTheme = {
    name: Scalars['String'];
    status: ThemeStatus;
    tokens: UpdateThemeTokens;
};
export declare type UpdateThemeColor = {
    key: Scalars['String'];
    weights: Array<UpdateThemeToken>;
};
export declare type UpdateThemeColors = {
    dark?: Maybe<Array<UpdateThemeColor>>;
    light?: Maybe<Array<UpdateThemeColor>>;
};
export declare type UpdateThemeToken = {
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type UpdateThemeTokens = {
    breakpoints?: Maybe<Array<UpdateThemeToken>>;
    colors?: Maybe<Array<UpdateThemeToken>>;
    fontSizes?: Maybe<Array<UpdateThemeToken>>;
    fontWeights?: Maybe<Array<UpdateThemeToken>>;
    opacity?: Maybe<Array<UpdateThemeToken>>;
    shadows?: Maybe<Array<UpdateThemeToken>>;
    sizes?: Maybe<Array<UpdateThemeToken>>;
    textStyles?: Maybe<Array<UpdateThemeToken>>;
    zIndices?: Maybe<Array<UpdateThemeToken>>;
};
export declare type UpdateThemes = {
    active: UpdateTheme;
    drafts: Array<UpdateTheme>;
    published: Array<UpdateTheme>;
};
export declare type UpdateTopNavigation = {
    alignment: TopNavigationAlignment;
    enabled: Scalars['Boolean'];
    items: Array<UpdateNavigationItem>;
};
export declare type UpdateWidgetInput = {
    context?: Maybe<WidgetContexts>;
    description?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    position?: Maybe<WidgetPositions>;
    url?: Maybe<Scalars['String']>;
};
export declare type UploadCollectionError = {
    message: Scalars['String'];
    name: Scalars['String'];
};
export declare type UploadCollectionResponse = {
    error?: Maybe<UploadCollectionError>;
    key: Scalars['String'];
    status: ActionStatus;
};
export declare type UploadCollectionsResponse = {
    responses: Array<UploadCollectionResponse>;
};
export declare type UpsertExtraPropertyInput = {
    entityId?: Maybe<Scalars['String']>;
    entityType: ExtraPropertyEntityType;
    key: Scalars['String'];
    value: Scalars['String'];
};
export declare type UpsertTheme = {
    active?: Maybe<Scalars['Boolean']>;
    colors?: Maybe<UpdateThemeColors>;
    id: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    typography?: Maybe<Array<UpdateThemeToken>>;
};
export declare type UseTemplateCreatedEntity = Space;
export declare type UseTemplateRequest = {
    createdAt: Scalars['DateTime'];
    createdById: Scalars['String'];
    createdEntity?: Maybe<UseTemplateCreatedEntity>;
    createdEntityId?: Maybe<Scalars['String']>;
    createdEntityType: TemplateEntityType;
    id: Scalars['String'];
    networkId?: Maybe<Scalars['String']>;
    processedPercentage: Scalars['Float'];
    status: UseTemplateRequestStatus;
    templateId: Scalars['String'];
    updatedAt: Scalars['DateTime'];
};
export declare enum UseTemplateRequestStatus {
    FAILED = "Failed",
    IN_PROGRESS = "InProgress",
    SUCCEEDED = "Succeeded"
}
export declare type UsernameAvailability = {
    available: Scalars['Boolean'];
};
export declare type ValuePermissions = {
    isAuthorized: IsAuthorized;
    value: Scalars['String'];
};
export declare type Vat = {
    text: Scalars['String'];
    vatId: Scalars['String'];
    vatType: VatType;
};
export declare type VatInput = {
    vatId: Scalars['String'];
    vatType: VatType;
};
export declare enum VatType {
    AE_TRN = "ae_trn",
    AU_ABN = "au_abn",
    AU_ARN = "au_arn",
    BR_CNPJ = "br_cnpj",
    BR_CPF = "br_cpf",
    CA_BN = "ca_bn",
    CA_GST_HST = "ca_gst_hst",
    CA_PST_BC = "ca_pst_bc",
    CA_PST_MB = "ca_pst_mb",
    CA_PST_SK = "ca_pst_sk",
    CA_QST = "ca_qst",
    CH_VAT = "ch_vat",
    CL_TIN = "cl_tin",
    ES_CIF = "es_cif",
    EU_VAT = "eu_vat",
    GB_VAT = "gb_vat",
    HK_BR = "hk_br",
    ID_NPWP = "id_npwp",
    IL_VAT = "il_vat",
    IN_GST = "in_gst",
    JP_CN = "jp_cn",
    JP_RN = "jp_rn",
    KR_BRN = "kr_brn",
    LI_UID = "li_uid",
    MX_RFC = "mx_rfc",
    MY_FRP = "my_frp",
    MY_ITN = "my_itn",
    MY_SST = "my_sst",
    NO_VAT = "no_vat",
    NZ_GST = "nz_gst",
    RU_INN = "ru_inn",
    RU_KPP = "ru_kpp",
    SA_VAT = "sa_vat",
    SG_GST = "sg_gst",
    SG_UEN = "sg_uen",
    TH_VAT = "th_vat",
    TW_VAT = "tw_vat",
    US_EIN = "us_ein",
    ZA_VAT = "za_vat"
}
export declare type VatTypeInfo = {
    key: VatType;
    placeholder: Scalars['String'];
    text: Scalars['String'];
    value: VatType;
};
export declare type VerifyMemberInput = {
    memberId: Scalars['String'];
    verificationCode: Scalars['String'];
};
export declare type Widget = {
    appId: Scalars['String'];
    context: WidgetContexts;
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    name: Scalars['String'];
    position: WidgetPositions;
    url: Scalars['String'];
};
export declare enum WidgetContexts {
    MEMBER = "MEMBER",
    POST = "POST",
    SPACE = "SPACE"
}
export declare type WidgetEdge = {
    cursor: Scalars['String'];
    node: Widget;
};
export declare enum WidgetPositions {
    PAGE = "PAGE",
    SIDEBAR = "SIDEBAR"
}
export declare type SubscriptionInput = {
    id: Scalars['String'];
};
export interface PossibleTypesResultData {
    possibleTypes: {
        [key: string]: string[];
    };
}
declare const result: PossibleTypesResultData;
export default result;
