import { NetworkFields } from '../../graphql/index.js';
import { Action, DomainAvailability, DomainTransferStatus, MutationAddMemberSchemaFieldArgs, MutationArchiveMemberSchemaFieldArgs, MutationDeleteMemberSchemaFieldArgs, MutationReorderMemberSchemaFieldsArgs, MutationUpdateMemberSchemaFieldArgs, MutationUpdateNetworkArgs, MutationUpdateNewDomainArgs, Network, QueryDomainAvailabilityArgs, QueryNewDomainStatusArgs } from '../../types/index.js';
import { GraphqlClient } from '../graphql.client.js';
export declare class NetworkClient {
    private client;
    constructor(client: GraphqlClient);
    get(fields?: NetworkFields, accessToken?: string): Promise<Network>;
    update(variables: MutationUpdateNetworkArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
    clearNewDomain(accessToken?: string): Promise<Action>;
    updateNewDomain(variables: MutationUpdateNewDomainArgs, accessToken?: string): Promise<DomainTransferStatus>;
    transferToNewDomain(accessToken?: string): Promise<Action>;
    domainAvailability(variables: QueryDomainAvailabilityArgs, accessToken?: string): Promise<DomainAvailability>;
    newDomainStatus(variables: QueryNewDomainStatusArgs, accessToken?: string): Promise<DomainTransferStatus>;
    addMemberSchemaField(variables: MutationAddMemberSchemaFieldArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
    updateMemberSchemaField(variables: MutationUpdateMemberSchemaFieldArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
    archiveMemberSchemaField(variables: MutationArchiveMemberSchemaFieldArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
    unArchiveMemberSchemaField(variables: MutationArchiveMemberSchemaFieldArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
    deleteMemberSchemaField(variables: MutationDeleteMemberSchemaFieldArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
    reorderMemberSchemaFields(variables: MutationReorderMemberSchemaFieldsArgs, fields?: NetworkFields, accessToken?: string): Promise<Network>;
}
