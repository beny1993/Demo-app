var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
export var ApiErrorCodes;
(function (ApiErrorCodes) {
    ApiErrorCodes["UNKNOWN_ERROR"] = "1";
    ApiErrorCodes["SERVER_ERROR"] = "10";
    ApiErrorCodes["PARAMETER_VALIDATION_FAILED"] = "100";
    ApiErrorCodes["PERMISSION_ERROR"] = "102";
    ApiErrorCodes["USER_REQUEST_REACHED"] = "104";
    ApiErrorCodes["INVALID_PARAMETER"] = "106";
    ApiErrorCodes["INVALID_ACCESS_TOKEN"] = "108";
    ApiErrorCodes["RESOURCE_NOT_FOUND"] = "110";
    ApiErrorCodes["MISSING_PARAMETER"] = "112";
    ApiErrorCodes["PARAMETER_TYPE_PROBLEM"] = "114";
    ApiErrorCodes["DATABASE_ERROR"] = "116";
    ApiErrorCodes["INVALID_REQUEST"] = "118";
    ApiErrorCodes["REQUEST_BLOCKED_FOR_POLICIES"] = "120";
    ApiErrorCodes["BACKEND_ERROR"] = "122";
})(ApiErrorCodes || (ApiErrorCodes = {}));
export const errObj = (e) => {
    // removing errors and inserting the rest
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _a = e || {}, { code, message, field, subcode, timestamp, help, errors } = _a, rest = __rest(_a, ["code", "message", "field", "subcode", "timestamp", "help", "errors"]);
    return Object.assign({ code,
        message,
        field,
        help,
        subcode,
        timestamp }, rest);
};
export const flattenErrors = (e, errors) => {
    var _a, _b;
    const isRoot = !errors;
    const output = errors || [];
    if (Array.isArray(e)) {
        const arr = e
            .map(_e => {
            var _a, _b;
            if ((_a = _e) === null || _a === void 0 ? void 0 : _a.errors) {
                flattenErrors(_e.errors, output);
            }
            else if (!isRoot || ((_b = _e) === null || _b === void 0 ? void 0 : _b.message)) {
                return errObj(_e);
            }
            return undefined;
        })
            .filter(Boolean);
        output.push(...arr);
    }
    else if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) || ((_b = e) === null || _b === void 0 ? void 0 : _b.message)) {
        output.push(errObj(e));
    }
    if (isRoot) {
        if (output.length === 0) {
            output.push(errObj(e));
        }
    }
    return output;
};
