import { appGQLQuery, appInstallationsGQLQuery, appsGQLQuery, getAppNetworkSettingsGQLQuery, getAppSpaceSettingsGQLQuery, installAppGQLMutation, uninstallAppGQLMutation, updateAppNetworkSettingsGQLMutation, } from '../../graphql/index.js';
export class AppClient {
    constructor(client) {
        this.client = client;
    }
    async get(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: appGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.app;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: appsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.apps;
    }
    async networkSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getAppNetworkSettingsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.getAppNetworkSettings;
    }
    async updateNetworkSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateAppNetworkSettingsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateAppNetworkSettings;
    }
    async spaceSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getAppSpaceSettingsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.getAppSpaceSettings;
    }
    async install(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: installAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.installApp;
    }
    async uninstall(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: uninstallAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.uninstallApp;
    }
    async appInstallations(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: appInstallationsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.getNetworkAppInstallations;
    }
}
