'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var gql = require('graphql-tag');
var gqlClient = require('@tribeplatform/gql-client');
var graphqlRequest = require('graphql-request');
var jwt_decode = require('jwt-decode');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var gql__default = /*#__PURE__*/_interopDefaultLegacy(gql);
var jwt_decode__default = /*#__PURE__*/_interopDefaultLegacy(jwt_decode);

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function embedGQLFields(fields) {
    return `
    author
    author_url
    description
    html
    id
    provider_name
    thumbnail_height
    thumbnail_url
    thumbnail_width
    title
    type
    url  
  `;
}

function emojiGQLFields() {
    return `
    __typename
    id
    text
  `;
}

const mediaURLGQLFields = () => {
    return `
    __typename
      full
      large
      medium
      small
      thumb
  `;
};

function imageGQLFields() {
    return `
    __typename
    id
    url
    width
    height
    dominantColorHex
    dpi
    cropHeight
    cropWidth
    cropX
    cropY
    cropZoom
    urls {
      ${mediaURLGQLFields()}
    }
  `;
}

const BASIC_MEDIA_FIELDS = {
    onImage: 'basic',
    onEmoji: 'basic',
};
const ALL_MEDIA_FIELDS = {
    onImage: 'all',
    onEmoji: 'all',
};
function mediaGQLFields(fields = 'basic') {
    if (fields === 'basic')
        fields = BASIC_MEDIA_FIELDS;
    if (fields === 'all')
        fields = ALL_MEDIA_FIELDS;
    return `
      ... on Image {
        ${imageGQLFields()}
      }
      ... on Emoji {
        ${emojiGQLFields()}
      }
      ... on File {
        id
        name
        url
      }
  `;
}

const signedUrlGQLFields = () => {
    return `
    fields
    mediaId
    mediaUrl
    signedUrl
    urls {
      ${mediaURLGQLFields()}
    }
  `;
};

function embedGQLQuery() {
    return gql__default["default"] `
    query embed($url: String!, $options: String) {
      embed(input: { url: $url, options: $options }) {
        ${embedGQLFields()}
      }
    }
  `;
}
const createImageGQLMutation = () => gql__default["default"] `
  mutation createImages($input: [CreateImageInput!]!) {
    createImages(input: $input) {
      ${signedUrlGQLFields()}
    }
  }
`;
const createEmojisGQLMutation = () => gql__default["default"] `
  mutation CreateEmojis($input: [CreateEmojiInput!]!) {
    createEmojis(input: $input) {
      ${emojiGQLFields()}
    }
  }
`;
const updateImageGQLMutation = () => gql__default["default"] `
  mutation updateImage($id: String!, $input: UpdateImageInput!) {
    updateImage(id: $id, input: $input) {
      ${imageGQLFields()}
    }
  }
`;
const createFilesGQLMutation = () => gql__default["default"] `
  mutation createFiles($input: [CreateFileInput!]!) {
    createFiles(input: $input) {
      ${signedUrlGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function isAuthorizedGQLFields(fields) {
    return `
    authorized
    reason
    requiredPlan
  `;
}

function inputPathPermissionsGQLFields(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
fields) {
    return `
    path
    isAuthorized {
      ${isAuthorizedGQLFields()}
    }
  `;
}

function pathPermissionsGQLFields(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
fields) {
    return `
    path
    isAuthorized {
      ${isAuthorizedGQLFields()}
    }
  `;
}

function actionPermissionGQLFields(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
fields) {
    return `
    name
    isAuthorized {
      ${isAuthorizedGQLFields()}
    }
    inputPermissions {
      ${inputPathPermissionsGQLFields()}
    }
    outputPermissions {
      ${pathPermissionsGQLFields()}
    }
  `;
}

const BASIC_MEMBER_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_MEMBER_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
};
function memberAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_MEMBER_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_MEMBER_AUTH_MEMBER_PROPS_FIELDS;
    return `
    context
    scopes
    ${fields.permissions
        ? `
      permissions {
        ${actionPermissionGQLFields(fields.permissions)}
      }
    `
        : ``}
  `;
}

const BASIC_NETWORK_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_NETWORK_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
};
function networkAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_NETWORK_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_NETWORK_AUTH_MEMBER_PROPS_FIELDS;
    return `
    context
    scopes
    ${fields.permissions
        ? `
      permissions {
        ${actionPermissionGQLFields(fields.permissions)}
      }
    `
        : ``}
  `;
}

function getPermissionsGQLQuery(fields) {
    return gql__default["default"] `
    query GetPermissions($contexts: [PermissionsContextInput!] = []) {
      permissions(contexts: $contexts) {
        contextAwareActions {
          context
          entityActions {
            id
            actions {
              ${actionPermissionGQLFields()}
            }
          }
        }
      }
    }
  `;
}

const BASIC_POST_TYPE_FIELDS = {};
const ALL_POST_TYPE_FIELDS = {
    validReplyTypes: 'basic',
};
function postTypeGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_POST_TYPE_FIELDS;
    if (fields === 'all')
        fields = ALL_POST_TYPE_FIELDS;
    return `
    context
    id
    name
    pluralName
    slug
    createdAt
    primaryReactionType
    singleChoiceReactions
    updatedAt
    mappings {
      key
      field
      type
      title
      description
      required
      isMainContent
      isSearchable
      default
    }
    ${fields.validReplyTypes
        ? `
      validReplyTypes {
        ${postTypeGQLFields(fields.validReplyTypes)}
      }
    `
        : ``}
  `;
}

const BASIC_POST_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_POST_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
    availableReplyTypes: 'basic',
    canReact: true,
    memberPostNotificationSettingsEnabled: true,
};
function postAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_POST_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_POST_AUTH_MEMBER_PROPS_FIELDS;
    return `
      context
      scopes
      ${fields.permissions
        ? `
        permissions {
          ${actionPermissionGQLFields(fields.permissions)}
        }
      `
        : ``}
      ${fields.availableReplyTypes
        ? `
          availableReplyTypes {
              ${postTypeGQLFields(fields.availableReplyTypes)}
          }
          `
        : ''}
      ${fields.canReact
        ? `
      canReact
      `
        : ''}
      ${fields.memberPostNotificationSettingsEnabled
        ? `
      memberPostNotificationSettingsEnabled
      `
        : ''}
    `;
}

const BASIC_SPACE_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_SPACE_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
    availablePostTypes: 'basic',
};
function spaceAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_AUTH_MEMBER_PROPS_FIELDS;
    return `
    context
    scopes
    membershipStatus
    ${fields.permissions
        ? `
      permissions {
        ${actionPermissionGQLFields(fields.permissions)}
      }
    `
        : ``}
    ${fields.availablePostTypes
        ? `
      availablePostTypes {
        ${postTypeGQLFields(fields.availablePostTypes)}
      }`
        : ''}
  `;
}

function roleGQLFields(fields) {
    return `
    id
    name
    type
    description
    visible
    ${fields === 'all' ? 'scopes' : ''}
  `;
}

const BASIC_MEMBER_FIELDS = {};
const ALL_MEMBER_FIELDS = {
    profilePicture: 'basic',
    banner: 'basic',
    authMemberProps: 'basic',
    fields: 'basic',
    sessions: 'basic',
    activeSession: 'basic',
    score: 'basic',
};
const DEFAULT_MEMBER_FIELDS = {
    authMemberProps: 'all',
    banner: 'all',
    profilePicture: 'all',
    role: 'basic',
    fields: 'all',
};
function memberGQLFields(fields) {
    var _a, _b;
    if (fields === 'basic')
        fields = BASIC_MEMBER_FIELDS;
    if (fields === 'all')
        fields = ALL_MEMBER_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_MEMBER_FIELDS;
    return `
    displayName
    name
    id
    attributes {
      locale
    }
    profilePictureId
    bannerId
    status
    username
    email
    emailStatus
    newEmail
    tagline
    lastSeenAt
    createdAt
    updatedAt
    relativeUrl
    url
    ${fields.role
        ? `
        role {
          ${roleGQLFields(fields.role)}
        }
      `
        : ''}
    ${fields.banner
        ? `
      banner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.profilePicture
        ? `
      profilePicture {
        ${mediaGQLFields(fields.profilePicture)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${memberAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.fields
        ? `
      fields {
        key
        value
      }
    `
        : ``}
    ${fields.sessions
        ? `
      sessions {
        active
        country
        createdAt
        deviceBrand
        id
        ip
        lastActivityAt
        os
        osVersion
      }
    `
        : ``}
    ${fields.activeSession
        ? `
      activeSession {
        active
        country
        createdAt
        deviceBrand
        id
        ip
        lastActivityAt
        os
        osVersion
      }
    `
        : ``}
    ${fields.score ? 'score' : ''}
    ${(fields === null || fields === void 0 ? void 0 : fields.extraProperties)
        ? `
      extraProperties ${((_b = (_a = fields === null || fields === void 0 ? void 0 : fields.extraProperties) === null || _a === void 0 ? void 0 : _a.variables) === null || _b === void 0 ? void 0 : _b.keys)
            ? `(keys: ["${fields.extraProperties.variables.keys.join('","')}"])`
            : ``} {
        key
        value
      }
    `
        : ``}
  `;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const blockGQLFields = (fields) => `
  id
  name
  props
  children
  output
`;

const slateGQLFields = (fields) => `
  id
  rootBlock
  blocks {
    ${blockGQLFields()}
  }
  restrictions {
    nonEditableBlocks
    lockedChildrenBlocks
    nonRemovableBlocks
  }
`;

const navigationSlatesGQLFields = (fields) => `
  header {
    ${slateGQLFields()}
  }
  sidebar1 {
    ${slateGQLFields()}
  }
  sidebar2 {
    ${slateGQLFields()}
  }
  footer {
    ${slateGQLFields()}
  }
`;

const updateSlatesGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateSlates($input: [UpdateSlateInput!]!) {
    updateSlates(input: $input) {
      ${slateGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function tagGQLFields(fields) {
    return `
    description
    id
    slug
    title
  `;
}

const BASIC_HIGHLIGHTED_TAG_FIELDS = {
    tag: 'basic',
};
const ALL_HIGHLIGHTED_TAG_FIELDS = {
    tag: 'all',
};
function highlightedTagGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_HIGHLIGHTED_TAG_FIELDS;
    if (fields === 'all')
        fields = ALL_HIGHLIGHTED_TAG_FIELDS;
    return `
    indent
    text
    type
    ${fields.tag
        ? `
      tag {
        ${tagGQLFields(fields.tag)}
      }`
        : ``}
  `;
}

const BASIC_SPACE_SEO_DETAIL_FIELDS = {};
const ALL_SPACE_SEO_DETAIL_FIELDS = {
    image: 'basic',
};
function spaceSeoDetailGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_SEO_DETAIL_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_SEO_DETAIL_FIELDS;
    return `
    description
    title
    ${fields.image
        ? `
      image {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
  `;
}

const BASIC_SPACE_FIELDS = {};
const ALL_SPACE_FIELDS = {
    seoDetail: 'basic',
    postsCount: 'basic',
    image: 'basic',
    banner: 'basic',
    highlightedTags: 'basic',
    createdBy: 'basic',
    collection: 'basic',
    authMemberProps: 'basic',
    slate: 'all',
};
const DEFAULT_SPACE_FIELDS = {
    authMemberProps: 'all',
    banner: 'basic',
    image: 'basic',
    postsCount: 'basic',
    highlightedTags: {
        tag: 'basic',
    },
    slate: 'all',
    collection: 'basic',
};
function spaceGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_SPACE_FIELDS;
    return `
    id
    name
    description
    slug
    type
    layout
    address {
      path
      exact
      editable
    }
    createdById
    groupId
    imageId
    bannerId
    membersCount
    createdAt
    private
    hidden
    inviteOnly
    nonAdminsCanInvite
    customOrderingIndexInGroup
    whoCanPost
    whoCanReact
    whoCanReply
    customSeoDetail {
      description
      noIndex
      thumbnail {
        ${mediaGQLFields()}
      }
      thumbnailId
      title
    }
    relativeUrl
    url
    ${fields.postsCount ? `postsCount` : ``}
    ${fields.image
        ? `
      image {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
    ${fields.banner
        ? `
      banner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.highlightedTags
        ? `
      highlightedTags {
        ${highlightedTagGQLFields(fields.highlightedTags)}
      }

    `
        : ``}
    ${fields.seoDetail
        ? `
      seoDetail {
        ${spaceSeoDetailGQLFields(fields.seoDetail)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${memberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.collection
        ? `
      collection {
        ${collectionGQLFields(fields.collection)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${spaceAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.slate
        ? `
        slate {
          ${slateGQLFields()}
        }
    `
        : ``}
  `;
}

const BASIC_COLLECTION_FIELDS = {};
const ALL_COLLECTION_FIELDS = {
    space: 'basic',
};
function collectionGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_COLLECTION_FIELDS;
    if (fields === 'all')
        fields = ALL_COLLECTION_FIELDS;
    return `
    id
    slug
    name
    description
    createdAt
    relativeUrl
    url
    ${fields.space
        ? `
      spaces(limit: 100) {
        totalCount
        edges {
          node {
            ${spaceGQLFields(fields.space)}
          }
        }
        nodes {
          ${spaceGQLFields(fields.space)}
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    `
        : ``}
  `;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const actionGQLFields = (fields) => {
    return `
    status
  `;
};

function getCollectionsGQLQuery(fields) {
    return gql__default["default"] `
    query GetCollections(
      $orderBy: CollectionListOrderByEnum
      $reverse: Boolean
    ) {
      collections(orderBy: $orderBy, reverse: $reverse) {
        ${collectionGQLFields(fields)}
      }
    }
  `;
}
function getCollectionGQLQuery(fields) {
    return gql__default["default"] `
    query GetCollection(
      $id: ID!
    ) {
      collection(id: $id) {
        ${collectionGQLFields(fields)}
      }
    }
  `;
}
function createCollectionGQLMutation(fields) {
    return gql__default["default"] `
    mutation CreateCollection($input: CreateCollectionInput!) {
      createCollection(input: $input) {
        ${collectionGQLFields(fields)}
      }
    }
  `;
}
function updateCollectionGQLMutation() {
    return gql__default["default"] `
    mutation UpdateCollection($id: ID!, $input: UpdateCollectionInput!) {
      updateCollection(id: $id, input: $input) {
        status
      }
    }
  `;
}
function deleteCollectionGQLMutation() {
    return gql__default["default"] `
    mutation DeleteCollection($id: ID!) {
      deleteCollection(id: $id) {
        status
      }
    }
  `;
}
const organizeCollectionsGQLMutation = (fields) => gql__default["default"] `
  mutation OrganizeCollections($ids: [String!]!) {
    organizeCollections(ids: $ids) {
      ${actionGQLFields()}
    }
  }
`;
const organizeSpacesInCollectionMutation = () => gql__default["default"] `
  mutation organizeSpacesInCollection(
    $collectionId: String!
    $spaceIds: [String!]!
  ) {
    organizeSpacesInCollection(
      collectionId: $collectionId
      spaceIds: $spaceIds
    ) {
      status
    }
  }
`;

const BASIC_SPACE_JOIN_REQUEST_FIELDS = {};
const ALL_SPACE_JOIN_REQUEST_FIELDS = {
    member: 'basic',
};
const spaceJoinRequestGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_SPACE_JOIN_REQUEST_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_JOIN_REQUEST_FIELDS;
    return `
    id
    spaceId
    status
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
  `;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function spaceRoleGQLFields(fields) {
    return `
    id
    name
    type
    description
  `;
}

const BASIC_SPACE_MEMBER_FIELDS = {};
const ALL_SPACE_MEMBER_FIELDS = {
    member: 'basic',
    role: 'basic',
    space: 'basic',
};
function spaceMemberGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_MEMBER_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_MEMBER_FIELDS;
    return `
    __typename
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
    ${fields.role
        ? `
      role {
        ${spaceRoleGQLFields(fields.role)}
      }
    `
        : ``}
    ${fields.space
        ? `
        space {
          ${spaceGQLFields(fields.space)}
        }
    `
        : ``}
  `;
}

function getSpaceMembersGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaceMembers(
      $spaceId: ID!
      $roleIds: [ID!]
      $limit: Int!
      $after: String
      $orderBy: SpaceMemberListOrderByEnum
      $reverse: Boolean
    ) {
      spaceMembers(
        spaceId: $spaceId
        roleIds: $roleIds
        limit: $limit
        after: $after
        orderBy: $orderBy
        reverse: $reverse
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceMemberGQLFields(fields)}
          }
        }
      }
    }
  `;
}
function addSpaceMemberGQLMutation(fields) {
    return gql__default["default"] `
    mutation AddSpaceMembers($input: [AddSpaceMemberInput!]!, $spaceId: ID!) {
      addSpaceMembers(input: $input, spaceId: $spaceId) {
        ${spaceMemberGQLFields(fields)}
      }
    }
  `;
}
function removeSpaceMembersGQLMutation() {
    return gql__default["default"] `
    mutation RemoveSpaceMembers($memberIds: [ID!]!, $spaceId: ID!) {
      removeSpaceMembers(memberIds: $memberIds, spaceId: $spaceId) {
        status
      }
    }
  `;
}
function getMemberSpacesGQLQuery(fields) {
    return gql__default["default"] `
    query GetMemberSpaces(
      $limit: Int!
      $after: String
      $memberId: ID!
      $collectionId: String
    ) {
      memberSpaces(
        limit: $limit
        after: $after
        memberId: $memberId
        collectionId: $collectionId
      ) {

        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceMemberGQLFields(fields)}
          }
        }
      }
    }
  `;
}

const getMemberSpaceMembershipRequestGQLQuery = (fields) => gql__default["default"] `
  query GetMemberSpaceMembershipRequest($status: SpaceJoinRequestStatus) {
    memberSpaceMembershipRequest(status: $status) {
      ${spaceJoinRequestGQLFields(fields)}
    }
  }
`;
const requestSpaceMembershipGQLMutation = (fields) => gql__default["default"] `
  mutation RequestSpaceMemberShip($spaceId: ID!) {
    requestSpaceMembership(spaceId: $spaceId) {
      ${spaceJoinRequestGQLFields(fields)}
    }
  }
`;
const approveSpaceMembershipRequestGQLMutation = (fields) => gql__default["default"] `
  mutation ApproveSpaceMembershipRequest(
    $spaceId: ID!
    $spaceMembershipRequestId: ID!
  ) {
    approveSpaceMembershipRequest(
      spaceId: $spaceId
      spaceMembershipRequestId: $spaceMembershipRequestId
    ) {
      ${actionGQLFields()}
    }
  }
`;
const declineSpaceMembershipRequestGQLMutation = (fields) => gql__default["default"] `
  mutation DeclineSpaceMembershipRequest(
    $spaceId: ID!
    $spaceMembershipRequestId: ID!
  ) {
    declineSpaceMembershipRequest(
      spaceId: $spaceId
      spaceMembershipRequestId: $spaceMembershipRequestId
    ) {
      ${actionGQLFields()}
    }
  }
`;
const spaceMembershipRequestsGQLQuery = (fields) => gql__default["default"] `
  query SpaceMembershipRequests(
    $spaceId: ID!
    $status: SpaceJoinRequestStatus
  ) {
    spaceMembershipRequests(spaceId: $spaceId, status: $status) {
      ${spaceJoinRequestGQLFields(fields)}
    }
  }
`;

function getSpaceRolesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaceRoles(
      $spaceId: ID!
      $orderBy: SpaceRoleListOrderByEnum
      $reverse: Boolean
    ) {
      spaceRoles(spaceId: $spaceId, orderBy: $orderBy, reverse: $reverse) {
        ${spaceRoleGQLFields()}
      }
    }
  `;
}
const updateMemberSpaceRoleGQLMutation = () => {
    return gql__default["default"] `
    mutation UpdateMemberSpaceRole(
      $input: UpdateSpaceMemberRoleInput!
      $memberId: ID!
      $spaceId: ID!
    ) {
      updateMemberSpaceRole(
        input: $input
        memberId: $memberId
        spaceId: $spaceId
      ) {
        status
      }
    }
  `;
};

const BASIC_PAGINATED_FIELDS = {};
const ALL_PAGINATED_FIELDS = {
    edges: {
        cursor: 'all',
        node: 'all',
    },
    nodes: 'all',
    pageInfo: {
        endCursor: 'all',
        hasNextPage: 'all',
    },
    totalCount: 'all',
};
function paginatedGQLFields(fields, innerGQLFieldsFn) {
    if (fields === 'basic')
        fields = BASIC_PAGINATED_FIELDS;
    if (fields === 'all')
        fields = ALL_PAGINATED_FIELDS;
    return `
  __typename
  ${fields.edges
        ? `
    edges {
      ${fields.edges.cursor
            ? `
        cursor
      `
            : ``}
      ${fields.edges.node
            ? `
        node {
          ${innerGQLFieldsFn(fields.edges.node)}
        }
      `
            : ``}
    }
  `
        : ``}
  ${fields.nodes
        ? `
    nodes {
      ${innerGQLFieldsFn(fields.nodes)}
    }
  `
        : ``}
  totalCount
  pageInfo {
      endCursor
      hasNextPage
  }
  `;
}

function fileGQLFields() {
    return `
    extension
    id
    name
    size
    url
    downloadUrl
  `;
}

function reactionGQLFields(fields) {
    var _a;
    return `
    count
    reacted
    reaction

    ${(fields === null || fields === void 0 ? void 0 : fields.fields) === 'all'
        ? `
    participants(limit: ${((_a = fields === null || fields === void 0 ? void 0 : fields.variables) === null || _a === void 0 ? void 0 : _a.limit) || 25}) {
      nodes {
        participant {
          id
          name
        }
      }
    }`
        : ``}
  `;
}

/* eslint-disable import/no-cycle */
const BASIC_POST_FIELDS = {
    owner: 'all',
};
const ALL_POST_FIELDS = {
    authMemberProps: 'all',
    postType: 'basic',
    owner: 'all',
    createdBy: 'basic',
    tags: 'basic',
    attachments: 'basic',
    embeds: 'basic',
    mentions: 'basic',
    space: 'basic',
    reactions: { fields: 'basic', variables: { limit: 25 } },
    replies: { fields: 'basic', variables: { limit: 2 } },
    repliedTos: 'basic',
    repliedTo: 'basic',
};
const DEFAULT_POST_FIELDS = {
    tags: 'basic',
    owner: {
        member: { profilePicture: 'basic' },
    },
    postType: 'basic',
    embeds: 'basic',
    mentions: 'basic',
    space: 'default',
    attachments: 'basic',
    authMemberProps: 'all',
    reactions: { fields: 'all', variables: { limit: 25 } },
    repliedTos: 'basic',
    replies: {
        fields: {
            authMemberProps: 'all',
            embeds: 'basic',
            mentions: 'basic',
            attachments: 'basic',
            owner: {
                member: { profilePicture: 'basic' },
            },
            reactions: { fields: 'all', variables: { limit: 25 } },
        },
        variables: {
            limit: 2,
            reverse: true,
        },
    },
};
const WITH_REPLY_POST_FIELDS = Object.assign(Object.assign({}, DEFAULT_POST_FIELDS), { replies: {
        fields: 'default',
        variables: { limit: 2, reverse: true },
    } });
function postGQLFields(fields) {
    var _a, _b, _c;
    if (fields === 'basic')
        fields = BASIC_POST_FIELDS;
    if (fields === 'all')
        fields = ALL_POST_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_POST_FIELDS;
    if (fields === 'withReply')
        fields = WITH_REPLY_POST_FIELDS;
    return `
    id
    slug
    mappingFields {
      key
      type
      value
    }
    followersCount
    postTypeId
    reactionsCount
    hasMoreContent
    isAnonymous
    isHidden
    shortContent
    createdAt
    ownerId
    createdById
    status
    spaceId
    imageIds
    pinnedInto
    repliesCount
    totalRepliesCount
    repliedToIds
    repliedToId
    topicIds
    title
    embedIds
    mentionedMembers
    primaryReactionType
    customSeoDetail {
      description
      noIndex
      thumbnail {
        ${mediaGQLFields()}
      }
      thumbnailId
      title
    }
    relativeUrl
    url
    ${fields.attachments
        ? `
        attachments {
          ${fileGQLFields()}
        }
      `
        : ''}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${postAuthMemberPropsGQLFields(fields.authMemberProps)}
      }`
        : ``}
    ${fields.postType
        ? `
      postType {
        ${postTypeGQLFields(fields.postType)}
      }
    `
        : ``}
    ${fields.owner
        ? `
      owner {
        ${spaceMemberGQLFields(fields.owner)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${spaceMemberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.tags
        ? `
      tags {
        ${tagGQLFields(fields.tags)}
      }
    `
        : ``}
    ${fields.embeds
        ? `
      embeds {
        ${embedGQLFields(fields.embeds)}
      }
    `
        : ``}
    ${fields.mentions
        ? `
      mentions {
        ${memberGQLFields(fields.mentions)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
    ${fields.reactions
        ? `
      reactions {
        ${reactionGQLFields(fields.reactions)}
      }
    `
        : ``}
    ${((_a = fields.replies) === null || _a === void 0 ? void 0 : _a.fields)
        ? `
      replies(limit: ${fields.replies.variables.limit || 1}, reverse: ${((_c = (_b = fields.replies) === null || _b === void 0 ? void 0 : _b.variables) === null || _c === void 0 ? void 0 : _c.reverse) || false} ) {
        edges {
          cursor
          node {
            ${postGQLFields(fields.replies.fields)}
          }
        }
        nodes {
          ${postGQLFields(fields.replies.fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    `
        : ``}
    ${fields.repliedTo
        ? `
      repliedTo {
        ${postGQLFields(fields.repliedTo)}
      }
    `
        : ``}
    ${fields.repliedTos
        ? `
      repliedTos {
        ${postGQLFields(fields.repliedTos)}
      }
    `
        : ``}
  `;
}

const pageGqlFields = (fields = { space: 'default' }) => {
    return `
    seoDetail {
      additionalMeta {
        type
        properties {
          key
          value
        }
      }
      description
      jsonld
      title
      thumbnail {
        ${mediaGQLFields()}
      }
    }
    ${fields.space
        ? `space {
      ${spaceGQLFields(fields.space)}
    }`
        : ''}
  `;
};

function createSpaceGQLQuery(fields) {
    return gql__default["default"] `
    mutation CreateSpace($input: CreateSpaceInput!) {
      createSpace(input: $input) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getSpacesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaces(
      $after: String
      $before: String
      $collectionId: String
      $limit: Int!
      $memberId: ID
      $offset: Int
      $orderBy: SpaceListOrderByEnum
      $query: String
      $reverse: Boolean
      $type: [SpaceType!]
    ) {
      spaces(
        after: $after
        before: $before
        collectionId: $collectionId
        limit: $limit
        memberId: $memberId
        offset: $offset
        orderBy: $orderBy
        query: $query
        reverse: $reverse
        type: $type
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceGQLFields(fields)}
          }
        }
        nodes {
          ${spaceGQLFields(fields)}
        }
      }
    }
  `;
}
function getSpacesByIdsGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacesByIds($ids: [ID!]!) {
      spacesByIds(ids: $ids) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getSpacesBySlugsGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacesBySlugs($slugs: [String!]!) {
      spacesBySlugs(slugs: $slugs) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getSpaceGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpace($id: ID, $slug: ID, $path: String) {
      space(id: $id, slug: $slug, path: $path) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getPageGqlQuery(fields) {
    return gql__default["default"] `
    query page($path: String!) {
      page(path:$path) {
        ${pageGqlFields(fields)}
      }
    }
  `;
}
const organizeSpacesInCollectionGQLMutation = (fields) => gql__default["default"] `
  mutation OrganizeSpacesInCollection(
    $collectionId: String!
    $spaceIds: [String!]!
  ) {
    organizeSpacesInCollection(
      collectionId: $collectionId
      spaceIds: $spaceIds
    ) {
      ${actionGQLFields()}
    }
  }
`;
const updateSpaceGQLMutation = (fields) => gql__default["default"] `
    mutation updateSpace($id: ID!, $input: UpdateSpaceInput!) {
      updateSpace(id: $id input: $input) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
const joinSpaceGQLMutation = () => gql__default["default"] `
  mutation joinSpace($spaceId: ID!) {
    joinSpace(spaceId: $spaceId) {
      status
      __typename
    }
  }
`;
const leaveSpaceGQLMutation = () => gql__default["default"] `
  mutation leaveSpace($spaceId: ID!) {
    leaveSpace(spaceId: $spaceId) {
      status
      __typename
    }
  }
`;
const getSpacePinnedPostGQLQuery = (fields) => gql__default["default"] `
  query GetSpacePinnedPosts($spaceId: ID!) {
    spacePinnedPosts(spaceId: $spaceId) {
      ${postGQLFields(fields)}
    }
  }
`;
const getSpaceTaggedPostsGQLQuery = (fields) => gql__default["default"] `
  query GetPostsByTag(
    $spaceId: ID!
    $tagId: ID!
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
  ) {
    tagPosts(
      spaceId: $spaceId
      tagId: $tagId
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${postGQLFields(fields)}
        }
      }
      nodes {
        ${postGQLFields(fields)}
      }
    }
  }
`;
const updateSpaceHighlightedTagsMutation = () => gql__default["default"] `
  mutation updateSpaceHighlightedTags(
    $input: UpdateHighlightedTags!
    $spaceId: ID!
  ) {
    updateSpaceHighlightedTags(input: $input, spaceId: $spaceId) {
      status
      __typename
    }
  }
`;
const exploreSpacesGQLQuery = (fields) => gql__default["default"] `
  query ExploreSpaces(
    $after: String
    $before: String
    $collectionId: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
  ) {
    exploreSpaces(
      after: $after
      before: $before
      collectionId: $collectionId
      limit: $limit
      offset: $offset
      reverse: $reverse
    ) {
      ${paginatedGQLFields(fields, spaceGQLFields)}
    }
  }
`;
const deleteSpaceGQLMutation = (fields) => gql__default["default"] `
  mutation DeleteSpace($id: ID!) {
    deleteSpace(id: $id) {
      ${actionGQLFields()}
    }
  }
`;

function getMemberPostsGQLQuery(fields) {
    return gql__default["default"] `
    query getMemberPost(
      $after: String
      $before: String
      $hasParent: Boolean
      $limit: Int!
      $memberId: ID!
      $offset: Int
      $reverse: Boolean
    ) {
      memberPosts(
        after: $after
        before: $before
        hasParent: $hasParent
        limit: $limit
        memberId: $memberId
        offset: $offset
        reverse: $reverse
      ) {
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}

function getPostGQLQuery(fields) {
    return gql__default["default"] `
    query GetPost(
      $id: ID!
    ) {
      post(id: $id) {
        ${postGQLFields(fields)}
      }
    }
  `;
}
function getPostsGQLQuery(fields) {
    return gql__default["default"] `
    query GetPosts(
      $after: String
      $before: String
      $excludePins: Boolean
      $filterBy: [PostListFilterByInput!]
      $limit: Int!
      $offset: Int
      $orderBy: PostListOrderByEnum
      $postTypeIds: [String!]
      $reverse: Boolean
      $spaceIds: [ID!]
    ) {
      posts(
        after: $after
        before: $before
        excludePins: $excludePins
        filterBy: $filterBy
        limit: $limit
        offset: $offset
        orderBy: $orderBy
        postTypeIds: $postTypeIds
        reverse: $reverse
        spaceIds: $spaceIds
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
      }
    }
  `;
}
function getRepliesGQLQuery(fields) {
    return gql__default["default"] `
    query replies(
      $after: String
      $before: String
      $excludePins: Boolean
      $limit: Int!
      $offset: Int
      $orderBy: PostListOrderByEnum
      $postId: ID!
      $reverse: Boolean
    ) {
      replies(
        after: $after
        before: $before
        excludePins: $excludePins
        limit: $limit
        offset: $offset
        orderBy: $orderBy
        postId: $postId
        reverse: $reverse
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
      }
    }
  `;
}
function createPostGQLQuery(fields) {
    return gql__default["default"] `
    mutation createPost($spaceId: ID!, $input: CreatePostInput!) {
      createPost(input: $input, spaceId: $spaceId) {
        ${postGQLFields(fields)}
      }
    }
  `;
}
function getFeedGQLQuery(fields) {
    return gql__default["default"] `
    query getFeed(
      $after: String
      $before: String
      $filterBy: [PostListFilterByInput!]
      $limit: Int!
      $offset: Int
      $onlyMemberSpaces: Boolean
      $orderBy: PostListOrderByEnum
      $postTypeIds: [String!]
      $reverse: Boolean
    ) {
      feed(
        after: $after
        before: $before
        filterBy: $filterBy
        limit: $limit
        offset: $offset
        onlyMemberSpaces: $onlyMemberSpaces
        orderBy: $orderBy
        postTypeIds: $postTypeIds
        reverse: $reverse
      ) {
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}
const addReactionGQLMutation = (fields) => gql__default["default"] `
  mutation addReaction($input: AddReactionInput!, $postId: ID!) {
    addReaction(input: $input, postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;
const removeReactionGQLMutation = (fields) => gql__default["default"] `
  mutation removeReaction($reaction: String!, $postId: ID!) {
    removeReaction(reaction: $reaction, postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;
const deletePostGQLMutation = (fields) => gql__default["default"] `
  mutation DeletePost($id: ID!) {
    deletePost(id: $id) {
      ${actionGQLFields()}
    }
  }
`;
const updatePostGQLMutation = (fields) => gql__default["default"] `
  mutation UpdatePost($id: ID!, $input: UpdatePostInput!) {
    updatePost(id: $id, input: $input) {
      ${postGQLFields(fields)}
    }
  }
`;
const hidePostGQLMutation = () => gql__default["default"] `
  mutation hidePost($id: ID!) {
    hidePost(id: $id) {
      status
      __typename
    }
  }
`;
const unhidePostGQLMutation = () => gql__default["default"] `
  mutation unhidePost($id: ID!) {
    unhidePost(id: $id) {
      status
      __typename
    }
  }
`;
const pinPostToSpaceGQLMutation = (fields) => gql__default["default"] `
  mutation PinPostToSpace($postId: ID!) {
    pinPostToSpace(postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;
const unpinPostFromSpaceGQLMutation = (fields) => gql__default["default"] `
  mutation UnpinPostFromSpace($postId: ID!) {
    unpinPostFromSpace(postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;

function getPostTypeGQLQuery(fields) {
    return gql__default["default"] `
    query GetPostType($id: ID!) {
      postType(id: $id) {
        __typename
        ${postTypeGQLFields(fields)}
      }
    }
  `;
}
function getPostTypesGQLQuery(fields) {
    return gql__default["default"] `
    query GetPostTypes(
      $after: String
      $before: String
      $limit: Int!
      $offset: Int
      $reverse: Boolean
      $context: PostTypeContext
      $query: String
    ) {
      postTypes(
        after: $after
        before: $before
        limit: $limit
        offset: $offset
        reverse: $reverse
        context: $context
        query: $query
      ) {
        edges {
          cursor
          node {
            __typename
            ${postTypeGQLFields(fields)}
          }
        }
        nodes {
          __typename
          ${postTypeGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}

const postReactionParticipantsGQLQuery = (fields) => gql__default["default"] `
  query PostReactionParticipants(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $postId: ID!
    $reaction: ID!
    $reverse: Boolean
  ) {
    postReactionParticipants(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      postId: $postId
      reaction: $reaction
      reverse: $reverse
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          participant {
            ${memberGQLFields(fields)}
          }
        }
      }
      nodes {
        participant {
          ${memberGQLFields(fields)}
        }
      }
    }
  }
`;

function createReplyGQLQuery(fields) {
    return gql__default["default"] `
    mutation createReply($postId: ID!, $input: CreatePostInput!) {
      createReply(postId: $postId, input: $input) {
        ${postGQLFields(fields)}
      }
    }
  `;
}

const BASIC_SPACE_POST_TYPE_FIELDS = {};
const ALL_SPACE_POST_TYPE_FIELDS = {
    postType: 'basic',
    space: 'basic',
};
function spacePostTypeGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_POST_TYPE_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_POST_TYPE_FIELDS;
    return `
    spaceId
    postTypeId
    whoCanPost
    whoCanReact
    whoCanReply
    ${fields.postType
        ? `
      postType {
        ${postTypeGQLFields(fields.postType)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
          ${spaceGQLFields(fields.space)}
      }
      `
        : ``}
  `;
}

/* eslint-disable import/no-cycle */
function getSpacePostTypeGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacePostType(
      $spaceId: ID!
      $postTypeId: ID!
    ) {
      spacePostType(
          spaceId: $spaceId
          postTypeId: $postTypeId
    ) {
        ${spacePostTypeGQLFields(fields)}
      }
    }
  `;
}
function getSpacePostTypesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacePostTypes(
      $after: String
      $before: String
      $limit: Int!
      $offset: Int
      $reverse: Boolean
      $spaceId: ID!
    ) {
      spacePostTypes(
        after: $after
        before: $before
        limit: $limit
        offset: $offset
        reverse: $reverse
        spaceIds: $spaceIds
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spacePostTypeGQLFields(fields)}
          }
        }
        nodes {
          ${spacePostTypeGQLFields(fields)}
        }
      }
    }
  `;
}
const updateSpacePostTypeGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateSpacePostType($spaceId: ID!, $input: UpdateSpacePostTypeInput!) {
    updatePost(id: $id, input: $input) {
      ${spacePostTypeGQLFields(fields)}
    }
  }
`;

function getTagsGQLQuery(fields) {
    return gql__default["default"] `
    query GetTags(
      $spaceId: ID
      $limit: Int!
      $orderBy: TagListOrderByEnum
      $reverse: Boolean
      $query: String
    ) {
      tags(
        spaceId: $spaceId
        limit: $limit
        orderBy: $orderBy
        reverse: $reverse
        query: $query
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${tagGQLFields()}
          }
        }
        nodes {
          ${tagGQLFields()}
        }
      }
    }
  `;
}
const createTagGQLMutation = (fields) => gql__default["default"] `
  mutation CreateTag($spaceId: ID!, $input: CreateTagInput!) {
    createTag(spaceId: $spaceId, input: $input) {
      ${tagGQLFields()}
    }
  }
`;
const updateTagGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateTag($id: ID!, $spaceId: ID!, $input: UpdateTagInput!) {
    updateTag(id: $id, spaceId: $spaceId, input: $input) {
      ${tagGQLFields()}
    }
  }
`;

const BASIC_SPACE_TYPE_FIELDS = {};
const ALL_SPACE_TYPE_FIELDS = {
    availablePostTypes: 'basic',
};
function spaceTypeGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_TYPE_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_TYPE_FIELDS;
    return `
    id
    name
    ${fields.availablePostTypes
        ? `
      availablePostTypes {
        ${postTypeGQLFields(fields.availablePostTypes)}
      }
    `
        : ``}
  `;
}

function getSpaceTypesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaceTypes(
      $limit: Int!
      $orderBy: SpaceTypeListOrderByEnum
      $reverse: Boolean
    ) {
      spaceTypes(limit: $limit, orderBy: $orderBy, reverse: $reverse) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceTypeGQLFields(fields)}
          }
        }
      }
    }
  `;
}
const spaceTypeGQLQuery = (fields) => gql__default["default"] `
  query SpaceType($id: ID!) {
    spaceType(id: $id) {
      ${spaceTypeGQLFields(fields)}
    }
  }
`;
const createSpaceTypeGQLMutation = (fields) => gql__default["default"] `
  mutation CreateSpaceType($input: CreateSpaceTypeInput!) {
    createSpaceType(input: $input) {
      ${spaceTypeGQLFields(fields)}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const themeColorGQLFields = (fields) => `
  key
  weights {
    key
    value
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const themeColorsGQLFields = (fields) => `
  __typename
  dark {
    ${themeColorGQLFields()}
  }
  light {
    ${themeColorGQLFields()}
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const newThemesGQLFields = (fields) => `
  id
  name
  typography {
    key
    value
  }
  colors {
    ${themeColorsGQLFields()}
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const themeTokensGQLFields = (fields) => `
  breakpoints {
    key
    value
  }
  colors {
    key
    value
  }
  fontSizes {
    key
    value
  }
  fontWeights {
    key
    value
  }
  fontWeights {
    key
    value
  }
  opacity {
    key
    value
  }
  shadows {
    key
    value
  }
  sizes {
    key
    value
  }
  textStyles {
    key
    value
  }
  zIndices {
    key
    value
  }
`;

const BASIC_THEME_TOKENS_FIELDS = {};
const ALL_THEME_TOKENS_FIELDS = {
    tokens: 'basic',
};
const themeGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_THEME_TOKENS_FIELDS;
    if (fields === 'all')
        fields = ALL_THEME_TOKENS_FIELDS;
    return `
    name
    status
    ${fields.tokens
        ? `
      tokens {
        ${themeTokensGQLFields(fields.tokens)}
      }
    `
        : ``}
  `;
};

const upsertThemeGQLMutation = (fields) => gql__default["default"] `
  mutation UpsertTheme($input: UpsertTheme!) {
    upsertTheme(input: $input) {
      ${newThemesGQLFields()}
    }
  }
`;

const BASIC_THEME_FIELDS = {
    active: 'basic',
    drafts: 'basic',
    published: 'basic',
};
const ALL_THEME_FIELDS = {
    active: 'all',
    drafts: 'all',
    published: 'all',
};
function themesGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_THEME_FIELDS;
    if (fields === 'all')
        fields = ALL_THEME_FIELDS;
    return `
    __typename
    ${fields.active
        ? `
      active {
        ${themeGQLFields(fields.active)}
      }
    `
        : ``}
    ${fields.drafts
        ? `
      drafts {
        ${themeGQLFields(fields.drafts)}
      }
    `
        : ``}
    ${fields.published
        ? `
      published {
        ${themeGQLFields(fields.published)}
      }
    `
        : ``}
  `;
}

const badgeGQLFields = (fields) => `
  active
  backgroundColor
  daysUntilExpired
  id
  image {
    ${gqlClient.mediaGQLFields('basic')}
  }
  imageId
  longDescription
  name
  shortDescription
  textColor
  type
`;

const BASIC_CUSTOM_FIELD_SCHEMA_FIELDS$1 = {};
const ALL_CUSTOM_FIELD_SCHEMA_FIELDS$1 = {
    items: 'basic',
    properties: 'basic',
};
const baseCustomFieldSchemaGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_CUSTOM_FIELD_SCHEMA_FIELDS$1;
    if (fields === 'all')
        fields = ALL_CUSTOM_FIELD_SCHEMA_FIELDS$1;
    return `
    description
    key
    name
    required
    type
    typeOptions {
      dateType
      numberType
      relationType
      richTextType
      textType
    }
    validators {
      customErrorMessage
      validation
      value
    }
    ${fields.items
        ? `
      items {
        ${baseCustomFieldSchemaGQLFields(fields.items)}
      }
    `
        : ``}
    ${fields.properties
        ? `
      properties {
        ${baseCustomFieldSchemaGQLFields(fields.properties)}
      }
    `
        : ``}
  `;
};

const BASIC_CUSTOM_FIELD_SCHEMA_FIELDS = {};
const ALL_CUSTOM_FIELD_SCHEMA_FIELDS = {
    items: 'basic',
    properties: 'all',
};
const customFieldSchemaGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_CUSTOM_FIELD_SCHEMA_FIELDS;
    if (fields === 'all')
        fields = ALL_CUSTOM_FIELD_SCHEMA_FIELDS;
    return `
    default
    description
    key
    name
    archived
    readPrivacy {
      allow
    }
    required
    searchable
    settings {
      key
      value
    }
    type
    typeOptions {
      dateType
      numberType
      relationType
      richTextType
      textType
    }
    validators {
      customErrorMessage
      validation
      value
    }
    writePrivacy {
      allow
    }
    ${fields.items
        ? `
      items {
        ${baseCustomFieldSchemaGQLFields(fields.items)}
      }
    `
        : ``}
    ${fields.properties
        ? `
      properties {
        ${baseCustomFieldSchemaGQLFields(fields.properties)}
      }
    `
        : ``}
  `;
};

const BASIC_CUSTOM_FIELDS_SCHEMA_FIELDS = {};
const ALL_CUSTOM_FIELDS_SCHEMA_FIELDS = {
    fields: 'all',
};
const customFieldsSchemaGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_CUSTOM_FIELDS_SCHEMA_FIELDS;
    if (fields === 'all')
        fields = ALL_CUSTOM_FIELDS_SCHEMA_FIELDS;
    return `
  __typename
  ${fields.fields
        ? `
    fields {
      ${customFieldSchemaGQLFields(fields.fields)}
    }
  `
        : ``}
`;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function customCodeGQLFields(fields) {
    return `
    anonymize
    position
    code
  `;
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function topNavigationGQLFields(fields) {
    return `
    enabled
    items {
      link
      openInNewWindow
      text
      type
    }
  `;
}
function getNetworkGQLQuery(fields) {
    return gql__default["default"] `
    query getNetwork {
      network {
        ${networkGQLFields(fields)}
      }
    }
  `;
}
function updateNetworkGQLQuery(fields) {
    return gql__default["default"] `
    mutation updateNetwork($input: UpdateNetworkInput!) {
      updateNetwork(input: $input) {
        ${networkGQLFields(fields)}
      }
    }
  `;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const planGQLFields = (fields) => `
  createdAt
  endDate
  extendable
  memberCapacity
  name
  renewDate
  renewalType
  seatCapacity
  startDate
  trial
`;

const BASIC_NETWORK_FIELDS = {};
const ALL_NETWORK_FIELDS = {
    activeTheme: 'basic',
    themes: 'basic',
    topNavigation: 'basic',
    logo: 'basic',
    favicon: 'basic',
    whoCanInvite: 'basic',
    defaultSpaces: 'basic',
    roles: 'basic',
    customCode: 'basic',
    authMemberProps: 'basic',
    subscriptionPlan: 'basic',
    systemSpaces: 'basic',
    memberFields: 'basic',
    customSeoDetail: 'basic',
    badges: 'basic',
};
const DEFAULT_NETWORK_FIELDS = {
    authMemberProps: 'all',
    customCode: 'all',
    defaultSpaces: {
        image: 'basic',
    },
    favicon: 'all',
    logo: 'all',
    roles: 'all',
    navigationSlates: 'all',
    themes: 'all',
    activeTheme: 'all',
    topNavigation: 'all',
    whoCanInvite: 'all',
    subscriptionPlan: 'all',
    systemSpaces: 'all',
    memberFields: 'all',
    customSeoDetail: 'all',
    badges: 'basic',
};
function networkGQLFields(fields) {
    var _a, _b;
    if (fields === 'basic')
        fields = BASIC_NETWORK_FIELDS;
    if (fields === 'all')
        fields = ALL_NETWORK_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_NETWORK_FIELDS;
    return `
    id
    companyName
    name
    description
    visibility
    membership
    logoId
    faviconId
    locale
    domain
    newDomain
    incidentEmails
    privacyPolicyUrl
    termsOfServiceUrl
    brandColor
    billingEmail
    status
    memberCapacity
    memberCapacityDeclared
    passwordComplexity
    seatsCapacity
    additionalSeatsCapacity
    seatCapacityDeclared
    tribeBranding
    whoCanInviteIds
    hideDefaultAuthenticationForm
    releaseChannel
    landingPages {
      landingPageForGuest
      landingPageForMember
      landingPageForNewMember
    }
    activeSso {
      logoutUrl
      settingsUrl
    }
    ${fields.navigationSlates
        ? `
      navigationSlates {
        ${navigationSlatesGQLFields(fields.navigationSlates)}
      }
    `
        : ``}
    ${fields.activeTheme
        ? `
      activeTheme {
        ${newThemesGQLFields(fields.activeTheme)}
      }
    `
        : ``}
    ${fields.themes
        ? `
      themes {
        ${themesGQLFields(fields.themes)}
      }
    `
        : ``}
    ${fields.topNavigation
        ? `
      topNavigation {
        ${topNavigationGQLFields(fields.topNavigation)}
      }
    `
        : ``}
    ${fields.logo
        ? `
      logo {
        ${mediaGQLFields(fields.logo)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      favicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.whoCanInvite
        ? `
      whoCanInvite {
        ${roleGQLFields(fields.whoCanInvite)}
      }
    `
        : ``}
    ${fields.defaultSpaces
        ? `
      defaultSpaces {
        ${spaceGQLFields(fields.defaultSpaces)}
      }
    `
        : ``}
    ${fields.roles
        ? `
      roles {
        ${roleGQLFields(fields.roles)}
      }
    `
        : ``}
    ${fields.customCode
        ? `
      customCodes(anonymize: false) {
        ${customCodeGQLFields(fields.customCode)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${networkAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.subscriptionPlan
        ? `
      subscriptionPlan {
        ${planGQLFields(fields.subscriptionPlan)}
      }
    `
        : ``}
    ${fields.systemSpaces
        ? `
      systemSpaces {
        ${spaceGQLFields(fields.systemSpaces)}
      }
    `
        : ``}
    ${fields.memberFields
        ? `
      memberFields {
        ${customFieldsSchemaGQLFields(fields.memberFields)}
      }
    `
        : ``}
    ${(fields === null || fields === void 0 ? void 0 : fields.customSeoDetail)
        ? `
      customSeoDetail {
        description
        noIndex
        thumbnail {
          ${mediaGQLFields('basic')}
        }
        thumbnailId
        title
      }
    `
        : ``}
    ${(fields === null || fields === void 0 ? void 0 : fields.extraProperties)
        ? `
      extraProperties ${((_b = (_a = fields === null || fields === void 0 ? void 0 : fields.extraProperties) === null || _a === void 0 ? void 0 : _a.variables) === null || _b === void 0 ? void 0 : _b.keys)
            ? `(keys: ["${fields.extraProperties.variables.keys.join('","')}"])`
            : ``} {
        key
        value
      }
    `
        : ``}
    ${(fields === null || fields === void 0 ? void 0 : fields.badges)
        ? `
      badges {
        ${badgeGQLFields(fields === null || fields === void 0 ? void 0 : fields.badges)}
      }
    `
        : ``}
  `;
}

const BASIC_NETWORK_PUBLIC_INFO_FIELDS = {};
const ALL_NETWORK_PUBLIC_INFO_FIELDS = {
    logo: 'basic',
};
function networkPublicInfoGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_NETWORK_PUBLIC_INFO_FIELDS;
    if (fields === 'all')
        fields = ALL_NETWORK_PUBLIC_INFO_FIELDS;
    return `
    domain
    id
    membership
    name
    status
    visibility
    faviconId
    favicon {
      ${mediaGQLFields('basic')}
    }
    logoId
    ${fields.logo
        ? `
      logo {
        ${mediaGQLFields(fields.logo)}
      }
    `
        : ``}
  `;
}

const BASIC_AUTH_TOKEN_FIELDS = {};
const ALL_AUTH_TOKEN_FIELDS = {
    member: 'basic',
    network: 'basic',
    networkPublicInfo: 'basic',
    role: 'basic',
};
const DEFAULT_AUTH_TOKEN_FIELDS = {
    member: 'default',
    network: 'default',
    networkPublicInfo: {
        logo: 'all',
    },
    role: 'all',
};
function authTokenGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_AUTH_TOKEN_FIELDS;
    if (fields === 'all')
        fields = ALL_AUTH_TOKEN_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_AUTH_TOKEN_FIELDS;
    return `
    accessToken
    refreshToken
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
    ${fields.network
        ? `
      network {
        ${networkGQLFields(fields.network)}
      }
    `
        : ``}
    ${fields.networkPublicInfo
        ? `
      networkPublicInfo {
        ${networkPublicInfoGQLFields(fields.networkPublicInfo)}
      }
    `
        : ``}
    ${fields.role
        ? `
      role {
        ${roleGQLFields(fields.role)}
      }
    `
        : ``}
  `;
}

function getTokensGQLQuery(fields) {
    return gql__default["default"] `
    query getTokens(
      $networkDomain: String
      $networkId: ID
      $otp: String
      $ssoToken: String
      $refreshToken: String
    ) {
      tokens(
        networkDomain: $networkDomain
        networkId: $networkId
        otp: $otp
        ssoToken: $ssoToken
        refreshToken: $refreshToken
      ) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function resendVerificationGQLQuery() {
    return gql__default["default"] `
    mutation resendVerification {
      resendVerification {
        status
      }
    }
  `;
}
function loginNetworkQuery(fields) {
    return gql__default["default"] `
    query loginNetwork($input: LoginNetworkWithPasswordInput!) {
      loginNetwork(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function ssoRedirectMutation(fields) {
    return gql__default["default"] `
    mutation ssoRedirect(
      $input: LoginWithSsoCodeInput!
    ) {
      ssoRedirect(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function joinNetworkMutation(fields) {
    return gql__default["default"] `
    mutation joinNetwork(
      $input: JoinNetworkInput!
    ) {
      joinNetwork(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function joinNetworkWithInvitationLinkMutation(fields) {
    return gql__default["default"] `
    mutation joinNetworkWithInvitationLink(
      $input: JoinNetworkWithLinkInput!
    ) {
      joinNetworkWithInvitationLink(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function joinNetworkWithTokenMutation(fields) {
    return gql__default["default"] `
    mutation joinNetworkWithToken(
      $input: JoinNetworkWithTokenInput!
    ) {
      joinNetworkWithToken(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function verifyMemberMutation(fields) {
    return gql__default["default"] `
    mutation verifyMember(
      $input: VerifyMemberInput!
    ) {
      verifyMember(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function ssosQuery() {
    return gql__default["default"] `
    query ssos($status: SsoStatus) {
      ssos(status: $status) {
        authorizationUrl
        status
        tokenUrl
        type
        userProfileUrl
        buttonText
        clientId
        clientSecret
        idpUrl
        logoutUrl
        name
        provider
        scopes
        settingsUrl
      }
    }
  `;
}
const sendResetPasswordEmailGQLMutation = () => gql__default["default"] `
  mutation SendResetPasswordEmail($email: String!) {
    sendResetPasswordEmail(email: $email) {
      status
    }
  }
`;
const authMemberQuery = (fields) => gql__default["default"] `
  query AuthMember {
    authMember {
      ${memberGQLFields(fields)}
    }
  }
`;
const logoutMutation = () => gql__default["default"] `
  mutation logoutNetwork($input: LogoutNetworkInput) {
    logoutNetwork(input: $input) {
      status
    }
  }
`;

const createBadgeGQLMutation = (fields) => gql__default["default"] `
  mutation CreateBadge($input: CreateBadgeInput!) {
    createBadge(input: $input) {
      ${badgeGQLFields()}
    }
  }
`;
const updateBadgeGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateBadge($id: String!, $input: UpdateBadgeInput!) {
    updateBadge(id: $id, input: $input) {
      ${badgeGQLFields()}
    }
  }
`;
const deleteBadgeGQLMutation = () => gql__default["default"] `
  mutation DeleteBadge($id: String!) {
    deleteBadge(id: $id) {
      status
    }
  }
`;
const assignBadgeGQLMutation = () => gql__default["default"] `
  mutation AssignBadge($id: String!, $input: AssignOrRevokeBadgeInput!) {
    assignBadge(id: $id, input: $input) {
      status
    }
  }
`;
const revokeBadgeGQLMutation = () => gql__default["default"] `
  mutation RevokeBadge($id: String!, $input: AssignOrRevokeBadgeInput!) {
    revokeBadge(id: $id, input: $input) {
      status
    }
  }
`;

const clearNewDomainGQLMutation = () => gql__default["default"] `
  mutation ClearNewDomain {
    clearNewDomain {
      status
    }
  }
`;
const updateNewDomainGQLMutation = () => gql__default["default"] `
  mutation UpdateNewDomain($input: UpdateNewDomainInput!) {
    updateNewDomain(input: $input) {
      aaaarecordSuccess
      aaaarecords
      arecordSuccess
      arecords
      cnameSuccess
      cnames
      domain
      ns
      root
      success
      tribeARecords
      tribeCname
    }
  }
`;
const transferToNewDomainGQLMutation = () => gql__default["default"] `
  mutation TransferToNewDomain {
    transferToNewDomain {
      status
    }
  }
`;
const domainAvailabilityGQLQuery = () => gql__default["default"] `
  query DomainAvailability($input: DomainAvailabilityInput!) {
    domainAvailability(input: $input) {
      available
    }
  }
`;
const newDomainStatusGQLQuery = () => gql__default["default"] `
  query NewDomainStatus($domain: String!) {
    newDomainStatus(domain: $domain) {
      aaaarecordSuccess
      aaaarecords
      arecordSuccess
      arecords
      cnameSuccess
      cnames
      domain
      ns
      root
      success
      tribeARecords
      tribeCname
    }
  }
`;

const emailLogGQLFields = () => {
    return `
    createdAt
    id
    reason
    recipient
    status
    type
    updatedAt
  `;
};

const emailLogsGQLQuery = () => gql__default["default"] `
  query EmailLogs(
    $after: String
    $limit: Int!
    $recipient: String
    $reverse: Boolean
    $statuses: [EmailStatus!]
    $types: [EmailType!]
  ) {
    emailLogs(
      after: $after
      limit: $limit
      recipient: $recipient
      reverse: $reverse
      statuses: $statuses
      types: $types
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${emailLogGQLFields()}
        }
      }
    }
  }
`;

const BASIC_MEMBER_INVITATION_FIELDS = {};
const ALL_MEMBER_INVITATION_FIELDS = {
    invitee: 'basic',
    inviter: 'basic',
    role: 'basic',
    emailLog: 'basic',
};
function memberInvitationGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_MEMBER_INVITATION_FIELDS;
    if (fields === 'all')
        fields = ALL_MEMBER_INVITATION_FIELDS;
    return `
    createdAt
    expiresAt
    id
    invitationMessage
    inviteeId
    inviteeEmail
    inviteeName
    inviterId
    joinedAt
    status
    ${fields.invitee
        ? `
      invitee {
        ${memberGQLFields(fields.invitee)}
      }
    `
        : ``}
    ${fields.inviter
        ? `
      inviter {
        ${memberGQLFields(fields.inviter)}
      }
    `
        : ``}
    ${fields.role
        ? `
      role {
        ${roleGQLFields(fields.role)}
      }
    `
        : ``}
    ${fields.emailLog
        ? `
      emailLog {
        ${emailLogGQLFields()} 
      }
    `
        : ``}
  `;
}

function inviteMembersGQLQuery(fields) {
    return gql__default["default"] `
    mutation InviteMembers($input: InviteMembersInput!) {
      inviteMembers(input: $input) {
        ${memberInvitationGQLFields(fields)}
      }
    }
`;
}
function memberInvitationValidityGQLQuery(fields) {
    return gql__default["default"] `
    query memberInvitationValidity($token: String!) {
      memberInvitationValidity(token: $token) {
        ${memberInvitationGQLFields(fields)}
      }
    }
  `;
}
function invitationLinkValidityGQLQuery() {
    return gql__default["default"] `
    query invitationLinkValidity($id: String!) {
      invitationLinkValidity(id: $id) {
        id
        link
      }
    }
  `;
}
function getMemberInvitationsGQLQuery(fields) {
    return gql__default["default"] `
    query GetMemberInvitations(
      $limit: Int!
      $query: String
      $after: String
      $status: MemberInvitationStatus
      $reverse: Boolean
    ) {
      memberInvitations(
        limit: $limit
        query: $query
        after: $after
        status: $status
        reverse: $reverse
      ) {
        totalCount
        edges {
          node {
            ${memberInvitationGQLFields(fields)}
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
}
function getInvitationLinkGQLQuery() {
    return gql__default["default"] `
    query getInvitationLink {
      memberInvitationLink {
        link
      }
    }
  `;
}

function getMembersGQLQuery(fields) {
    return gql__default["default"] `
    query Members(
      $after: String
      $before: String
      $filterBy: [MemberListFilterByInput!]
      $limit: Int!
      $offset: Int
      $orderBy: String
      $query: String
      $reverse: Boolean
      $roleIds: [ID!]
      $status: [MemberStatusInput!]
    ){
      members(
        after: $after
        before: $before
        filterBy: $filterBy
        limit: $limit
        offset: $offset
        orderBy: $orderBy
        query: $query
        reverse: $reverse
        roleIds: $roleIds
        status: $status
      ) {
        totalCount
        edges {
          node {
            ${memberGQLFields(fields)}
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
}
function getMemberGQLQuery(fields) {
    return gql__default["default"] `
    query GetMember($id: ID!) {
      member(id: $id) {
        ${memberGQLFields(fields)}
      }
    }
  `;
}
function updateMemberGQLQuery(fields) {
    return gql__default["default"] `
    mutation UpdateMember($input: UpdateMemberInput!, $id: ID) {
      updateMember(id: $id, input: $input) {
        ${memberGQLFields(fields)}
      }
    }
  `;
}
function deleteMemberGQLMutation() {
    return gql__default["default"] `
    mutation DeleteMember($id: ID!) {
      deleteMember(id: $id) {
        status
      }
    }
  `;
}
const cancelEmailUpdateGQLMutation = () => gql__default["default"] `
  mutation CancelEmailUpdate($id: ID) {
    cancelEmailUpdate(id: $id) {
      status
    }
  }
`;

const addMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation AddMemberSchemaField($input: CustomFieldSchemaInput!) {
    addMemberSchemaField(input: $input) {
      ${networkGQLFields(fields)}
    }
  }
`;
const updateMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation UpdateMemberSchemaField($input: UpdateCustomFieldSchemaInput!) {
    updateMemberSchemaField(input: $input) {
      ${networkGQLFields(fields)}
    }
  }
`;
const archiveMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation ArchiveMemberSchemaField($key: String!) {
    archiveMemberSchemaField(key: $key) {
      ${networkGQLFields(fields)}
    }
  }
`;
const unArchiveMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation UnArchiveMemberSchemaField($key: String!) {
    unArchiveMemberSchemaField(key: $key) {
      ${networkGQLFields(fields)}
    }
  }
`;
const deleteMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation DeleteMemberSchemaField($key: String!) {
    deleteMemberSchemaField(key: $key) {
      ${networkGQLFields(fields)}
    }
  }
`;
const reorderMemberSchemaFieldsGQLMutation = (fields) => graphqlRequest.gql `
  mutation ReorderMemberSchemaFields($input: [ReOrderSchemaFieldInput!]!) {
    reorderMemberSchemaFields(input: $input) {
      ${networkGQLFields(fields)}
    }
  }
`;

function getRolesGQLQuery(fields) {
    return gql__default["default"] `
    query GetRoles($orderBy: RoleListOrderByEnum, $reverse: Boolean) {
      roles(orderBy: $orderBy, reverse: $reverse) {
        ${roleGQLFields(fields)}
      }
    }
  `;
}

const BASIC_PLURAL_NETWORK_FIELDS = {};
const ALL_PLURAL_NETWORK_FIELDS = {
    activeTheme: 'basic',
    themes: 'basic',
    topNavigation: 'basic',
    logo: 'basic',
    favicon: 'basic',
    whoCanInvite: 'basic',
    defaultSpaces: 'basic',
    roles: 'basic',
    customCode: 'basic',
    authMemberProps: 'basic',
    subscriptionPlan: 'basic',
    systemSpaces: 'basic',
    memberFields: 'basic',
};
const DEFAULT_PLURAL_NETWORK_FIELDS = {
    authMemberProps: 'all',
    customCode: 'all',
    defaultSpaces: 'basic',
    favicon: 'all',
    logo: 'all',
    roles: 'all',
    navigationSlates: 'all',
    themes: 'all',
    activeTheme: 'all',
    topNavigation: 'all',
    whoCanInvite: 'all',
    subscriptionPlan: 'all',
    systemSpaces: 'all',
    memberFields: 'all',
};
function pluralNetworkGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_PLURAL_NETWORK_FIELDS;
    if (fields === 'all')
        fields = ALL_PLURAL_NETWORK_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_PLURAL_NETWORK_FIELDS;
    return `
    id
    companyName
    name
    description
    visibility
    membership
    logoId
    faviconId
    locale
    domain
    newDomain
    incidentEmails
    privacyPolicyUrl
    termsOfServiceUrl
    brandColor
    billingEmail
    status
    memberCapacityDeclared
    additionalSeatsCapacity
    seatCapacityDeclared
    tribeBranding
    whoCanInviteIds
    hideDefaultAuthenticationForm
    activeSso {
      logoutUrl
      settingsUrl
    }
    ${fields.navigationSlates
        ? `
      navigationSlates {
        ${navigationSlatesGQLFields(fields.navigationSlates)}
      }
    `
        : ``}
    ${fields.activeTheme
        ? `
      activeTheme {
        ${newThemesGQLFields(fields.activeTheme)}
      }
    `
        : ``}
    ${fields.themes
        ? `
      themes {
        ${themesGQLFields(fields.themes)}
      }
    `
        : ``}
    ${fields.topNavigation
        ? `
      topNavigation {
        ${topNavigationGQLFields(fields.topNavigation)}
      }
    `
        : ``}
    ${fields.logo
        ? `
      globalLogo {
        ${mediaGQLFields(fields.logo)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      globalFavicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.whoCanInvite
        ? `
      whoCanInvite {
        ${roleGQLFields(fields.whoCanInvite)}
      }
    `
        : ``}
    ${fields.defaultSpaces
        ? `
      defaultSpaces {
        ${spaceGQLFields(fields.defaultSpaces)}
      }
    `
        : ``}
    ${fields.roles
        ? `
      roles {
        ${roleGQLFields(fields.roles)}
      }
    `
        : ``}
    ${fields.customCode
        ? `
      customCodes(anonymize: false) {
        ${customCodeGQLFields(fields.customCode)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${networkAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.subscriptionPlan
        ? `
      subscriptionPlan {
        ${planGQLFields(fields.subscriptionPlan)}
      }
    `
        : ``}
    ${fields.systemSpaces
        ? `
      systemSpaces {
        ${spaceGQLFields(fields.systemSpaces)}
      }
    `
        : ``}
    ${fields.memberFields
        ? `
      memberFields {
        ${customFieldsSchemaGQLFields(fields.memberFields)}
      }
    `
        : ``}
  `;
}

const BASIC_APP_FIELDS = {};
const ALL_APP_FIELDS = {
    banner: 'basic',
    createdBy: 'basic',
    customCodes: 'basic',
    embeds: 'basic',
    favicon: 'basic',
    image: 'basic',
    images: 'basic',
    network: 'basic',
    updatedBy: 'basic',
};
const appGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_APP_FIELDS;
    if (fields === 'all')
        fields = ALL_APP_FIELDS;
    return `
    about
    authorName
    authorUrl
    clientId
    clientSecret
    comingSoon
    createdAt
    description
    docsUrl
    enabledContexts
    id
    imageId
    installed
    locked
    name
    networkId
    privacyPolicyUrl
    requiredPermissions
    requiredPlan
    secretToken
    slug
    standing
    status
    termsOfServiceUrl
    updatedAt
    webhookSignSecret
    webhookSubscriptions
    webhookUrl
    ${fields.banner
        ? `
      banner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${memberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.customCodes
        ? `
      customCodes {
        body
        head
      }
    `
        : ``}
    ${fields.embeds
        ? `
      embeds {
        ${embedGQLFields(fields.embeds)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      favicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.image
        ? `
      image {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
    ${fields.images
        ? `
      images {
        ${mediaGQLFields(fields.images)}
      }
    `
        : ``}
    ${fields.network
        ? `
      network {
        ${networkGQLFields(fields.network)}
      }
    `
        : ``}
    ${fields.updatedBy
        ? `
      updatedBy {
        ${memberGQLFields(fields.updatedBy)}
      }
    `
        : ``}
  `;
};

const BASIC_APP_INSTALLAION_FIELDS = {};
const ALL_APP_INSTALLATION_FIELDS = {
    app: 'basic',
    installedBy: 'basic',
    network: 'basic',
};
const appInstallationGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_APP_INSTALLAION_FIELDS;
    if (fields === 'all')
        fields = ALL_APP_INSTALLATION_FIELDS;
    return `
    appVersion
    context
    createdAt
    id
    installedAt
    permissions
    status
    updatedAt
    ${fields.app
        ? `
      app {
        ${appGQLFields(fields.app)}
      }
    `
        : ``}
    ${fields.installedBy
        ? `
      installedBy {
        ${memberGQLFields(fields.installedBy)}
      }
    `
        : ``}
    ${fields.network
        ? `
      network {
        ${networkGQLFields(fields.network)}
      }
    `
        : ``}
  `;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getLimitedTokenGQLQuery(fields) {
    return gql__default["default"] `
    query limitedToken(
      $networkId: String!
      $context: PermissionContext!
      $entityId: String!
      $impersonateMemberId: String
    ) {
      limitedToken(
        networkId: $networkId
        context: $context
        entityId: $entityId
        impersonateMemberId: $impersonateMemberId
      ) {
        accessToken
      }
    }
  `;
}
const appGQLQuery = (fields) => gql__default["default"] `
  query App($id: ID, $slug: String) {
    app(id: $id, slug: $slug) {
      ${appGQLFields(fields)}
    }
  }
`;
const appsGQLQuery = (fields) => gql__default["default"] `
  query Apps(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $status: StoreItemStatus
  ) {
    apps(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${appGQLFields(fields)}
        }
      }
      nodes {
        ${appGQLFields(fields)}
      }
    }
  }
`;
const getAppNetworkSettingsGQLQuery = () => gql__default["default"] `
  query GetAppNetworkSettings($appId: ID!) {
    getAppNetworkSettings(appId: $appId)
  }
`;
const updateAppNetworkSettingsGQLMutation = () => gql__default["default"] `
  mutation UpdateAppNetworkSettings($appId: ID!, $settings: String!) {
    updateAppNetworkSettings(appId: $appId, settings: $settings) {
      data
      status
    }
  }
`;
const getAppSpaceSettingsGQLQuery = () => gql__default["default"] `
  query GetAppSpaceSettings($appId: ID!, $spaceId: ID!) {
    getAppSpaceSettings(appId: $appId, spaceId: $spaceId)
  }
`;
const installAppGQLMutation = (fields) => gql__default["default"] `
  mutation InstallApp($appId: ID!, $input: InstallAppInput!) {
    installApp(appId: $appId, input: $input) {
      ${appInstallationGQLFields(fields)}
    }
  }
`;
const uninstallAppGQLMutation = (fields) => gql__default["default"] `
  mutation UninstallApp($appInstallationId: ID!, $reason: String) {
    uninstallApp(appInstallationId: $appInstallationId, reason: $reason) {
      ${appInstallationGQLFields(fields)}
    }
  }
`;
const appInstallationsGQLQuery = (fields) => gql__default["default"] `
  query NetworkAppInstallations(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $status: AppInstallationStatus
  ) {
    getNetworkAppInstallations(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${appInstallationGQLFields(fields)}
        }
      }
      nodes {
        ${appInstallationGQLFields(fields)}
      }
    }
  }
`;

const confirmResetPasswordGQLMutation = () => gql__default["default"] `
  mutation ConfirmResetPassword($input: ConfirmResetPasswordInput!) {
    confirmResetPassword(input: $input) {
      status
    }
  }
`;
const updatePasswordWithTokenGQLMutation = () => gql__default["default"] `
  mutation UpdatePasswordWithToken($input: UpdatePasswordWithTokenInput!) {
    updatePasswordWithToken(input: $input) {
      status
    }
  }
`;
const deleteSsoMembershipGQLMutation = () => gql__default["default"] `
  mutation UpdatePasswordWithToken($memberId: String!, $type: SsoType!) {
    deleteSsoMembership(memberId: $memberId, type: $type) {
      status
    }
  }
`;

const ssoGQLFields = () => `
  authorizationUrl
  buttonText
  clientId
  clientSecret
  idpUrl
  logoutUrl
  name
  provider
  scopes
  settingsUrl
  status
  tokenUrl
  type
  userProfileUrl
`;

const updateCustomSsoGQLMutation = () => gql__default["default"] `
  mutation UpdateCustomSso($input: UpdateCustomSsoInput!) {
    updateCustomSso(input: $input) {
      ${ssoGQLFields()}
    }
  }
`;
const updateJwtSsoGQLMutation = () => gql__default["default"] `
  mutation updateJwtSso($input: UpdateJwtSsoInput!) {
    updateJwtSso(input: $input) {
      ${ssoGQLFields()}
    }
  }
`;
const updateDefaultSsoStatusGQLMutation = () => gql__default["default"] `
  mutation UpdateDefaultSsoStatus($sso: DefaultSsoType!, $status: SsoStatus!) {
    updateDefaultSsoStatus(sso: $sso, status: $status) {
      status
    }
  }
`;
const ssoMembershipsGQLQuery = () => gql__default["default"] `
  query SsoMemberships($memberId: String!) {
    ssoMemberships(memberId: $memberId) {
      id
      memberId
      ssoType
    }
  }
`;
const ssoUrlGQLQuery = () => gql__default["default"] `
  query SsoUrl($input: SsoUrlInput!) {
    ssoUrl(input: $input) {
      url
    }
  }
`;

const billingDetailsGQLFields = () => `
  address {
    city
    country
    postalCode
    state
    streetAddress
  }
  billingEmail
  card {
    expirationMonth
    expirationYear
    lastFourDigits
    updatedAt
  }
  companyName
  vat {
    text
    vatId
    vatType
  }
`;

const billingDetailsGQLQuery = () => gql__default["default"] `
  query BillingDetails {
    billingDetails {
      ${billingDetailsGQLFields()}
    }
  }
`;
const invoicesGQLQuery = () => gql__default["default"] `
  query Invoices {
    invoices {
      total
      status
      invoiceUrl
      date
      currency
      cardLastFourDigits
    }
  }
`;
const vatTypesGQLQuery = () => gql__default["default"] `
  query VatTypes {
    vatTypes {
      key
      placeholder
      text
      value
    }
  }
`;
const purchaseGQLMutation = () => gql__default["default"] `
  mutation Purchase($input: PurchaseInput!) {
    purchase(input: $input) {
      createdAt
      id
      status
      updatedAt
    }
  }
`;
const updateBillingDetailsGQLMutation = () => gql__default["default"] `
  mutation UpdateBillingDetails($input: BillingDetailsInput!) {
    updateBillingDetails(input: $input) {
      ${billingDetailsGQLFields()}
    }
  }
`;
const basketsGQLQuery = () => gql__default["default"] `
  query Baskets($input: BasketsInput!) {
    baskets(input: $input) {
      items {
        note
        title
        value {
          currency
          formattedValue
          value
        }
      }
      renewalType
      total {
        currency
        formattedValue
        value
      }
    }
  }
`;

const BASIC_GLOBAL_APP_FIELDS = {};
const ALL_GLOBAL_APP_FIELDS = {
    banner: 'basic',
    createdBy: 'basic',
    customCodes: 'basic',
    embeds: 'basic',
    favicon: 'basic',
    image: 'basic',
    images: 'basic',
    network: 'basic',
    updatedBy: 'basic',
};
const globalAppGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_GLOBAL_APP_FIELDS;
    if (fields === 'all')
        fields = ALL_GLOBAL_APP_FIELDS;
    return `
    about
    authorName
    authorUrl
    clientId
    clientSecret
    comingSoon
    createdAt
    description
    docsUrl
    enabledContexts
    id
    imageId
    installed
    locked
    name
    networkId
    privacyPolicyUrl
    requiredPermissions
    requiredPlan
    secretToken
    slug
    standing
    status
    termsOfServiceUrl
    updatedAt
    webhookSignSecret
    webhookSubscriptions
    webhookUrl
    ${fields.banner
        ? `
      globalBanner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${memberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.customCodes
        ? `
      customCodes {
        body
        head
      }
    `
        : ``}
    ${fields.embeds
        ? `
      globalEmbeds {
        ${embedGQLFields(fields.embeds)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      globalFavicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.image
        ? `
      globalImage {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
    ${fields.images
        ? `
      globalImages {
        ${mediaGQLFields(fields.images)}
      }
    `
        : ``}
    ${fields.network
        ? `
      globalNetwork {
        ${pluralNetworkGQLFields(fields.network)}
      }
    `
        : ``}
    ${fields.updatedBy
        ? `
      updatedBy {
        ${memberGQLFields(fields.updatedBy)}
      }
    `
        : ``}
  `;
};

const globalAppsGQLQuery = (fields) => gql__default["default"] `
  query GlobalApps(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $status: StoreItemStatus
  ) {
    globalApps(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${globalAppGQLFields(fields)}
        }
      }
      nodes {
        ${globalAppGQLFields(fields)}
      }
    }
  }
`;
const globalAppGQLQuery = (fields) => gql__default["default"] `
  query GlobalApp($id: ID, $slug: String) {
    globalApp(
      id: $id, slug: $slug
    ) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalCreateAppGQLMutation = (fields) => gql__default["default"] `
  mutation globalCreateApp($input: CreateAppInput!) {
    globalCreateApp(input: $input) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalUpdateAppGQLMutation = (fields) => gql__default["default"] `
  mutation globalUpdateApp($id: ID!, $input: UpdateAppInput!) {
    globalUpdateApp(id: $id, input: $input) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalDeleteAppGQLMutation = (fields) => gql__default["default"] `
  mutation globalDeleteApp($id: ID!) {
    globalDeleteApp(id: $id) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalNetworksGQLQuery = (fields) => gql__default["default"] `
  query GlobalNetworks(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $query: String
    $roleType: RoleType
  ) {
    globalNetworks(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      query: $query
      roleType: $roleType
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${pluralNetworkGQLFields(fields)}
        }
      }
      nodes {
        ${pluralNetworkGQLFields(fields)}
      }
    }
  }
`;
function globalRegenerateClientSecret(fields) {
    return gql__default["default"] `
    mutation globalRegenerateClientSecret($appId: ID!) {
      globalRegenerateClientSecret(appId: $appId) {
        ${globalAppGQLFields(fields)}
      }
    }
  `;
}
const globalCreateImageGQLMutation = () => gql__default["default"] `
  mutation globalCreateImages($input: [CreateImageInput!]!) {
    globalCreateImages(input: $input) {
      ${signedUrlGQLFields()}
    }
  }
`;
const globalTestAppWebhookGQLMutation = (fields) => gql__default["default"] `
  mutation globalTestAppWebhook($appId: ID!, $input: TestAppWebhookInput!) {
    globalTestAppWebhook(appId: $appId, input: $input) {
      ${actionGQLFields()}
    }
  }
`;

const BASIC_APP_COLLABORATOR_FIELDS = {};
const ALL_APP_COLLABORATOR_FIELDS = {
    app: 'basic',
};
const appCollaboratorGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_APP_COLLABORATOR_FIELDS;
    if (fields === 'all')
        fields = ALL_APP_COLLABORATOR_FIELDS;
    return `
    id
    appId
    email
    createdAt
    type
    ${fields.app
        ? `
      app {
        ${globalAppGQLFields(fields.app)}
      }
    `
        : ``}
  `;
};

const globalAppCollaboratorsQuery = (fields) => gql__default["default"] `
  query globalAppCollaborators($appId: String!) {
    globalAppCollaborators(appId: $appId) {
      ${appCollaboratorGQLFields(fields)}
    }
  }
`;
const globalAddAppCollaboratorGQLMutation = (fields) => gql__default["default"] `
  mutation globalAddAppCollaborator($appId: String!, $input: AddAppCollaboratorInput!) {
    globalAddAppCollaborator(appId: $appId, input: $input) {
      ${appCollaboratorGQLFields(fields)}
    }
  }
`;
const globalRemoveAppCollaboratorGQLMutation = (fields) => gql__default["default"] `
  mutation globalRemoveAppCollaborator($appId: String!, $collaboratorId: String!) {
    globalRemoveAppCollaborator(appId: $appId, collaboratorId: $collaboratorId) {
      ${actionGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const appPublicationGQLFields = (fields) => {
    return `
    id
    addedById
    itemId
    networkId
    createdAt
  `;
};

const globalAppPublicationsQuery = (fields) => gql__default["default"] `
  query globalAppPublications($appId: ID!) {
    globalAppPublications(appId: $appId) {
      ${appPublicationGQLFields()}
    }
  }
`;
const globalPublishAppPrivatelyGQLMutation = (fields) => gql__default["default"] `
  mutation globalPublishAppPrivately($appId: ID!, $networkId: ID!) {
    globalPublishAppPrivately(appId: $appId, networkId: $networkId) {
      ${appPublicationGQLFields()}
    }
  }
`;
const globalUnPublishAppPrivatelyGQLMutation = (fields) => gql__default["default"] `
  mutation globalUnPublishAppPrivately($appId: ID!, $networkId: ID!) {
    globalUnPublishAppPrivately(appId: $appId, networkId: $networkId) {
      ${actionGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function eventTypeGQLFields(fields) {
    return `
    name
    description
    noun
    requiredScope
    shortDescription
    verb
  `;
}

const globalEventTypesQuery = (fields) => gql__default["default"] `
  query globalEventTypes {
    globalEventTypes {
      ${eventTypeGQLFields()}
    }
  }
`;

const BASIC_MODERATION_ITEM_ENTITY_FIELDS = {
    onMember: 'basic',
    onPost: 'basic',
};
const ALL_MODERATION_ITEM_ENTITY_FIELDS = {
    onMember: 'all',
    onPost: 'all',
};
const moderationItemEntityGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_MODERATION_ITEM_ENTITY_FIELDS;
    if (fields === 'all')
        fields = ALL_MODERATION_ITEM_ENTITY_FIELDS;
    return `
    __typename
    ${fields.onMember
        ? `
      ... on Member {
        ${memberGQLFields(fields.onMember)}
      }
    `
        : ``}
    ${fields.onPost
        ? `
      ... on Post {
        ${postGQLFields(fields.onPost)}
      }
    `
        : ``}
  `;
};

const BASIC_MODERATION_ITEM_REPORTER_FIELDS = {
    reporter: 'basic',
};
const ALL_MODERATION_ITEM_REPORTER_FIELDS = {
    reporter: 'all',
};
const moderationItemReporterGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_MODERATION_ITEM_REPORTER_FIELDS;
    if (fields === 'all')
        fields = ALL_MODERATION_ITEM_REPORTER_FIELDS;
    return `
    createdAt
    description
    id
    reportCategory
    updatedAt
    ${fields.reporter
        ? `
      reporter {
        ${memberGQLFields(fields.reporter)}
      }
    `
        : ``}
  `;
};

const BASIC_MODERATION_ITEM_FIELDS = {
    entity: 'basic',
    moderator: 'basic',
    reporters: {
        fields: 'basic',
        variables: { limit: 10 },
    },
};
const ALL_MODERATION_ITEM_FIELDS = {
    entity: 'all',
    moderator: 'all',
    reporters: {
        fields: 'all',
        variables: { limit: 10 },
    },
};
const moderationItemGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_MODERATION_ITEM_FIELDS;
    if (fields === 'all')
        fields = ALL_MODERATION_ITEM_FIELDS;
    return `
    createdAt
    description
    flaggedBy
    id
    spaceId
    status
    updatedAt
    ${fields.entity
        ? `
      entity {
        ${moderationItemEntityGQLFields(fields.entity)}
      }
    `
        : ``}
    ${fields.moderator
        ? `
      moderator {
        ${memberGQLFields(fields.moderator)}
      }
    `
        : ``}
    ${fields.reporters
        ? `
      reporters(limit: ${fields.reporters.variables.limit}) {
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
        nodes {
          ${moderationItemReporterGQLFields(fields.reporters.fields)}
        }
        edges {
          cursor
          node {
            ${moderationItemReporterGQLFields(fields.reporters.fields)}
          }
        }
      }
    `
        : ``}
  `;
};

const moderationItemGQLQuery = (fields) => gql__default["default"] `
  query ModerationItem($id: ID!) {
    moderationItem(id: $id) {
      ${moderationItemGQLFields(fields)}
    }
  }
`;
const moderationItemsGQLQuery = (fields) => gql__default["default"] `
  query ModerationItems(
    $after: String
    $before: String
    $entityId: String
    $entityType: ModerationEntityType
    $flaggedBy: FlaggedType
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $spaceId: String
    $status: ModerationStatus
  ) {
    moderationItems(
      after: $after
      before: $before
      entityId: $entityId
      entityType: $entityType
      flaggedBy: $flaggedBy
      limit: $limit
      offset: $offset
      reverse: $reverse
      spaceId: $spaceId
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${moderationItemGQLFields(fields)}
        }
      }
      nodes {
        ${moderationItemGQLFields(fields)}
      }
    }
  }
`;
const moderationItemReportersGQLQuery = (fields) => gql__default["default"] `
  query ModerationItemReporters(
    $after: String
    $before: String
    $limit: Int!
    $moderationId: String!
    $offset: Int
    $reverse: Boolean
  ) {
    moderationItemReporters(
      after: $after
      before: $before
      limit: $limit
      moderationId: $moderationId
      offset: $offset
      reverse: $reverse
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${moderationItemReporterGQLFields(fields)}
        }
      }
      nodes {
        ${moderationItemReporterGQLFields(fields)}
      }
    }
  }
`;
const moderationSettingsGQLQuery = () => gql__default["default"] `
  query ModerationSettings {
    moderationSettings {
      customBlacklist
      enableBlacklisting
      useDefaultBlacklisting
    }
  }
`;
const updateModerationSettingsGQLMutation = () => gql__default["default"] `
  mutation UpdateModerationSettings($input: UpdateModerationSettingsInput!) {
    updateModerationSettings(input: $input) {
      customBlacklist
      enableBlacklisting
      useDefaultBlacklisting
    }
  }
`;
const updateModerationItemGQLMutation = () => gql__default["default"] `
  mutation UpdateModerationItem($id: ID!, $input: UpdateModerationItemInput!) {
    updateModerationItem(id: $id, input: $input) {
      status
    }
  }
`;

const memberPostNotificationSettingsFields = () => `
  __typename
  enabled
  memberId
  postId
`;

const networkNotificationSettingsFields = () => `
    __typename
    enabled
    channel
    isDefault
    mention
    reaction
    sameAsDefault
`;

const BASIC_PAYLOAD_FIELDS = {};
const ALL_PAYLOAD_FIELDS = {
    media: 'all',
    member: 'basic',
    post: 'basic',
    space: 'basic',
};
function payloadGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_PAYLOAD_FIELDS;
    if (fields === 'all')
        fields = ALL_PAYLOAD_FIELDS;
    return `
    id
    name
    summary
    type
    ${fields.media
        ? `
      media {
        ${mediaGQLFields(fields.media)}
      }
    `
        : ``}
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
    ${fields.post
        ? `
      post {
        ${postGQLFields(fields.post)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
  `;
}

const BASIC_NOTIFICATION_FIELDS = {};
const ALL_NOTIFICATION_FIELDS = {
    actor: 'basic',
    object: 'basic',
    space: 'basic',
    target: 'basic',
};
function notificationGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_NOTIFICATION_FIELDS;
    if (fields === 'all')
        fields = ALL_NOTIFICATION_FIELDS;
    return `
    createdAt
    id
    meta {
      relativeUrl
      url
      body
      textBody
      title
      textTitle
      fullTitle
      textFullTitle
      reason
    }
    read
    verb
    ${fields.actor
        ? `
      actor {
        ${payloadGQLFields(fields.actor)}
      }
    `
        : ``}
    ${fields.object
        ? `
      object {
        ${payloadGQLFields(fields.object)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
    ${fields.target
        ? `
      target {
        ${payloadGQLFields(fields.target)}
      }
    `
        : ``}
  `;
}

const spaceNotificationSettingsFields = () => `
    __typename
    space {
      __typename
      id
      name
      slug
      image {
        ${mediaGQLFields('basic')}
      }
    }
    channel
    isDefault
    preference
    sameAsDefault
`;

function getNotificationsGQLQuery(fields) {
    return gql__default["default"] `
    query getNotifications($after: String, $limit: Int!) {
      notifications(after: $after, limit: $limit) {
        edges {
          cursor
          node {
            ${notificationGQLFields(fields)}
          }
        }
        nodes {
          ${notificationGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}
function getNotificationsCountGQLQuery() {
    return gql__default["default"] `
    query getNotificationsCount {
      notificationsCount {
        new
      }
    }
  `;
}
function getMemberNotificationSettingsGQLQuery() {
    return gql__default["default"] `
    query memberNotificationSettings($id: ID) {
      memberNotificationSettings(id: $id) {
        __typename
        network {
          ${networkNotificationSettingsFields()}
        }
        spaces {
          ${spaceNotificationSettingsFields()}
        }
      }
    }
  `;
}
function getMemberPostNotificationSettingsGQLQuery() {
    return gql__default["default"] `
    query memberPostNotificationSettings($memberId: ID, $postId: ID!) {
      memberPostNotificationSettings(memberId: $memberId, postId: $postId) {
        ${memberPostNotificationSettingsFields()}
      }
    }
  `;
}
function updateMemberPostNotificationSettingsGQLMutation() {
    return gql__default["default"] `
    mutation updateMemberPostNotificationSettings(
      $input: UpdateMemberPostNotificationSettingsInput!
      $memberId: ID
      $postId: ID!
    ) {
      updateMemberPostNotificationSettings(
        input: $input
        memberId: $memberId
        postId: $postId
      ) {
        ${memberPostNotificationSettingsFields()}
      }
    }
  `;
}
const updateNetworkNotificationSettingsGQLMutation = () => gql__default["default"] `
  mutation updateNetworkNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateMemberNetworkNotificationSettingsInput!
    $memberId: ID
  ) {
    updateMemberNetworkNotificationSettings(
      channel: $channel
      input: $input
      memberId: $memberId
    ) {
      ${networkNotificationSettingsFields()}
    }
  }
`;
const updateSpaceNotificationSettingsGQLMutation = () => gql__default["default"] `
  mutation updateSpaceNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateMemberSpaceNotificationSettingsInput!
    $memberId: ID
    $spaceId: ID!
  ) {
    updateMemberSpaceNotificationSettings(
      channel: $channel
      input: $input
      memberId: $memberId
      spaceId: $spaceId
    ) {
      ${spaceNotificationSettingsFields()}
    }
  }
`;
const readNotificationGQLMutation = (fields) => gql__default["default"] `
  mutation ReadNotification($notificationId: ID!) {
    readNotification(notificationId: $notificationId) {
      ${actionGQLFields()}
    }
  }
`;
const readNotificationsGQLMutation = (fields) => gql__default["default"] `
  mutation ReadNotifications($ids: [ID!]!) {
    readNotifications(ids: $ids) {
      ${actionGQLFields()}
    }
  }
`;
const deleteNotificationGQLMutation = (fields) => gql__default["default"] `
  mutation DeleteNotification($notificationId: ID!) {
    deleteNotification(notificationId: $notificationId) {
      ${actionGQLFields()}
    }
  }
`;
const deleteNotificationsGQLMutation = (fields) => gql__default["default"] `
  mutation DeleteNotifications($ids: [ID!]!) {
    deleteNotifications(ids: $ids) {
      ${actionGQLFields()}
    }
  }
`;
const clearNotificationsCountGQLMutation = (fields) => gql__default["default"] `
  mutation ClearNotificationsCount {
    clearNotificationsCount {
      ${actionGQLFields()}
    }
  }
`;
const unsubscribeFromNotificationGQLMutation = (fields) => gql__default["default"] `
    mutation UnsubscribeFromNotification($input: UnsubscribeWithTokenInput!) {
      unsubscribeFromNotification(input: $input) {
        ${actionGQLFields()}
      }
    }
  `;
const updateSpaceDefaultNotificationSettingsGQLMutation = () => gql__default["default"] `
  mutation UpdateSpaceDefaultNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateSpaceDefaultNotificationSettingsInput!
    $spaceId: ID!
  ) {
    updateSpaceDefaultNotificationSettings(
      channel: $channel
      input: $input
      spaceId: $spaceId
    ) {
      channel
      enabled
      isDefault
      preference
      sameAsDefault
    }
  }
`;
const spaceDefaultNotificationSettingsGQLQuery = () => gql__default["default"] `
  query SpaceDefaultNotificationSettings($spaceId: ID!) {
    spaceDefaultNotificationSettings(spaceId: $spaceId) {
      channel
      enabled
      isDefault
      preference
      sameAsDefault
    }
  }
`;

const extraPropertiesGQLQuery = () => gql__default["default"] `
  query ExtraProperties(
    $entityId: String
    $entityType: ExtraPropertyEntityType!
    $keys: [String!]
  ) {
    extraProperties(entityId: $entityId, entityType: $entityType, keys: $keys) {
      key
      value
    }
  }
`;

const BASIC_REPORT_ENTITIES_FIELDS = {
    actor: 'basic',
    app: 'basic',
    member: 'basic',
    network: 'basic',
    post: 'basic',
    space: 'basic',
    tag: 'basic',
};
const ALL_REPORT_ENTITIES_FIELDS = {
    actor: 'all',
    app: 'all',
    member: 'all',
    network: 'all',
    post: 'all',
    space: 'all',
    tag: 'all',
};
const reportEntitiesGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_REPORT_ENTITIES_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_ENTITIES_FIELDS;
    return `
    __typename
    ${fields.actor
        ? `
    actor {
      ${memberGQLFields(fields.actor)}
    }
    `
        : ``}
    ${fields.app
        ? `
    app {
      ${appGQLFields(fields.app)}
    }
    `
        : ``}
    ${fields.member
        ? `
    member {
      ${memberGQLFields(fields.member)}
    }
    `
        : ``}
    ${fields.network
        ? `
    network {
      ${networkGQLFields(fields.network)}
    }
    `
        : ``}
    ${fields.post
        ? `
      post {
        ${postGQLFields(fields.post)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
    ${fields.tag
        ? `
      tag {
        ${tagGQLFields(fields.tag)}
      }
    `
        : ``}
  `;
};

const BASIC_REPORT_PAYLOAD_FIELDS = {};
const ALL_REPORT_PAYLOAD_FIELDS = {
    entities: 'basic',
};
const reportRecordGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_REPORT_PAYLOAD_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_PAYLOAD_FIELDS;
    return `
    payload {
      key
      value
    }
    ${fields.entities
        ? `
    entities {
      ${reportEntitiesGQLFields(fields === null || fields === void 0 ? void 0 : fields.entities)}
    }
    `
        : ``}
  `;
};

const getActivityLogsGQLQuery = (fields) => gql__default["default"] `
  query ActivityLogs($query: String!) {
    activityLogs(query: $query) {
      ${reportRecordGQLFields(fields)}
    }
  }
`;

const BASIC_REPORTABLE_ENTITY_FIELDS = {};
const ALL_REPORTABLE_ENTITY_FIELDS = {
    onMember: 'basic',
    onPost: 'basic',
    onSpace: 'basic',
    onTag: 'basic',
};
function reportableEntityGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORTABLE_ENTITY_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORTABLE_ENTITY_FIELDS;
    return `
    __typename
    ${fields.onMember
        ? `
      ... on Member {
        ${memberGQLFields(fields.onMember)}
      }
    `
        : ``}
    ${fields.onPost
        ? `
      ... on Post {
        ${postGQLFields(fields.onPost)}
      }
    `
        : ``}
    ${fields.onSpace
        ? `
      ... on Space {
        ${spaceGQLFields(fields.onSpace)}
      }
    `
        : ``}
    ${fields.onTag
        ? `
      ... on Tag {
        ${tagGQLFields(fields.onTag)}
      }
    `
        : ``}
  `;
}

const BASIC_REPORT_DATA_VALUE_FIELDS = {};
const ALL_REPORT_DATA_VALUE_FIELDS = {
    onChartData: 'basic',
    onEntityReport: 'basic',
    onIntValue: 'basic',
    onStringValue: 'basic',
};
function reportDataValueGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORT_DATA_VALUE_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_DATA_VALUE_FIELDS;
    return `
    __typename
    ${fields.onIntValue
        ? `
      ... on IntValue {
        int
      }
    `
        : ``}
    ${fields.onChartData
        ? `
      ... on ChartData {
        label
        points
        value
      }
    `
        : ``}
    ${fields.onEntityReport
        ? `
      ... on EntityReport {
        ${entityReportGQLFields(fields.onEntityReport)}
      }
    `
        : ``}
    ${fields.onStringValue
        ? `
      ... on StringValue {
        string
      }
    `
        : ``}
  `;
}

const BASIC_REPORT_DATA_FIELDS = {};
const ALL_REPORT_DATA_FIELDS = {
    previousValue: 'basic',
    value: 'basic',
};
function reportDataGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORT_DATA_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_DATA_FIELDS;
    return `
    description
    key
    type
    ${fields.value
        ? `
      value {
        ${reportDataValueGQLFields(fields.value)}
      }
    `
        : ``}
    ${fields.previousValue
        ? `
      previousValue {
        ${reportDataValueGQLFields(fields.previousValue)}
      }
    `
        : ``}
  `;
}

const BASIC_ENTITY_REPORT_FIELDS = {};
const ALL_ENTITY_REPORT_FIELDS = {
    entity: 'basic',
    data: 'basic',
};
function entityReportGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_ENTITY_REPORT_FIELDS;
    if (fields === 'all')
        fields = ALL_ENTITY_REPORT_FIELDS;
    return `
    description
    endDate
    entityId
    entityType
    startDate
    tooltip
    ${fields.data
        ? `
      data {
        ${reportDataGQLFields(fields.data)}
      }
    `
        : ``}
    ${fields.entity
        ? `
      entity {
        ${reportableEntityGQLFields(fields.entity)}
      }
    `
        : ``}
  `;
}

const BASIC_LEADERBOARD_FIELDS = {};
const ALL_LEADERBOARD_FIELDS = {
    member: 'basic',
    score: 'basic',
};
const DEFAULT_LEADERBOARD_FIELDS = {
    member: 'default',
    score: 'basic',
};
const leaderboardGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_LEADERBOARD_FIELDS;
    if (fields === 'all')
        fields = ALL_LEADERBOARD_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_LEADERBOARD_FIELDS;
    return `
    memberId
    ${fields.score ? 'score' : ''}
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
  `;
};

function getLeaderboardGQLQuery(fields) {
    return gql__default["default"] `
    query getLeaderboard(
      $input: ReportInput!
    ){
      leaderboard(input: $input) {
        ${memberGQLFields(fields)}
      }
    }
  `;
}
const getLeaderboardWithScoresGQLQuery = (fields) => gql__default["default"] `
  query LeaderboardWithScores(
    $includeAuthMember: Boolean!
    $input: ReportInput!
  ) {
    leaderboardWithScores(
      includeAuthMember: $includeAuthMember
      input: $input
    ) {
      ${leaderboardGQLFields(fields)}
    }
  }
`;

const BASIC_REPORT_FIELDS = {};
const ALL_REPORT_FIELDS = {
    data: 'basic',
};
function reportGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORT_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_FIELDS;
    return `
    description
    endDate
    previousValue
    slug
    startDate
    title
    tooltip
    value
    ${fields.data
        ? `
      data {
        ${reportDataGQLFields(fields.data)}
      }
    `
        : ``}
  `;
}

function getReportGQLQuery(fields) {
    return gql__default["default"] `
    query getReport(
      $input: ReportInput!
      $spaceId: String
    ){
      report(input: $input, spaceId: $spaceId) {
        ${reportGQLFields(fields)}
      }
    }
  `;
}

const BASIC_SEARCH_ENTITY_FIELDS = {};
const ALL_SEARCH_ENTITY_FIELDS = {
    in: {
        image: 'basic',
    },
    by: 'basic',
    media: 'basic',
};
function searchEntityGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SEARCH_ENTITY_FIELDS;
    if (fields === 'all')
        fields = ALL_SEARCH_ENTITY_FIELDS;
    return `
    content
    created
    entityId
    id
    subtitle
    title
    entityType
    ${fields.in
        ? `
      in {
        ... on Space {
          ${spaceGQLFields(fields.in)}
        }
      }
    `
        : ``}
    ${fields.by
        ? `
      by {
        ... on Member {
          ${memberGQLFields(fields.by)}
        }
      }
    `
        : ``}
    ${fields.media
        ? `
      media {
        ${mediaGQLFields(fields.media)}
      }
    `
        : ``}
  `;
}

function searchGQLQuery(fields) {
    return gql__default["default"] `
    query search($input: SearchInput!) {
      search(input: $input) {
        totalCount
        hits {
          entityType
          hits {
            ${searchEntityGQLFields(fields)}
          }
        }
      }
    }
  `;
}

var AccessGroupEntityType;
(function (AccessGroupEntityType) {
    AccessGroupEntityType["NETWORK"] = "network";
    AccessGroupEntityType["POST"] = "post";
    AccessGroupEntityType["SPACE"] = "space";
})(AccessGroupEntityType || (AccessGroupEntityType = {}));
var ActionStatus;
(function (ActionStatus) {
    ActionStatus["FAILED"] = "failed";
    ActionStatus["SUCCEEDED"] = "succeeded";
})(ActionStatus || (ActionStatus = {}));
var AppCollaboratorType;
(function (AppCollaboratorType) {
    AppCollaboratorType["COLLABORATOR"] = "COLLABORATOR";
    AppCollaboratorType["OWNER"] = "OWNER";
})(AppCollaboratorType || (AppCollaboratorType = {}));
var AppInstallationStatus;
(function (AppInstallationStatus) {
    AppInstallationStatus["DELETED"] = "DELETED";
    AppInstallationStatus["DISABLED"] = "DISABLED";
    AppInstallationStatus["ENABLED"] = "ENABLED";
})(AppInstallationStatus || (AppInstallationStatus = {}));
var BadgeType;
(function (BadgeType) {
    BadgeType["ADMIN"] = "Admin";
    BadgeType["MANUAL"] = "Manual";
    BadgeType["MODERATOR"] = "Moderator";
    BadgeType["NEW_MEMBER"] = "NewMember";
})(BadgeType || (BadgeType = {}));
var CollectionListOrderByEnum;
(function (CollectionListOrderByEnum) {
    CollectionListOrderByEnum["CREATED_AT"] = "CREATED_AT";
    CollectionListOrderByEnum["CUSTOM_ORDERING_INDEX"] = "CUSTOM_ORDERING_INDEX";
    CollectionListOrderByEnum["UPDATED_AT"] = "UPDATED_AT";
})(CollectionListOrderByEnum || (CollectionListOrderByEnum = {}));
var CustomCodePosition;
(function (CustomCodePosition) {
    CustomCodePosition["BODY"] = "BODY";
    CustomCodePosition["HEAD"] = "HEAD";
})(CustomCodePosition || (CustomCodePosition = {}));
var CustomFieldPrivacyOptions;
(function (CustomFieldPrivacyOptions) {
    CustomFieldPrivacyOptions["ADMIN"] = "ADMIN";
    CustomFieldPrivacyOptions["OWN"] = "OWN";
})(CustomFieldPrivacyOptions || (CustomFieldPrivacyOptions = {}));
var CustomFieldType;
(function (CustomFieldType) {
    CustomFieldType["ARRAY"] = "array";
    CustomFieldType["BOOLEAN"] = "boolean";
    CustomFieldType["DATE"] = "date";
    CustomFieldType["NUMBER"] = "number";
    CustomFieldType["OBJECT"] = "object";
    CustomFieldType["RELATION"] = "relation";
    CustomFieldType["RICH_TEXT"] = "richText";
    CustomFieldType["TEXT"] = "text";
})(CustomFieldType || (CustomFieldType = {}));
var CustomFieldValidators;
(function (CustomFieldValidators) {
    CustomFieldValidators["ALL_OF"] = "allOf";
    CustomFieldValidators["ANY_OF"] = "anyOf";
    CustomFieldValidators["ENUM"] = "enum";
    CustomFieldValidators["EXCLUSIVE_MAXIMUM"] = "exclusiveMaximum";
    CustomFieldValidators["EXCLUSIVE_MINIMUM"] = "exclusiveMinimum";
    CustomFieldValidators["FORMAT"] = "format";
    CustomFieldValidators["MAX_ITEMS"] = "maxItems";
    CustomFieldValidators["MAX_LENGTH"] = "maxLength";
    CustomFieldValidators["MAX_PROPERTIES"] = "maxProperties";
    CustomFieldValidators["MAXIMUM"] = "maximum";
    CustomFieldValidators["MIN_ITEMS"] = "minItems";
    CustomFieldValidators["MIN_LENGTH"] = "minLength";
    CustomFieldValidators["MIN_PROPERTIES"] = "minProperties";
    CustomFieldValidators["MINIMUM"] = "minimum";
    CustomFieldValidators["MULTIPLE_OF"] = "multipleOf";
    CustomFieldValidators["NOT"] = "not";
    CustomFieldValidators["ONE_OF"] = "oneOf";
    CustomFieldValidators["PATTERN"] = "pattern";
    CustomFieldValidators["UNIQUE_ITEMS"] = "uniqueItems";
})(CustomFieldValidators || (CustomFieldValidators = {}));
var CustomSsoType;
(function (CustomSsoType) {
    CustomSsoType["OAUTH2"] = "oauth2";
})(CustomSsoType || (CustomSsoType = {}));
var DateTypeOptions;
(function (DateTypeOptions) {
    DateTypeOptions["DATE"] = "date";
    DateTypeOptions["DATETIME"] = "datetime";
})(DateTypeOptions || (DateTypeOptions = {}));
var DefaultSsoType;
(function (DefaultSsoType) {
    DefaultSsoType["FACEBOOK"] = "facebook";
    DefaultSsoType["GOOGLE"] = "google";
    DefaultSsoType["LINKEDIN"] = "linkedin";
})(DefaultSsoType || (DefaultSsoType = {}));
var EmailStatus;
(function (EmailStatus) {
    EmailStatus["BLOCKED"] = "BLOCKED";
    EmailStatus["BOUNCED"] = "BOUNCED";
    EmailStatus["CREATED"] = "CREATED";
    EmailStatus["DEFERRED"] = "DEFERRED";
    EmailStatus["DELIVERED"] = "DELIVERED";
    EmailStatus["DROPPED"] = "DROPPED";
    EmailStatus["PROCESSED"] = "PROCESSED";
    EmailStatus["SENT"] = "SENT";
})(EmailStatus || (EmailStatus = {}));
var EmailType;
(function (EmailType) {
    EmailType["COLLABORATOR_INVITATION"] = "CollaboratorInvitation";
    EmailType["EMAIL_VERIFICATION"] = "EmailVerification";
    EmailType["MEMBER_CONFIRMATION"] = "MemberConfirmation";
    EmailType["MEMBER_INVITATION"] = "MemberInvitation";
    EmailType["NOTIFICATION"] = "Notification";
    EmailType["RESET_PASSWORD"] = "ResetPassword";
    EmailType["UNKNOWN"] = "Unknown";
})(EmailType || (EmailType = {}));
var EventVerb;
(function (EventVerb) {
    EventVerb["ACCEPTED"] = "ACCEPTED";
    EventVerb["ADDED"] = "ADDED";
    EventVerb["BANNED"] = "BANNED";
    EventVerb["BLOCKED"] = "BLOCKED";
    EventVerb["CANCELED"] = "CANCELED";
    EventVerb["CREATED"] = "CREATED";
    EventVerb["DELETED"] = "DELETED";
    EventVerb["EXPIRED"] = "EXPIRED";
    EventVerb["FAILED"] = "FAILED";
    EventVerb["FOLLOWED"] = "FOLLOWED";
    EventVerb["HIDDEN"] = "HIDDEN";
    EventVerb["PERMITTED"] = "PERMITTED";
    EventVerb["PINGED"] = "PINGED";
    EventVerb["PINNED"] = "PINNED";
    EventVerb["PUBLISHED"] = "PUBLISHED";
    EventVerb["REJECTED"] = "REJECTED";
    EventVerb["REMOVED"] = "REMOVED";
    EventVerb["REVOKED"] = "REVOKED";
    EventVerb["UNBLOCKED"] = "UNBLOCKED";
    EventVerb["UNFOLLOWED"] = "UNFOLLOWED";
    EventVerb["UNHIDDEN"] = "UNHIDDEN";
    EventVerb["UNPINNED"] = "UNPINNED";
    EventVerb["UNPUBLISHED"] = "UNPUBLISHED";
    EventVerb["UNVERIFIED"] = "UNVERIFIED";
    EventVerb["UPDATED"] = "UPDATED";
    EventVerb["VERIFIED"] = "VERIFIED";
    EventVerb["VIEWED"] = "VIEWED";
})(EventVerb || (EventVerb = {}));
var ExtraPropertyEntityType;
(function (ExtraPropertyEntityType) {
    ExtraPropertyEntityType["MEMBER"] = "Member";
    ExtraPropertyEntityType["NETWORK"] = "Network";
})(ExtraPropertyEntityType || (ExtraPropertyEntityType = {}));
var Filtername;
(function (Filtername) {
    Filtername["AND"] = "and";
    Filtername["LEAF"] = "leaf";
    Filtername["OR"] = "or";
})(Filtername || (Filtername = {}));
var FlaggedType;
(function (FlaggedType) {
    FlaggedType["MEMBER"] = "MEMBER";
    FlaggedType["SYSTEM"] = "SYSTEM";
})(FlaggedType || (FlaggedType = {}));
var HighlightedTagType;
(function (HighlightedTagType) {
    HighlightedTagType["SECTION"] = "SECTION";
    HighlightedTagType["TOPIC"] = "TOPIC";
})(HighlightedTagType || (HighlightedTagType = {}));
var ImportRequestStage;
(function (ImportRequestStage) {
    ImportRequestStage["ANSWER"] = "ANSWER";
    ImportRequestStage["COMMENT"] = "COMMENT";
    ImportRequestStage["DISCUSSION"] = "DISCUSSION";
    ImportRequestStage["FIX_POST_TYPES"] = "FIX_POST_TYPES";
    ImportRequestStage["MEMBER"] = "MEMBER";
    ImportRequestStage["QUESTION"] = "QUESTION";
    ImportRequestStage["SPACE"] = "SPACE";
    ImportRequestStage["TOPIC"] = "TOPIC";
})(ImportRequestStage || (ImportRequestStage = {}));
var ImportRequestStatus;
(function (ImportRequestStatus) {
    ImportRequestStatus["DONE"] = "DONE";
    ImportRequestStatus["IN_PROGRESS"] = "IN_PROGRESS";
})(ImportRequestStatus || (ImportRequestStatus = {}));
var InvoiceStatus;
(function (InvoiceStatus) {
    InvoiceStatus["CANCELLED"] = "cancelled";
    InvoiceStatus["FAILED"] = "failed";
    InvoiceStatus["PAID"] = "paid";
    InvoiceStatus["PENDING"] = "pending";
})(InvoiceStatus || (InvoiceStatus = {}));
var MemberEmailStatus;
(function (MemberEmailStatus) {
    MemberEmailStatus["NOT_DELIVERED"] = "notDelivered";
    MemberEmailStatus["SENT"] = "sent";
    MemberEmailStatus["SPAMMED"] = "spammed";
    MemberEmailStatus["VERIFIED"] = "verified";
})(MemberEmailStatus || (MemberEmailStatus = {}));
var MemberInvitationStatus;
(function (MemberInvitationStatus) {
    MemberInvitationStatus["ACCEPTED"] = "accepted";
    MemberInvitationStatus["DELIVERED"] = "delivered";
    MemberInvitationStatus["NOT_DELIVERED"] = "notDelivered";
    MemberInvitationStatus["NOT_SENT"] = "notSent";
    MemberInvitationStatus["REJECTED"] = "rejected";
    MemberInvitationStatus["SENT"] = "sent";
    MemberInvitationStatus["SPAMMED"] = "spammed";
})(MemberInvitationStatus || (MemberInvitationStatus = {}));
var MemberListFilterByOperator;
(function (MemberListFilterByOperator) {
    MemberListFilterByOperator["CONTAINS"] = "contains";
    MemberListFilterByOperator["EQUALS"] = "equals";
    MemberListFilterByOperator["GT"] = "gt";
    MemberListFilterByOperator["GTE"] = "gte";
    MemberListFilterByOperator["LT"] = "lt";
    MemberListFilterByOperator["LTE"] = "lte";
    MemberListFilterByOperator["NOT"] = "not";
})(MemberListFilterByOperator || (MemberListFilterByOperator = {}));
var MemberStatus;
(function (MemberStatus) {
    MemberStatus["BLOCKED"] = "BLOCKED";
    MemberStatus["DELETED"] = "DELETED";
    MemberStatus["REMOVED"] = "REMOVED";
    MemberStatus["UNVERIFIED"] = "UNVERIFIED";
    MemberStatus["VERIFIED"] = "VERIFIED";
})(MemberStatus || (MemberStatus = {}));
var MemberStatusInput;
(function (MemberStatusInput) {
    MemberStatusInput["BLOCKED"] = "BLOCKED";
    MemberStatusInput["UNVERIFIED"] = "UNVERIFIED";
    MemberStatusInput["VERIFIED"] = "VERIFIED";
})(MemberStatusInput || (MemberStatusInput = {}));
var ModerationEntityType;
(function (ModerationEntityType) {
    ModerationEntityType["MEMBER"] = "MEMBER";
    ModerationEntityType["POST"] = "POST";
})(ModerationEntityType || (ModerationEntityType = {}));
var ModerationStatus;
(function (ModerationStatus) {
    ModerationStatus["ACCEPTED"] = "ACCEPTED";
    ModerationStatus["REJECTED"] = "REJECTED";
    ModerationStatus["REVIEW"] = "REVIEW";
})(ModerationStatus || (ModerationStatus = {}));
var NavigationItemType;
(function (NavigationItemType) {
    NavigationItemType["PRIMARY_BUTTON"] = "PRIMARY_BUTTON";
    NavigationItemType["PRIMARY_LINK"] = "PRIMARY_LINK";
    NavigationItemType["SECONDARY_BUTTON"] = "SECONDARY_BUTTON";
    NavigationItemType["TEXT_LINK"] = "TEXT_LINK";
})(NavigationItemType || (NavigationItemType = {}));
var NetworkIndustryType;
(function (NetworkIndustryType) {
    NetworkIndustryType["BLOGGER_COACH_CREATOR"] = "BloggerCoachCreator";
    NetworkIndustryType["CONSULTING_AND_AGENCY"] = "ConsultingAndAgency";
    NetworkIndustryType["ECOMERCE_AND_RETAIL"] = "EcomerceAndRetail";
    NetworkIndustryType["ENTERTAINMENT_AND_EVENTS"] = "EntertainmentAndEvents";
    NetworkIndustryType["FINANCIAN_SERVICES"] = "FinancianServices";
    NetworkIndustryType["HEALTHCARE"] = "Healthcare";
    NetworkIndustryType["INTERNET_AND_ONLINE_SERVICE"] = "InternetAndOnlineService";
    NetworkIndustryType["MEDIA_AND_PUBLISHING"] = "MediaAndPublishing";
    NetworkIndustryType["NON_PROFIT_AND_ASSOCIATION"] = "NonProfitAndAssociation";
    NetworkIndustryType["ONLINE_TRAINING_AND_EDUCATION"] = "OnlineTrainingAndEducation";
    NetworkIndustryType["OTHER"] = "Other";
    NetworkIndustryType["SOFTWARE_AND_SAAS"] = "SoftwareAndSaas";
})(NetworkIndustryType || (NetworkIndustryType = {}));
var NetworkLandingPage;
(function (NetworkLandingPage) {
    NetworkLandingPage["EXPLORE"] = "EXPLORE";
    NetworkLandingPage["FEED"] = "FEED";
    NetworkLandingPage["SPACES"] = "SPACES";
})(NetworkLandingPage || (NetworkLandingPage = {}));
var NetworkMembership;
(function (NetworkMembership) {
    NetworkMembership["INVITE_ONLY"] = "inviteOnly";
    NetworkMembership["OPEN"] = "open";
})(NetworkMembership || (NetworkMembership = {}));
var NetworkPasswordComplexity;
(function (NetworkPasswordComplexity) {
    NetworkPasswordComplexity["COMPLEX"] = "Complex";
    NetworkPasswordComplexity["SIMPLE"] = "Simple";
    NetworkPasswordComplexity["STANDARD"] = "Standard";
})(NetworkPasswordComplexity || (NetworkPasswordComplexity = {}));
var NetworkPrimaryMembersType;
(function (NetworkPrimaryMembersType) {
    NetworkPrimaryMembersType["CUSTOMERS"] = "Customers";
    NetworkPrimaryMembersType["EMPLOYEES"] = "Employees";
    NetworkPrimaryMembersType["MEMBERS"] = "Members";
    NetworkPrimaryMembersType["OTHER"] = "Other";
    NetworkPrimaryMembersType["STUDENTS"] = "Students";
})(NetworkPrimaryMembersType || (NetworkPrimaryMembersType = {}));
var NetworkReleaseChannelType;
(function (NetworkReleaseChannelType) {
    NetworkReleaseChannelType["EDGE"] = "edge";
    NetworkReleaseChannelType["STABLE"] = "stable";
})(NetworkReleaseChannelType || (NetworkReleaseChannelType = {}));
var NetworkStatus;
(function (NetworkStatus) {
    NetworkStatus["ARCHIVED"] = "archived";
    NetworkStatus["PUBLISHED"] = "published";
    NetworkStatus["UNPUBLISHED"] = "unpublished";
})(NetworkStatus || (NetworkStatus = {}));
var NetworkStatusChangedBy;
(function (NetworkStatusChangedBy) {
    NetworkStatusChangedBy["ADMIN"] = "admin";
    NetworkStatusChangedBy["SUPPORT"] = "support";
    NetworkStatusChangedBy["SYSTEM"] = "system";
})(NetworkStatusChangedBy || (NetworkStatusChangedBy = {}));
var NetworkStatusReason;
(function (NetworkStatusReason) {
    NetworkStatusReason["MEMBER_CAPACITY_EXCEEDED"] = "memberCapacityExceeded";
    NetworkStatusReason["NETWORK_CREATED"] = "networkCreated";
    NetworkStatusReason["NETWORK_LOCK_LIFTED"] = "networkLockLifted";
    NetworkStatusReason["SEATS_CAPACITY_EXCEEDED"] = "seatsCapacityExceeded";
})(NetworkStatusReason || (NetworkStatusReason = {}));
var NetworkTimeframeType;
(function (NetworkTimeframeType) {
    NetworkTimeframeType["FEW_MONTHS"] = "FewMonths";
    NetworkTimeframeType["FEW_WEEKS"] = "FewWeeks";
    NetworkTimeframeType["NOT_SURE"] = "NotSure";
    NetworkTimeframeType["VERY_SOON"] = "VerySoon";
})(NetworkTimeframeType || (NetworkTimeframeType = {}));
var NetworkVisibility;
(function (NetworkVisibility) {
    NetworkVisibility["PRIVATE"] = "private";
    NetworkVisibility["PUBLIC"] = "public";
})(NetworkVisibility || (NetworkVisibility = {}));
var NotificationChannel;
(function (NotificationChannel) {
    NotificationChannel["DESKTOP"] = "DESKTOP";
    NotificationChannel["EMAIL"] = "EMAIL";
    NotificationChannel["IN_APP"] = "IN_APP";
})(NotificationChannel || (NotificationChannel = {}));
var NotificationReason;
(function (NotificationReason) {
    NotificationReason["NETWORK_ADMIN"] = "NETWORK_ADMIN";
    NotificationReason["NETWORK_SUBSCRIPTION"] = "NETWORK_SUBSCRIPTION";
    NotificationReason["POST_AUTHOR"] = "POST_AUTHOR";
    NotificationReason["POST_SUBSCRIPTION"] = "POST_SUBSCRIPTION";
    NotificationReason["SPACE_ADMIN"] = "SPACE_ADMIN";
    NotificationReason["SPACE_SUBSCRIPTION"] = "SPACE_SUBSCRIPTION";
})(NotificationReason || (NotificationReason = {}));
var NotificationVerb;
(function (NotificationVerb) {
    NotificationVerb["COMMENT_CREATED"] = "COMMENT_CREATED";
    NotificationVerb["COMMENT_DELETED"] = "COMMENT_DELETED";
    NotificationVerb["COMMENT_UPDATED"] = "COMMENT_UPDATED";
    NotificationVerb["JOIN_REQUEST_STATUS_UPDATED"] = "JOIN_REQUEST_STATUS_UPDATED";
    NotificationVerb["MEMBER_MENTIONED"] = "MEMBER_MENTIONED";
    NotificationVerb["POST_CREATED"] = "POST_CREATED";
    NotificationVerb["POST_DELETED"] = "POST_DELETED";
    NotificationVerb["POST_FOLLOWED"] = "POST_FOLLOWED";
    NotificationVerb["POST_UPDATED"] = "POST_UPDATED";
    NotificationVerb["REACTION_CREATED"] = "REACTION_CREATED";
    NotificationVerb["REPLY_CREATED"] = "REPLY_CREATED";
    NotificationVerb["SPACE_MEMBER_ADDED"] = "SPACE_MEMBER_ADDED";
})(NotificationVerb || (NotificationVerb = {}));
var NumberTypeOptions;
(function (NumberTypeOptions) {
    NumberTypeOptions["INTEGER"] = "integer";
    NumberTypeOptions["NUMBER"] = "number";
})(NumberTypeOptions || (NumberTypeOptions = {}));
var PageSeoTagType;
(function (PageSeoTagType) {
    PageSeoTagType["LINK"] = "LINK";
    PageSeoTagType["META"] = "META";
    PageSeoTagType["TITLE"] = "TITLE";
})(PageSeoTagType || (PageSeoTagType = {}));
var PayloadType;
(function (PayloadType) {
    PayloadType["JOIN_REQUEST_STATUS"] = "JOIN_REQUEST_STATUS";
    PayloadType["MEMBER"] = "MEMBER";
    PayloadType["NETWORK"] = "NETWORK";
    PayloadType["POST"] = "POST";
    PayloadType["REACTION"] = "REACTION";
    PayloadType["SPACE"] = "SPACE";
})(PayloadType || (PayloadType = {}));
var PermissionContext;
(function (PermissionContext) {
    PermissionContext["MEMBER"] = "MEMBER";
    PermissionContext["NETWORK"] = "NETWORK";
    PermissionContext["POST"] = "POST";
    PermissionContext["SPACE"] = "SPACE";
})(PermissionContext || (PermissionContext = {}));
var PinnedInto;
(function (PinnedInto) {
    PinnedInto["MEMBER"] = "member";
    PinnedInto["NETWORK"] = "network";
    PinnedInto["POST"] = "post";
    PinnedInto["SPACE"] = "space";
})(PinnedInto || (PinnedInto = {}));
var PlanName;
(function (PlanName) {
    PlanName["BASIC"] = "basic";
    PlanName["ENTERPRISE"] = "enterprise";
    PlanName["PLUS"] = "plus";
    PlanName["PREMIUM"] = "premium";
})(PlanName || (PlanName = {}));
var PlanRenewalType;
(function (PlanRenewalType) {
    PlanRenewalType["MONTH"] = "month";
    PlanRenewalType["YEAR"] = "year";
})(PlanRenewalType || (PlanRenewalType = {}));
var PostFieldsEnum;
(function (PostFieldsEnum) {
    PostFieldsEnum["BOOLEAN1"] = "boolean1";
    PostFieldsEnum["BOOLEAN2"] = "boolean2";
    PostFieldsEnum["BOOLEAN3"] = "boolean3";
    PostFieldsEnum["BOOLEAN4"] = "boolean4";
    PostFieldsEnum["BOOLEAN5"] = "boolean5";
    PostFieldsEnum["DATE1"] = "date1";
    PostFieldsEnum["DATE2"] = "date2";
    PostFieldsEnum["DATE3"] = "date3";
    PostFieldsEnum["DATE4"] = "date4";
    PostFieldsEnum["DATE5"] = "date5";
    PostFieldsEnum["HTML1"] = "html1";
    PostFieldsEnum["HTML2"] = "html2";
    PostFieldsEnum["HTML3"] = "html3";
    PostFieldsEnum["HTML4"] = "html4";
    PostFieldsEnum["HTML5"] = "html5";
    PostFieldsEnum["HTML6"] = "html6";
    PostFieldsEnum["HTML7"] = "html7";
    PostFieldsEnum["HTML8"] = "html8";
    PostFieldsEnum["HTML9"] = "html9";
    PostFieldsEnum["HTML10"] = "html10";
    PostFieldsEnum["IMAGE1"] = "image1";
    PostFieldsEnum["IMAGE2"] = "image2";
    PostFieldsEnum["IMAGE3"] = "image3";
    PostFieldsEnum["IMAGE4"] = "image4";
    PostFieldsEnum["IMAGE5"] = "image5";
    PostFieldsEnum["NUMBER1"] = "number1";
    PostFieldsEnum["NUMBER2"] = "number2";
    PostFieldsEnum["NUMBER3"] = "number3";
    PostFieldsEnum["NUMBER4"] = "number4";
    PostFieldsEnum["NUMBER5"] = "number5";
    PostFieldsEnum["NUMBER_ARRAY1"] = "numberArray1";
    PostFieldsEnum["NUMBER_ARRAY2"] = "numberArray2";
    PostFieldsEnum["NUMBER_ARRAY3"] = "numberArray3";
    PostFieldsEnum["NUMBER_ARRAY4"] = "numberArray4";
    PostFieldsEnum["NUMBER_ARRAY5"] = "numberArray5";
    PostFieldsEnum["TEXT1"] = "text1";
    PostFieldsEnum["TEXT2"] = "text2";
    PostFieldsEnum["TEXT3"] = "text3";
    PostFieldsEnum["TEXT4"] = "text4";
    PostFieldsEnum["TEXT5"] = "text5";
    PostFieldsEnum["TEXT6"] = "text6";
    PostFieldsEnum["TEXT7"] = "text7";
    PostFieldsEnum["TEXT8"] = "text8";
    PostFieldsEnum["TEXT9"] = "text9";
    PostFieldsEnum["TEXT10"] = "text10";
    PostFieldsEnum["TEXT_ARRAY1"] = "textArray1";
    PostFieldsEnum["TEXT_ARRAY2"] = "textArray2";
    PostFieldsEnum["TEXT_ARRAY3"] = "textArray3";
    PostFieldsEnum["TEXT_ARRAY4"] = "textArray4";
    PostFieldsEnum["TEXT_ARRAY5"] = "textArray5";
})(PostFieldsEnum || (PostFieldsEnum = {}));
var PostListFilterByEnum;
(function (PostListFilterByEnum) {
    PostListFilterByEnum["BOOLEAN1"] = "boolean1";
    PostListFilterByEnum["BOOLEAN2"] = "boolean2";
    PostListFilterByEnum["BOOLEAN3"] = "boolean3";
    PostListFilterByEnum["BOOLEAN4"] = "boolean4";
    PostListFilterByEnum["BOOLEAN5"] = "boolean5";
    PostListFilterByEnum["CREATED_AT"] = "createdAt";
    PostListFilterByEnum["DATE1"] = "date1";
    PostListFilterByEnum["DATE2"] = "date2";
    PostListFilterByEnum["DATE3"] = "date3";
    PostListFilterByEnum["DATE4"] = "date4";
    PostListFilterByEnum["DATE5"] = "date5";
    PostListFilterByEnum["NUMBER1"] = "number1";
    PostListFilterByEnum["NUMBER2"] = "number2";
    PostListFilterByEnum["NUMBER3"] = "number3";
    PostListFilterByEnum["NUMBER4"] = "number4";
    PostListFilterByEnum["NUMBER5"] = "number5";
    PostListFilterByEnum["UPDATED_AT"] = "updatedAt";
})(PostListFilterByEnum || (PostListFilterByEnum = {}));
var PostListFilterByOperator;
(function (PostListFilterByOperator) {
    PostListFilterByOperator["EQUALS"] = "equals";
    PostListFilterByOperator["GT"] = "gt";
    PostListFilterByOperator["GTE"] = "gte";
    PostListFilterByOperator["IN"] = "in";
    PostListFilterByOperator["LT"] = "lt";
    PostListFilterByOperator["LTE"] = "lte";
    PostListFilterByOperator["NOT"] = "not";
})(PostListFilterByOperator || (PostListFilterByOperator = {}));
var PostListOrderByEnum;
(function (PostListOrderByEnum) {
    PostListOrderByEnum["BOOLEAN1"] = "boolean1";
    PostListOrderByEnum["BOOLEAN2"] = "boolean2";
    PostListOrderByEnum["BOOLEAN3"] = "boolean3";
    PostListOrderByEnum["BOOLEAN4"] = "boolean4";
    PostListOrderByEnum["BOOLEAN5"] = "boolean5";
    PostListOrderByEnum["CREATED_AT"] = "createdAt";
    PostListOrderByEnum["DATE1"] = "date1";
    PostListOrderByEnum["DATE2"] = "date2";
    PostListOrderByEnum["DATE3"] = "date3";
    PostListOrderByEnum["DATE4"] = "date4";
    PostListOrderByEnum["DATE5"] = "date5";
    PostListOrderByEnum["NEGATIVE_REACTIONS_COUNT"] = "negativeReactionsCount";
    PostListOrderByEnum["NUMBER1"] = "number1";
    PostListOrderByEnum["NUMBER2"] = "number2";
    PostListOrderByEnum["NUMBER3"] = "number3";
    PostListOrderByEnum["NUMBER4"] = "number4";
    PostListOrderByEnum["NUMBER5"] = "number5";
    PostListOrderByEnum["POSITIVE_REACTIONS_COUNT"] = "positiveReactionsCount";
    PostListOrderByEnum["REACTIONS_COUNT"] = "reactionsCount";
    PostListOrderByEnum["REPLIES_COUNT"] = "repliesCount";
    PostListOrderByEnum["TEXT1"] = "text1";
    PostListOrderByEnum["TEXT2"] = "text2";
    PostListOrderByEnum["TEXT3"] = "text3";
    PostListOrderByEnum["TEXT4"] = "text4";
    PostListOrderByEnum["TEXT5"] = "text5";
    PostListOrderByEnum["TOTAL_REPLIES_COUNT"] = "totalRepliesCount";
    PostListOrderByEnum["UPDATED_AT"] = "updatedAt";
})(PostListOrderByEnum || (PostListOrderByEnum = {}));
var PostMappingTypeEnum;
(function (PostMappingTypeEnum) {
    PostMappingTypeEnum["BOOLEAN"] = "boolean";
    PostMappingTypeEnum["DATE"] = "date";
    PostMappingTypeEnum["HTML"] = "html";
    PostMappingTypeEnum["IMAGE"] = "image";
    PostMappingTypeEnum["NUMBER"] = "number";
    PostMappingTypeEnum["NUMBER_ARRAY"] = "numberArray";
    PostMappingTypeEnum["TEXT"] = "text";
    PostMappingTypeEnum["TEXT_ARRAY"] = "textArray";
})(PostMappingTypeEnum || (PostMappingTypeEnum = {}));
var PostStatus;
(function (PostStatus) {
    PostStatus["ARCHIVED"] = "ARCHIVED";
    PostStatus["BLOCKED"] = "BLOCKED";
    PostStatus["DELETED"] = "DELETED";
    PostStatus["DRAFTED"] = "DRAFTED";
    PostStatus["PUBLISHED"] = "PUBLISHED";
})(PostStatus || (PostStatus = {}));
var PostTypeContext;
(function (PostTypeContext) {
    PostTypeContext["POST"] = "post";
    PostTypeContext["REPLY"] = "reply";
})(PostTypeContext || (PostTypeContext = {}));
var PrimaryScopes;
(function (PrimaryScopes) {
    PrimaryScopes["ALL_ACCESS"] = "ALL_ACCESS";
    PrimaryScopes["ASSIGN_BADGE"] = "ASSIGN_BADGE";
    PrimaryScopes["IMPERSONATE_MEMBER"] = "IMPERSONATE_MEMBER";
    PrimaryScopes["UPDATE_BADGE"] = "UPDATE_BADGE";
    PrimaryScopes["UPDATE_NETWORK"] = "UPDATE_NETWORK";
    PrimaryScopes["VIEW_APP"] = "VIEW_APP";
    PrimaryScopes["VIEW_APP_INSTALLATION"] = "VIEW_APP_INSTALLATION";
    PrimaryScopes["VIEW_BILLING_SUBSCRIPTION"] = "VIEW_BILLING_SUBSCRIPTION";
    PrimaryScopes["VIEW_IMPORT_REQUEST"] = "VIEW_IMPORT_REQUEST";
    PrimaryScopes["VIEW_MEMBER"] = "VIEW_MEMBER";
    PrimaryScopes["VIEW_MEMBER_INVITATION"] = "VIEW_MEMBER_INVITATION";
    PrimaryScopes["VIEW_MODERATION"] = "VIEW_MODERATION";
    PrimaryScopes["VIEW_NETWORK"] = "VIEW_NETWORK";
    PrimaryScopes["VIEW_NETWORK_PLAN"] = "VIEW_NETWORK_PLAN";
    PrimaryScopes["VIEW_ORGANIZATION"] = "VIEW_ORGANIZATION";
    PrimaryScopes["VIEW_POST"] = "VIEW_POST";
    PrimaryScopes["VIEW_ROLE"] = "VIEW_ROLE";
    PrimaryScopes["VIEW_SPACE"] = "VIEW_SPACE";
    PrimaryScopes["VIEW_SPACE_COLLECTION"] = "VIEW_SPACE_COLLECTION";
    PrimaryScopes["VIEW_SPACE_JOIN_REQUEST"] = "VIEW_SPACE_JOIN_REQUEST";
    PrimaryScopes["VIEW_SPACE_MEMBERSHIP"] = "VIEW_SPACE_MEMBERSHIP";
    PrimaryScopes["VIEW_SPACE_ROLE"] = "VIEW_SPACE_ROLE";
    PrimaryScopes["VIEW_SSO"] = "VIEW_SSO";
    PrimaryScopes["VIEW_SSO_MEMBERSHIP"] = "VIEW_SSO_MEMBERSHIP";
    PrimaryScopes["VIEW_SYNC_EVENT"] = "VIEW_SYNC_EVENT";
    PrimaryScopes["VIEW_TRACKER"] = "VIEW_TRACKER";
})(PrimaryScopes || (PrimaryScopes = {}));
var ReactionType;
(function (ReactionType) {
    ReactionType["EMOJI_BASE"] = "EMOJI_BASE";
    ReactionType["LIKE_BASE"] = "LIKE_BASE";
    ReactionType["VOTE_BASE"] = "VOTE_BASE";
})(ReactionType || (ReactionType = {}));
var RelationTypeOptions;
(function (RelationTypeOptions) {
    RelationTypeOptions["MEDIA"] = "media";
    RelationTypeOptions["MEMBER"] = "member";
    RelationTypeOptions["POST"] = "post";
    RelationTypeOptions["TAG"] = "tag";
})(RelationTypeOptions || (RelationTypeOptions = {}));
var ReportCategory;
(function (ReportCategory) {
    ReportCategory["HARASSMENT"] = "HARASSMENT";
    ReportCategory["MISINFORMATION"] = "MISINFORMATION";
    ReportCategory["NUDITY"] = "NUDITY";
    ReportCategory["SPAM"] = "SPAM";
    ReportCategory["SUICIDE"] = "SUICIDE";
    ReportCategory["TERRORISM"] = "TERRORISM";
    ReportCategory["VIOLENCE"] = "VIOLENCE";
})(ReportCategory || (ReportCategory = {}));
var ReportDataType;
(function (ReportDataType) {
    ReportDataType["CHART_DATA"] = "chartData";
    ReportDataType["ENTITY_REPORT"] = "entityReport";
    ReportDataType["INT_VALUE"] = "intValue";
    ReportDataType["STRING_VALUE"] = "stringValue";
})(ReportDataType || (ReportDataType = {}));
var ReportSlug;
(function (ReportSlug) {
    ReportSlug["ACTIVE_MEMBERS"] = "activeMembers";
    ReportSlug["AVERAGE_DAILY_ACTIVE_MEMBERS"] = "averageDailyActiveMembers";
    ReportSlug["HIGHLIGHTS"] = "highlights";
    ReportSlug["MEMBER_SCORE"] = "memberScore";
    ReportSlug["NEW_MEMBERS_OVER_TIME"] = "newMembersOverTime";
    ReportSlug["NEW_POSTS"] = "newPosts";
    ReportSlug["NEW_REACTIONS"] = "newReactions";
    ReportSlug["NEW_REPLIES"] = "newReplies";
    ReportSlug["POPULAR_DAYS_OF_WEEK"] = "popularDaysOfWeek";
    ReportSlug["POPULAR_HOURS_OF_DAY"] = "popularHoursOfDay";
    ReportSlug["POSTS_V_SREPLIES"] = "postsVSreplies";
    ReportSlug["TOP_MEMBERS"] = "topMembers";
    ReportSlug["TOP_POSTS"] = "topPosts";
    ReportSlug["TOP_SPACES"] = "topSpaces";
    ReportSlug["TOTAL_MEMBERS"] = "totalMembers";
    ReportSlug["TOTAL_POSTS"] = "totalPosts";
    ReportSlug["TOTAL_REACTIONS"] = "totalReactions";
    ReportSlug["TOTAL_REPLIES"] = "totalReplies";
    ReportSlug["TOTAL_VISITORS"] = "totalVisitors";
    ReportSlug["TRENDING_TAGS"] = "trendingTags";
})(ReportSlug || (ReportSlug = {}));
var ReportTimeFrame;
(function (ReportTimeFrame) {
    ReportTimeFrame["ALL_TIME"] = "allTime";
    ReportTimeFrame["LAST_CALENDAR_QUARTER"] = "lastCalendarQuarter";
    ReportTimeFrame["LAST_CALENDAR_YEAR"] = "lastCalendarYear";
    ReportTimeFrame["LAST_MONTH"] = "lastMonth";
    ReportTimeFrame["LAST_NINETY_DAYS"] = "lastNinetyDays";
    ReportTimeFrame["LAST_SEVEN_DAYS"] = "lastSevenDays";
    ReportTimeFrame["LAST_THIRTY_DAYS"] = "lastThirtyDays";
    ReportTimeFrame["LAST_TWELVE_MONTH"] = "lastTwelveMonth";
    ReportTimeFrame["LAST_WEEK"] = "lastWeek";
    ReportTimeFrame["TODAY"] = "today";
    ReportTimeFrame["YESTERDAY"] = "yesterday";
})(ReportTimeFrame || (ReportTimeFrame = {}));
var ReportableEntityType;
(function (ReportableEntityType) {
    ReportableEntityType["MEMBER"] = "member";
    ReportableEntityType["POST"] = "post";
    ReportableEntityType["SPACE"] = "space";
    ReportableEntityType["TOPIC"] = "topic";
})(ReportableEntityType || (ReportableEntityType = {}));
var RichTextTypeOptions;
(function (RichTextTypeOptions) {
    RichTextTypeOptions["HTML"] = "html";
    RichTextTypeOptions["MARKUP"] = "markup";
})(RichTextTypeOptions || (RichTextTypeOptions = {}));
var RoleListOrderByEnum;
(function (RoleListOrderByEnum) {
    RoleListOrderByEnum["CREATED_AT"] = "CREATED_AT";
    RoleListOrderByEnum["UPDATED_AT"] = "UPDATED_AT";
})(RoleListOrderByEnum || (RoleListOrderByEnum = {}));
var RoleType;
(function (RoleType) {
    RoleType["ADMIN"] = "admin";
    RoleType["GUEST"] = "guest";
    RoleType["MEMBER"] = "member";
    RoleType["MODERATOR"] = "moderator";
})(RoleType || (RoleType = {}));
var SearchEntityType;
(function (SearchEntityType) {
    SearchEntityType["MEMBER"] = "member";
    SearchEntityType["POST"] = "post";
    SearchEntityType["SPACE"] = "space";
})(SearchEntityType || (SearchEntityType = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
var SpaceJoinRequestStatus;
(function (SpaceJoinRequestStatus) {
    SpaceJoinRequestStatus["COMPLETED"] = "COMPLETED";
    SpaceJoinRequestStatus["DECLINED"] = "DECLINED";
    SpaceJoinRequestStatus["PENDING"] = "PENDING";
})(SpaceJoinRequestStatus || (SpaceJoinRequestStatus = {}));
var SpaceListOrderByEnum;
(function (SpaceListOrderByEnum) {
    SpaceListOrderByEnum["CREATED_AT"] = "CREATED_AT";
    SpaceListOrderByEnum["CUSTOM_ORDERING_INDEX"] = "CUSTOM_ORDERING_INDEX";
    SpaceListOrderByEnum["UPDATED_AT"] = "UPDATED_AT";
})(SpaceListOrderByEnum || (SpaceListOrderByEnum = {}));
var SpaceMemberListOrderByEnum;
(function (SpaceMemberListOrderByEnum) {
    SpaceMemberListOrderByEnum["CREATED_AT"] = "CREATED_AT";
    SpaceMemberListOrderByEnum["UPDATED_AT"] = "UPDATED_AT";
})(SpaceMemberListOrderByEnum || (SpaceMemberListOrderByEnum = {}));
var SpaceMembershipStatus;
(function (SpaceMembershipStatus) {
    SpaceMembershipStatus["JOINED"] = "joined";
    SpaceMembershipStatus["NOT_JOINED"] = "notJoined";
    SpaceMembershipStatus["REQUESTED"] = "requested";
})(SpaceMembershipStatus || (SpaceMembershipStatus = {}));
var SpaceNotificationPreference;
(function (SpaceNotificationPreference) {
    SpaceNotificationPreference["ALL"] = "ALL";
    SpaceNotificationPreference["NEW_POST"] = "NEW_POST";
    SpaceNotificationPreference["NONE"] = "NONE";
})(SpaceNotificationPreference || (SpaceNotificationPreference = {}));
var SpaceRoleListOrderByEnum;
(function (SpaceRoleListOrderByEnum) {
    SpaceRoleListOrderByEnum["CREATED_AT"] = "CREATED_AT";
    SpaceRoleListOrderByEnum["UPDATED_AT"] = "UPDATED_AT";
})(SpaceRoleListOrderByEnum || (SpaceRoleListOrderByEnum = {}));
var SpaceRoleType;
(function (SpaceRoleType) {
    SpaceRoleType["ADMIN"] = "admin";
    SpaceRoleType["MEMBER"] = "member";
})(SpaceRoleType || (SpaceRoleType = {}));
var SpaceType;
(function (SpaceType) {
    SpaceType["BROADCAST"] = "Broadcast";
    SpaceType["ENTITY"] = "Entity";
    SpaceType["GROUP"] = "Group";
    SpaceType["PAGE"] = "Page";
    SpaceType["PRIVATE_MESSAGE"] = "PrivateMessage";
})(SpaceType || (SpaceType = {}));
var SsoProvider;
(function (SsoProvider) {
    SsoProvider["AUTH0"] = "auth0";
    SsoProvider["CUSTOM"] = "custom";
    SsoProvider["MEMBERFUL"] = "memberful";
    SsoProvider["OKTA"] = "okta";
    SsoProvider["OUTSETA"] = "outseta";
    SsoProvider["WORDPRESS"] = "wordpress";
})(SsoProvider || (SsoProvider = {}));
var SsoStatus;
(function (SsoStatus) {
    SsoStatus["DISABLE"] = "disable";
    SsoStatus["ENABLE"] = "enable";
})(SsoStatus || (SsoStatus = {}));
var SsoType;
(function (SsoType) {
    SsoType["FACEBOOK"] = "facebook";
    SsoType["GOOGLE"] = "google";
    SsoType["JWT"] = "jwt";
    SsoType["LINKEDIN"] = "linkedin";
    SsoType["OAUTH2"] = "oauth2";
})(SsoType || (SsoType = {}));
var StoreItemStanding;
(function (StoreItemStanding) {
    StoreItemStanding["OFFICIAL"] = "OFFICIAL";
    StoreItemStanding["REGULAR"] = "REGULAR";
    StoreItemStanding["VERIFIED"] = "VERIFIED";
})(StoreItemStanding || (StoreItemStanding = {}));
var StoreItemStatus;
(function (StoreItemStatus) {
    StoreItemStatus["DELETED"] = "DELETED";
    StoreItemStatus["PRIVATE"] = "PRIVATE";
    StoreItemStatus["PUBLIC"] = "PUBLIC";
})(StoreItemStatus || (StoreItemStatus = {}));
var SubscriptionStatus;
(function (SubscriptionStatus) {
    SubscriptionStatus["ACTIVE"] = "active";
    SubscriptionStatus["CANCELED"] = "canceled";
    SubscriptionStatus["FAILED"] = "failed";
    SubscriptionStatus["INCOMPLETE"] = "incomplete";
    SubscriptionStatus["INCOMPLETE_EXPIRED"] = "incomplete_expired";
    SubscriptionStatus["PAST_DUE"] = "past_due";
    SubscriptionStatus["TRIALING"] = "trialing";
    SubscriptionStatus["UNPAID"] = "unpaid";
})(SubscriptionStatus || (SubscriptionStatus = {}));
var TagFilterType;
(function (TagFilterType) {
    TagFilterType["BLACKLIST"] = "BLACKLIST";
    TagFilterType["WHITELIST"] = "WHITELIST";
})(TagFilterType || (TagFilterType = {}));
var TagListOrderByEnum;
(function (TagListOrderByEnum) {
    TagListOrderByEnum["CREATED_AT"] = "CREATED_AT";
    TagListOrderByEnum["UPDATED_AT"] = "UPDATED_AT";
})(TagListOrderByEnum || (TagListOrderByEnum = {}));
var TemplateEntityType;
(function (TemplateEntityType) {
    TemplateEntityType["POST"] = "Post";
    TemplateEntityType["POST_TYPE"] = "PostType";
    TemplateEntityType["SPACE"] = "Space";
    TemplateEntityType["SPACE_POST_TYPE"] = "SpacePostType";
    TemplateEntityType["TAG"] = "Tag";
})(TemplateEntityType || (TemplateEntityType = {}));
var TextTypeOptions;
(function (TextTypeOptions) {
    TextTypeOptions["FULL_TEXT"] = "fullText";
    TextTypeOptions["SHORT_TEXT"] = "shortText";
})(TextTypeOptions || (TextTypeOptions = {}));
var ThemeStatus;
(function (ThemeStatus) {
    ThemeStatus["DRAFT"] = "draft";
    ThemeStatus["PUBLISHED"] = "published";
})(ThemeStatus || (ThemeStatus = {}));
var TopNavigationAlignment;
(function (TopNavigationAlignment) {
    TopNavigationAlignment["CENTER"] = "CENTER";
    TopNavigationAlignment["LEFT"] = "LEFT";
    TopNavigationAlignment["RIGHT"] = "RIGHT";
})(TopNavigationAlignment || (TopNavigationAlignment = {}));
var UnauthorizedReason;
(function (UnauthorizedReason) {
    UnauthorizedReason["ACCESS"] = "ACCESS";
    UnauthorizedReason["PLAN"] = "PLAN";
})(UnauthorizedReason || (UnauthorizedReason = {}));
var UnsubscribeTokenContext;
(function (UnsubscribeTokenContext) {
    UnsubscribeTokenContext["ALL"] = "ALL";
    UnsubscribeTokenContext["MEMBER"] = "MEMBER";
    UnsubscribeTokenContext["MENTIONS"] = "MENTIONS";
    UnsubscribeTokenContext["POST"] = "POST";
    UnsubscribeTokenContext["REACTIONS"] = "REACTIONS";
    UnsubscribeTokenContext["SPACE"] = "SPACE";
})(UnsubscribeTokenContext || (UnsubscribeTokenContext = {}));
var UseTemplateRequestStatus;
(function (UseTemplateRequestStatus) {
    UseTemplateRequestStatus["FAILED"] = "Failed";
    UseTemplateRequestStatus["IN_PROGRESS"] = "InProgress";
    UseTemplateRequestStatus["SUCCEEDED"] = "Succeeded";
})(UseTemplateRequestStatus || (UseTemplateRequestStatus = {}));
var VatType;
(function (VatType) {
    VatType["AE_TRN"] = "ae_trn";
    VatType["AU_ABN"] = "au_abn";
    VatType["AU_ARN"] = "au_arn";
    VatType["BR_CNPJ"] = "br_cnpj";
    VatType["BR_CPF"] = "br_cpf";
    VatType["CA_BN"] = "ca_bn";
    VatType["CA_GST_HST"] = "ca_gst_hst";
    VatType["CA_PST_BC"] = "ca_pst_bc";
    VatType["CA_PST_MB"] = "ca_pst_mb";
    VatType["CA_PST_SK"] = "ca_pst_sk";
    VatType["CA_QST"] = "ca_qst";
    VatType["CH_VAT"] = "ch_vat";
    VatType["CL_TIN"] = "cl_tin";
    VatType["ES_CIF"] = "es_cif";
    VatType["EU_VAT"] = "eu_vat";
    VatType["GB_VAT"] = "gb_vat";
    VatType["HK_BR"] = "hk_br";
    VatType["ID_NPWP"] = "id_npwp";
    VatType["IL_VAT"] = "il_vat";
    VatType["IN_GST"] = "in_gst";
    VatType["JP_CN"] = "jp_cn";
    VatType["JP_RN"] = "jp_rn";
    VatType["KR_BRN"] = "kr_brn";
    VatType["LI_UID"] = "li_uid";
    VatType["MX_RFC"] = "mx_rfc";
    VatType["MY_FRP"] = "my_frp";
    VatType["MY_ITN"] = "my_itn";
    VatType["MY_SST"] = "my_sst";
    VatType["NO_VAT"] = "no_vat";
    VatType["NZ_GST"] = "nz_gst";
    VatType["RU_INN"] = "ru_inn";
    VatType["RU_KPP"] = "ru_kpp";
    VatType["SA_VAT"] = "sa_vat";
    VatType["SG_GST"] = "sg_gst";
    VatType["SG_UEN"] = "sg_uen";
    VatType["TH_VAT"] = "th_vat";
    VatType["TW_VAT"] = "tw_vat";
    VatType["US_EIN"] = "us_ein";
    VatType["ZA_VAT"] = "za_vat";
})(VatType || (VatType = {}));
var WidgetContexts;
(function (WidgetContexts) {
    WidgetContexts["MEMBER"] = "MEMBER";
    WidgetContexts["POST"] = "POST";
    WidgetContexts["SPACE"] = "SPACE";
})(WidgetContexts || (WidgetContexts = {}));
var WidgetPositions;
(function (WidgetPositions) {
    WidgetPositions["PAGE"] = "PAGE";
    WidgetPositions["SIDEBAR"] = "SIDEBAR";
})(WidgetPositions || (WidgetPositions = {}));

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get AccessGroupEntityType () { return AccessGroupEntityType; },
  get ActionStatus () { return ActionStatus; },
  get AppCollaboratorType () { return AppCollaboratorType; },
  get AppInstallationStatus () { return AppInstallationStatus; },
  get BadgeType () { return BadgeType; },
  get CollectionListOrderByEnum () { return CollectionListOrderByEnum; },
  get CustomCodePosition () { return CustomCodePosition; },
  get CustomFieldPrivacyOptions () { return CustomFieldPrivacyOptions; },
  get CustomFieldType () { return CustomFieldType; },
  get CustomFieldValidators () { return CustomFieldValidators; },
  get CustomSsoType () { return CustomSsoType; },
  get DateTypeOptions () { return DateTypeOptions; },
  get DefaultSsoType () { return DefaultSsoType; },
  get EmailStatus () { return EmailStatus; },
  get EmailType () { return EmailType; },
  get EventVerb () { return EventVerb; },
  get ExtraPropertyEntityType () { return ExtraPropertyEntityType; },
  get Filtername () { return Filtername; },
  get FlaggedType () { return FlaggedType; },
  get HighlightedTagType () { return HighlightedTagType; },
  get ImportRequestStage () { return ImportRequestStage; },
  get ImportRequestStatus () { return ImportRequestStatus; },
  get InvoiceStatus () { return InvoiceStatus; },
  get MemberEmailStatus () { return MemberEmailStatus; },
  get MemberInvitationStatus () { return MemberInvitationStatus; },
  get MemberListFilterByOperator () { return MemberListFilterByOperator; },
  get MemberStatus () { return MemberStatus; },
  get MemberStatusInput () { return MemberStatusInput; },
  get ModerationEntityType () { return ModerationEntityType; },
  get ModerationStatus () { return ModerationStatus; },
  get NavigationItemType () { return NavigationItemType; },
  get NetworkIndustryType () { return NetworkIndustryType; },
  get NetworkLandingPage () { return NetworkLandingPage; },
  get NetworkMembership () { return NetworkMembership; },
  get NetworkPasswordComplexity () { return NetworkPasswordComplexity; },
  get NetworkPrimaryMembersType () { return NetworkPrimaryMembersType; },
  get NetworkReleaseChannelType () { return NetworkReleaseChannelType; },
  get NetworkStatus () { return NetworkStatus; },
  get NetworkStatusChangedBy () { return NetworkStatusChangedBy; },
  get NetworkStatusReason () { return NetworkStatusReason; },
  get NetworkTimeframeType () { return NetworkTimeframeType; },
  get NetworkVisibility () { return NetworkVisibility; },
  get NotificationChannel () { return NotificationChannel; },
  get NotificationReason () { return NotificationReason; },
  get NotificationVerb () { return NotificationVerb; },
  get NumberTypeOptions () { return NumberTypeOptions; },
  get PageSeoTagType () { return PageSeoTagType; },
  get PayloadType () { return PayloadType; },
  get PermissionContext () { return PermissionContext; },
  get PinnedInto () { return PinnedInto; },
  get PlanName () { return PlanName; },
  get PlanRenewalType () { return PlanRenewalType; },
  get PostFieldsEnum () { return PostFieldsEnum; },
  get PostListFilterByEnum () { return PostListFilterByEnum; },
  get PostListFilterByOperator () { return PostListFilterByOperator; },
  get PostListOrderByEnum () { return PostListOrderByEnum; },
  get PostMappingTypeEnum () { return PostMappingTypeEnum; },
  get PostStatus () { return PostStatus; },
  get PostTypeContext () { return PostTypeContext; },
  get PrimaryScopes () { return PrimaryScopes; },
  get ReactionType () { return ReactionType; },
  get RelationTypeOptions () { return RelationTypeOptions; },
  get ReportCategory () { return ReportCategory; },
  get ReportDataType () { return ReportDataType; },
  get ReportSlug () { return ReportSlug; },
  get ReportTimeFrame () { return ReportTimeFrame; },
  get ReportableEntityType () { return ReportableEntityType; },
  get RichTextTypeOptions () { return RichTextTypeOptions; },
  get RoleListOrderByEnum () { return RoleListOrderByEnum; },
  get RoleType () { return RoleType; },
  get SearchEntityType () { return SearchEntityType; },
  get SortOrder () { return SortOrder; },
  get SpaceJoinRequestStatus () { return SpaceJoinRequestStatus; },
  get SpaceListOrderByEnum () { return SpaceListOrderByEnum; },
  get SpaceMemberListOrderByEnum () { return SpaceMemberListOrderByEnum; },
  get SpaceMembershipStatus () { return SpaceMembershipStatus; },
  get SpaceNotificationPreference () { return SpaceNotificationPreference; },
  get SpaceRoleListOrderByEnum () { return SpaceRoleListOrderByEnum; },
  get SpaceRoleType () { return SpaceRoleType; },
  get SpaceType () { return SpaceType; },
  get SsoProvider () { return SsoProvider; },
  get SsoStatus () { return SsoStatus; },
  get SsoType () { return SsoType; },
  get StoreItemStanding () { return StoreItemStanding; },
  get StoreItemStatus () { return StoreItemStatus; },
  get SubscriptionStatus () { return SubscriptionStatus; },
  get TagFilterType () { return TagFilterType; },
  get TagListOrderByEnum () { return TagListOrderByEnum; },
  get TemplateEntityType () { return TemplateEntityType; },
  get TextTypeOptions () { return TextTypeOptions; },
  get ThemeStatus () { return ThemeStatus; },
  get TopNavigationAlignment () { return TopNavigationAlignment; },
  get UnauthorizedReason () { return UnauthorizedReason; },
  get UnsubscribeTokenContext () { return UnsubscribeTokenContext; },
  get UseTemplateRequestStatus () { return UseTemplateRequestStatus; },
  get VatType () { return VatType; },
  get WidgetContexts () { return WidgetContexts; },
  get WidgetPositions () { return WidgetPositions; }
});

class AppClient {
    constructor(client) {
        this.client = client;
    }
    async get(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: appGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.app;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: appsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.apps;
    }
    async networkSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getAppNetworkSettingsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.getAppNetworkSettings;
    }
    async updateNetworkSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateAppNetworkSettingsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateAppNetworkSettings;
    }
    async spaceSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getAppSpaceSettingsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.getAppSpaceSettings;
    }
    async install(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: installAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.installApp;
    }
    async uninstall(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: uninstallAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.uninstallApp;
    }
    async appInstallations(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: appInstallationsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.getNetworkAppInstallations;
    }
}

class AuthClient {
    constructor(client) {
        this.client = client;
    }
    async resendVerification(accessToken) {
        const result = await this.client.authorizedRequest({
            query: resendVerificationGQLQuery(),
            customToken: accessToken,
        });
        return result.resendVerification;
    }
    async login(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: loginNetworkQuery(fields),
            variables,
        });
        return result.loginNetwork;
    }
    async logout(variables) {
        const result = await this.client.authorizedRequest({
            query: logoutMutation(),
            variables,
        });
        return result.logoutNetwork;
    }
    async authMember(fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: authMemberQuery(fields),
        });
        return result.authMember;
    }
    async ssoRedirect(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: ssoRedirectMutation(fields),
            variables,
        });
        return result.ssoRedirect;
    }
    async joinNetwork(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: joinNetworkMutation(fields),
            variables,
        });
        return result.joinNetwork;
    }
    async joinNetworkWithInvitationLink(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: joinNetworkWithInvitationLinkMutation(fields),
            variables,
        });
        return result.joinNetworkWithInvitationLink;
    }
    async joinNetworkWithToken(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: joinNetworkWithTokenMutation(fields),
            variables,
        });
        return result.joinNetworkWithToken;
    }
    async verifyMember(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: verifyMemberMutation(fields),
            variables,
        });
        return result.verifyMember;
    }
    async ssos(variables) {
        const result = await this.client.authorizedRequest({
            query: ssosQuery(),
            variables,
        });
        return result.ssos;
    }
    async sendResetPasswordEmail(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: sendResetPasswordEmailGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.sendResetPasswordEmail;
    }
    async updateJwtSso(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateJwtSsoGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateJwtSso;
    }
    async updateCustomSso(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateCustomSsoGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateCustomSso;
    }
    async updateDefaultSsoStatus(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateDefaultSsoStatusGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateDefaultSsoStatus;
    }
    async ssoMemberships(variables) {
        const result = await this.client.authorizedRequest({
            query: ssoMembershipsGQLQuery(),
            variables,
        });
        return result.ssoMemberships;
    }
    async ssoUrl(variables) {
        const result = await this.client.authorizedRequest({
            query: ssoUrlGQLQuery(),
            variables,
        });
        return result.ssoUrl;
    }
    async confirmResetPassword(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: confirmResetPasswordGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.confirmResetPassword;
    }
    async updatePasswordWithToken(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updatePasswordWithTokenGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updatePasswordWithToken;
    }
    async deleteSsoMembership(variables) {
        const result = await this.client.authorizedRequest({
            query: deleteSsoMembershipGQLMutation(),
            variables,
        });
        return result.deleteSsoMembership;
    }
}

class BadgeClient {
    constructor(client) {
        this.client = client;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createBadgeGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.createBadge;
    }
    async update(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateBadgeGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateBadge;
    }
    async delete(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteBadgeGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.deleteBadge;
    }
    async assign(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: assignBadgeGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.assignBadge;
    }
    async revoke(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: revokeBadgeGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.revokeBadge;
    }
}

class BillingClient {
    constructor(client) {
        this.client = client;
    }
    async details(accessToken) {
        const result = await this.client.authorizedRequest({
            query: billingDetailsGQLQuery(),
            customToken: accessToken,
        });
        return result.billingDetails;
    }
    async invoices(accessToken) {
        const result = await this.client.authorizedRequest({
            query: invoicesGQLQuery(),
            customToken: accessToken,
        });
        return result.invoices;
    }
    async vatTypes(accessToken) {
        const result = await this.client.authorizedRequest({
            query: vatTypesGQLQuery(),
            customToken: accessToken,
        });
        return result.vatTypes;
    }
    async purchase(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: purchaseGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.purchase;
    }
    async updateDetails(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateBillingDetailsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateBillingDetails;
    }
    async baskets(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: basketsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.baskets;
    }
}

class CollectionsClient {
    constructor(client) {
        this.client = client;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createCollectionGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.createCollection;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getCollectionsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.collections;
    }
    async get(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getCollectionGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.collection;
    }
    async update(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateCollectionGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateCollection;
    }
    async delete(id, accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteCollectionGQLMutation(),
            variables: { id },
            customToken: accessToken,
        });
        return result.deleteCollection;
    }
    async organize(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: organizeCollectionsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.organizeCollections;
    }
    async organizeSpaces(variables) {
        const result = await this.client.authorizedRequest({
            query: organizeSpacesInCollectionMutation(),
            variables,
        });
        return result.organizeSpacesInCollection;
    }
}

var __rest$2 = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
class DevClient {
    constructor(client) {
        this.client = client;
    }
    async apps(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalApps;
    }
    async app(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalApp;
    }
    async createApp(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalCreateAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalCreateApp;
    }
    async updateApp(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalUpdateAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalUpdateApp;
    }
    async deleteApp(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalDeleteAppGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalDeleteApp;
    }
    async networks(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalNetworksGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalNetworks;
    }
    async regenerateClientSecret(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalRegenerateClientSecret(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalRegenerateClientSecret;
    }
    async createImages(variables) {
        const result = await this.client.authorizedRequest({
            query: globalCreateImageGQLMutation(),
            variables: {
                input: variables,
            },
        });
        return result === null || result === void 0 ? void 0 : result.globalCreateImages;
    }
    async uploadImages(input) {
        const output = [];
        const signedUrls = await this.createImages(input.map((_a) => {
            var { file } = _a, rest = __rest$2(_a, ["file"]);
            return (Object.assign({ contentType: file.type }, rest));
        }));
        const promises = signedUrls.map((signedUrl, index) => {
            const { file } = input[index];
            const formData = new FormData();
            const parsedFields = JSON.parse(signedUrl.fields);
            // The order of appended key-value into the formData matters.
            Object.entries(parsedFields).forEach(([key, value]) => {
                formData.append(key, String(value));
            });
            formData.append('Content-Type', file.type);
            formData.append('file', file);
            return fetch(signedUrl.signedUrl, {
                method: 'POST',
                body: formData,
            })
                .then(r => r.text())
                .then(() => {
                output.push({
                    id: signedUrl.mediaId,
                    url: signedUrl.mediaUrl,
                    urls: signedUrl.urls,
                    cropX: input[index].cropX,
                    cropY: input[index].cropY,
                    cropZoom: input[index].cropZoom,
                    name: input[index].name,
                    cropHeight: input[index].cropHeight,
                    cropWidth: input[index].cropWidth,
                    downloadUrl: signedUrl.mediaDownloadUrl,
                });
            })
                .catch(e => {
                console.debug({ e });
            });
        });
        await Promise.all(promises.filter(Boolean));
        return output;
    }
    async appCollaborators(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppCollaboratorsQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalAppCollaborators;
    }
    async addAppCollaborator(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAddAppCollaboratorGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.globalAddAppCollaborator;
    }
    async removeAppCollaborator(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalRemoveAppCollaboratorGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.globalRemoveAppCollaborator;
    }
    async appPublications(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalAppPublicationsQuery(),
            variables,
            customToken: accessToken,
        });
        return result.globalAppPublications;
    }
    async publishAppPrivately(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalPublishAppPrivatelyGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.globalPublishAppPrivately;
    }
    async unPublishAppPrivately(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalUnPublishAppPrivatelyGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.globalUnPublishAppPrivately;
    }
    async testAppWebhook(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalTestAppWebhookGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.globalTestAppWebhook;
    }
    async eventTypes(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: globalEventTypesQuery(),
            variables,
            customToken: accessToken,
        });
        return result.globalEventTypes;
    }
}

class InvitationsClient {
    constructor(client) {
        this.client = client;
    }
    async getLink(accessToken) {
        const result = await this.client.authorizedRequest({
            query: getInvitationLinkGQLQuery(),
            customToken: accessToken,
        });
        return result.memberInvitationLink;
    }
    async validateLink(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: invitationLinkValidityGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.invitationLinkValidity;
    }
    async invite(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: inviteMembersGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.inviteMembers;
    }
    async validate(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: memberInvitationValidityGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.memberInvitationValidity;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMemberInvitationsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.memberInvitations;
    }
}

var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
class MediaClient {
    constructor(client) {
        this.client = client;
    }
    async embed(variables) {
        const result = await this.client.authorizedRequest({
            query: embedGQLQuery(),
            variables,
        });
        return result.embed;
    }
    async updateImage(variables) {
        const result = await this.client.authorizedRequest({
            query: updateImageGQLMutation(),
            variables,
        });
        return result.updateImage;
    }
    async createEmojis(input) {
        const result = await this.client.authorizedRequest({
            query: createEmojisGQLMutation(),
            variables: {
                input,
            },
        });
        return result === null || result === void 0 ? void 0 : result.createEmojis;
    }
    async createImages(variables) {
        const result = await this.client.authorizedRequest({
            query: createImageGQLMutation(),
            variables: {
                input: variables,
            },
        });
        return result === null || result === void 0 ? void 0 : result.createImages;
    }
    async createFiles(variables) {
        const result = await this.client.authorizedRequest({
            query: createFilesGQLMutation(),
            variables: {
                input: variables,
            },
        });
        return result === null || result === void 0 ? void 0 : result.createFiles;
    }
    async uploadFiles(input, handleError) {
        const signedUrls = await this.createFiles(input.map((_a) => {
            var input = __rest$1(_a, ["file"]);
            return input;
        }));
        const output = [];
        const promises = signedUrls.map((signedUrl, index) => {
            const { file, name, size, extension } = input[index];
            const formData = new FormData();
            const parsedFields = JSON.parse(signedUrl.fields);
            // The order of appended key-value into the formData matters.
            Object.entries(parsedFields).forEach(([key, value]) => {
                formData.append(key, String(value));
            });
            formData.append('Content-Type', file.type);
            formData.append('file', file);
            return fetch(signedUrl.signedUrl, {
                method: 'POST',
                body: formData,
            })
                .then(() => {
                output.push({
                    id: signedUrl.mediaId,
                    url: signedUrl.mediaUrl,
                    name,
                    downloadUrl: signedUrl.mediaDownloadUrl,
                    size,
                    extension,
                });
            })
                .catch(e => {
                if (handleError) {
                    handleError({
                        fileName: name,
                        message: e === null || e === void 0 ? void 0 : e.message,
                    });
                }
                else {
                    throw e;
                }
            });
        });
        await Promise.all(promises);
        return output;
    }
    async uploadImages(input, handleError) {
        const output = [];
        const signedUrls = await this.createImages(input.map((_a) => {
            var { file } = _a, rest = __rest$1(_a, ["file"]);
            return (Object.assign({ contentType: file.type, name: file.name }, rest));
        }));
        const promises = signedUrls.map((signedUrl, index) => {
            const { file, name } = input[index];
            const formData = new FormData();
            const parsedFields = JSON.parse(signedUrl.fields);
            // The order of appended key-value into the formData matters.
            Object.entries(parsedFields).forEach(([key, value]) => {
                formData.append(key, String(value));
            });
            formData.append('Content-Type', file.type);
            formData.append('file', file);
            return fetch(signedUrl.signedUrl, {
                method: 'POST',
                body: formData,
            })
                .then(r => r.text())
                .then(() => {
                output.push({
                    id: signedUrl.mediaId,
                    url: signedUrl.mediaUrl,
                    urls: signedUrl.urls,
                    cropX: input[index].cropX,
                    cropY: input[index].cropY,
                    cropZoom: input[index].cropZoom,
                    name: input[index].name,
                    cropHeight: input[index].cropHeight,
                    cropWidth: input[index].cropWidth,
                    downloadUrl: signedUrl.mediaDownloadUrl,
                });
            })
                .catch(error => {
                if (handleError) {
                    handleError({
                        fileName: name,
                        message: error === null || error === void 0 ? void 0 : error.message,
                    });
                }
                else {
                    throw error;
                }
            });
        });
        await Promise.all(promises.filter(Boolean));
        return output;
    }
}

class MembersClient {
    constructor(client) {
        this.client = client;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMembersGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.members;
    }
    async get(id, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMemberGQLQuery(fields),
            variables: { id },
            customToken: accessToken,
        });
        return result.member;
    }
    async update(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateMemberGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.updateMember;
    }
    async delete(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteMemberGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.deleteMember;
    }
    async cancelEmailUpdate(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: cancelEmailUpdateGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.cancelEmailUpdate;
    }
}

class ModerationClient {
    constructor(client) {
        this.client = client;
    }
    async getItem(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: moderationItemGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.moderationItem;
    }
    async getItems(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: moderationItemsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.moderationItems;
    }
    async getItemReporters(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: moderationItemReportersGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.moderationItemReporters;
    }
    async settings(accessToken) {
        const result = await this.client.authorizedRequest({
            query: moderationSettingsGQLQuery(),
            customToken: accessToken,
        });
        return result.moderationSettings;
    }
    async updateSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateModerationSettingsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateModerationSettings;
    }
    async updateItem(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateModerationItemGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateModerationItem;
    }
}

class NetworkClient {
    constructor(client) {
        this.client = client;
    }
    async get(fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getNetworkGQLQuery(fields),
            customToken: accessToken,
        });
        return result.network;
    }
    async update(variables, fields = 'default', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateNetworkGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.updateNetwork;
    }
    async clearNewDomain(accessToken) {
        const result = await this.client.authorizedRequest({
            query: clearNewDomainGQLMutation(),
            customToken: accessToken,
        });
        return result.clearNewDomain;
    }
    async updateNewDomain(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateNewDomainGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateNewDomain;
    }
    async transferToNewDomain(accessToken) {
        const result = await this.client.authorizedRequest({
            query: transferToNewDomainGQLMutation(),
            customToken: accessToken,
        });
        return result.transferToNewDomain;
    }
    async domainAvailability(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: domainAvailabilityGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.domainAvailability;
    }
    async newDomainStatus(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: newDomainStatusGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.newDomainStatus;
    }
    async addMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: addMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.addMemberSchemaField;
    }
    async updateMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.updateMemberSchemaField;
    }
    async archiveMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: archiveMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.archiveMemberSchemaField;
    }
    async unArchiveMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: unArchiveMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.unArchiveMemberSchemaField;
    }
    async deleteMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.deleteMemberSchemaField;
    }
    async reorderMemberSchemaFields(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: reorderMemberSchemaFieldsGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.reorderMemberSchemaFields;
    }
}

class NotificationsClient {
    constructor(client) {
        this.client = client;
    }
    async count(accessToken) {
        const result = await this.client.authorizedRequest({
            query: getNotificationsCountGQLQuery(),
            customToken: accessToken,
        });
        return result.notificationsCount.new;
    }
    async list(variables = { limit: 10 }, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getNotificationsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.notifications;
    }
    async readNotification(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: readNotificationGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.readNotification;
    }
    async readNotifications(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: readNotificationsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.readNotifications;
    }
    async deleteNotification(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteNotificationGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.deleteNotification;
    }
    async deleteNotifications(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteNotificationsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.deleteNotifications;
    }
    async clearNotificationsCount(fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: clearNotificationsCountGQLMutation(),
            customToken: accessToken,
        });
        return result.clearNotificationsCount;
    }
    async memberSettings(variables) {
        const result = await this.client.authorizedRequest({
            variables,
            query: getMemberNotificationSettingsGQLQuery(),
        });
        return result.memberNotificationSettings;
    }
    async memberPostNotificationSettings(variables) {
        const result = await this.client.authorizedRequest({
            variables,
            query: getMemberPostNotificationSettingsGQLQuery(),
        });
        return result.memberPostNotificationSettings;
    }
    async updateMemberPostNotificationSettings(variables) {
        const result = await this.client.authorizedRequest({
            variables,
            query: updateMemberPostNotificationSettingsGQLMutation(),
        });
        return result.updateMemberPostNotificationSettings;
    }
    async updateSpaceSettings(variables) {
        const result = await this.client.authorizedRequest({
            variables,
            query: updateSpaceNotificationSettingsGQLMutation(),
        });
        return result.updateMemberSpaceNotificationSettings;
    }
    async updateNetworkSettings(variables) {
        const result = await this.client.authorizedRequest({
            variables,
            query: updateNetworkNotificationSettingsGQLMutation(),
        });
        return result.updateMemberNetworkNotificationSettings;
    }
    async unsubscribe(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: unsubscribeFromNotificationGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.unsubscribeFromNotification;
    }
    async spaceDefaultNotificationSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: spaceDefaultNotificationSettingsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.spaceDefaultNotificationSettings;
    }
    async updateSpaceDefaultNotificationSettings(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateSpaceDefaultNotificationSettingsGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateSpaceDefaultNotificationSettings;
    }
}

class PostsClient {
    constructor(client) {
        this.client = client;
    }
    async listPostTypes(variables, fields = 'basic', customToken) {
        const result = await this.client.authorizedRequest({
            query: getPostTypesGQLQuery(fields),
            variables,
            customToken,
        });
        return result.postTypes;
    }
    async getPostType(id, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: getPostTypeGQLQuery(fields),
            variables: { id },
        });
        return result.postType;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createPostGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.createPost;
    }
    async list(variables, fields = 'basic', accessToken) {
        let query;
        if ('tagId' in variables) {
            query = getSpaceTaggedPostsGQLQuery(fields);
        }
        else {
            query = getPostsGQLQuery(fields);
        }
        const result = await this.client.authorizedRequest({
            query,
            variables,
            customToken: accessToken,
        });
        if ('tagPosts' in result) {
            return result.tagPosts;
        }
        return result.posts;
    }
    async get(id, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getPostGQLQuery(fields),
            variables: { id },
            customToken: accessToken,
        });
        return result.post;
    }
    async feed(variables = { limit: 10 }, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getFeedGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.feed;
    }
    async reply(postId, variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createReplyGQLQuery(fields),
            variables: Object.assign({ postId }, variables),
            customToken: accessToken,
        });
        return result.createReply;
    }
    async byMember(memberId, variables = { limit: 10 }, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMemberPostsGQLQuery(fields),
            variables: Object.assign({ memberId }, variables),
            customToken: accessToken,
        });
        return result.memberPosts;
    }
    async replies(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: getRepliesGQLQuery(fields),
            variables,
        });
        return result.replies;
    }
    async addReaction(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: addReactionGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.addReaction;
    }
    async removeReaction(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: removeReactionGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.removeReaction;
    }
    async hide(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: hidePostGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.hidePost;
    }
    async unhide(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: unhidePostGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.unhidePost;
    }
    async delete(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deletePostGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.deletePost;
    }
    async update(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updatePostGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.updatePost;
    }
    async pinToSpace(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: pinPostToSpaceGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.pinPostToSpace;
    }
    async unpinFromSpace(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: unpinPostFromSpaceGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.unpinPostFromSpace;
    }
    async reactionParticipants(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: postReactionParticipantsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.postReactionParticipants;
    }
}

class ReportClient {
    constructor(client) {
        this.client = client;
    }
    async get(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getReportGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.report;
    }
    async getLeaderboard(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getLeaderboardGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.leaderboard;
    }
    async getLeaderboardWithScores(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getLeaderboardWithScoresGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.leaderboardWithScores;
    }
    async activityLogs(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getActivityLogsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.activityLogs;
    }
}

class RolesClient {
    constructor(client) {
        this.client = client;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getRolesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.roles;
    }
}

class SlatesClient {
    constructor(client) {
        this.client = client;
    }
    async update(variables, fields = 'all', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateSlatesGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateSlates;
    }
}

class SpacePostTypeClient {
    constructor(client) {
        this.client = client;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacePostTypesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacePostTypes;
    }
    async get(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacePostTypeGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacePostType;
    }
    async update(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateSpacePostTypeGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.updatedSpacePostType;
    }
}

class SpaceMembersClient {
    constructor(client) {
        this.client = client;
    }
    async add(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: addSpaceMemberGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.addSpaceMembers;
    }
    async listMembers(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpaceMembersGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spaceMembers;
    }
    async listSpaces(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMemberSpacesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.memberSpaces;
    }
    async remove(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: removeSpaceMembersGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.removeSpaceMembers;
    }
}

class SpaceMembershipClient {
    constructor(client) {
        this.client = client;
    }
    async getMemberRequests(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getMemberSpaceMembershipRequestGQLQuery(fields),
            customToken: accessToken,
            variables,
        });
        return result.memberSpaceMembershipRequest;
    }
    async getRequests(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: spaceMembershipRequestsGQLQuery(fields),
            customToken: accessToken,
            variables,
        });
        return result.spaceMembershipRequests;
    }
    async request(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: requestSpaceMembershipGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.requestSpaceMembership;
    }
    async approveRequest(variables, fields = 'basic', accessToken) {
        const request = await this.client.authorizedRequest({
            query: approveSpaceMembershipRequestGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return request.approveSpaceMembershipRequest;
    }
    async declineRequest(variables, fields = 'basic', accessToken) {
        const request = await this.client.authorizedRequest({
            query: declineSpaceMembershipRequestGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return request.declineSpaceMembershipRequest;
    }
}

class SpaceRolesClient {
    constructor(client) {
        this.client = client;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpaceRolesGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.spaceRoles;
    }
    async updateMemberRole(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateMemberSpaceRoleGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateMemberSpaceRole;
    }
}

class SpacesClient {
    constructor(client) {
        this.client = client;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createSpaceGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.createSpace;
    }
    async list(variables, fields, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spaces;
    }
    async listByIds(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacesByIdsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacesByIds;
    }
    async listBySlugs(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacesBySlugsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacesBySlugs;
    }
    async organize(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: organizeSpacesInCollectionGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.organizeSpacesInCollection;
    }
    async get(variables, fields = 'default', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpaceGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.space;
    }
    async getByPath(variables, fields, customToken) {
        const result = await this.client.authorizedRequest({
            query: getPageGqlQuery(fields),
            variables,
            customToken,
        });
        return result.page;
    }
    async update(variables, fields = 'basic') {
        const result = await this.client.authorizedRequest({
            query: updateSpaceGQLMutation(fields),
            variables,
        });
        return result.updateSpace;
    }
    async join(variables) {
        const result = await this.client.authorizedRequest({
            query: joinSpaceGQLMutation(),
            variables,
        });
        return result.joinSpace;
    }
    async leave(variables) {
        const result = await this.client.authorizedRequest({
            query: leaveSpaceGQLMutation(),
            variables,
        });
        return result.leaveSpace;
    }
    async pinnedPosts(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getSpacePinnedPostGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.spacePinnedPosts;
    }
    async explore(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: exploreSpacesGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.exploreSpaces;
    }
    async updateHighlightedTags(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateSpaceHighlightedTagsMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateSpaceHighlightedTags;
    }
    async delete(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteSpaceGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.deleteSpace;
    }
}

class TagsClient {
    constructor(client) {
        this.client = client;
    }
    async list(variables, fields, accessToken) {
        const result = await this.client.authorizedRequest({
            query: getTagsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.tags;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createTagGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.createTag;
    }
    async update(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateTagGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateTag;
    }
}

class ThemeClient {
    constructor(client) {
        this.client = client;
    }
    async upsert(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: upsertThemeGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.upsertTheme;
    }
}

var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
exports.ApiErrorCodes = void 0;
(function (ApiErrorCodes) {
    ApiErrorCodes["UNKNOWN_ERROR"] = "1";
    ApiErrorCodes["SERVER_ERROR"] = "10";
    ApiErrorCodes["PARAMETER_VALIDATION_FAILED"] = "100";
    ApiErrorCodes["PERMISSION_ERROR"] = "102";
    ApiErrorCodes["USER_REQUEST_REACHED"] = "104";
    ApiErrorCodes["INVALID_PARAMETER"] = "106";
    ApiErrorCodes["INVALID_ACCESS_TOKEN"] = "108";
    ApiErrorCodes["RESOURCE_NOT_FOUND"] = "110";
    ApiErrorCodes["MISSING_PARAMETER"] = "112";
    ApiErrorCodes["PARAMETER_TYPE_PROBLEM"] = "114";
    ApiErrorCodes["DATABASE_ERROR"] = "116";
    ApiErrorCodes["INVALID_REQUEST"] = "118";
    ApiErrorCodes["REQUEST_BLOCKED_FOR_POLICIES"] = "120";
    ApiErrorCodes["BACKEND_ERROR"] = "122";
})(exports.ApiErrorCodes || (exports.ApiErrorCodes = {}));
const errObj = (e) => {
    // removing errors and inserting the rest
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const _a = e || {}, { code, message, field, subcode, timestamp, help, errors } = _a, rest = __rest(_a, ["code", "message", "field", "subcode", "timestamp", "help", "errors"]);
    return Object.assign({ code,
        message,
        field,
        help,
        subcode,
        timestamp }, rest);
};
const flattenErrors = (e, errors) => {
    var _a, _b;
    const isRoot = !errors;
    const output = errors || [];
    if (Array.isArray(e)) {
        const arr = e
            .map(_e => {
            var _a, _b;
            if ((_a = _e) === null || _a === void 0 ? void 0 : _a.errors) {
                flattenErrors(_e.errors, output);
            }
            else if (!isRoot || ((_b = _e) === null || _b === void 0 ? void 0 : _b.message)) {
                return errObj(_e);
            }
            return undefined;
        })
            .filter(Boolean);
        output.push(...arr);
    }
    else if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) || ((_b = e) === null || _b === void 0 ? void 0 : _b.message)) {
        output.push(errObj(e));
    }
    if (isRoot) {
        if (output.length === 0) {
            output.push(errObj(e));
        }
    }
    return output;
};

// eslint-disable-next-line camelcase
const parseToken = (accessToken) => {
    if (!accessToken) {
        return;
    }
    try {
        return jwt_decode__default["default"](accessToken);
    }
    catch (e) {
        console.error('error - parsing token', accessToken, e);
    }
};

class GraphqlClient extends graphqlRequest.GraphQLClient {
    constructor(options) {
        const { graphqlUrl = 'https://app.tribe.so/api/gateway', accessToken, clientId, clientSecret, } = options;
        const params = {};
        if (options.fetch)
            params.fetch = options.fetch;
        super(graphqlUrl, params);
        this.accessToken = accessToken;
        this.onError = options.onError;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.notifyOnTokenExpiration = !!options.notifyOnTokenExpiration;
        if (this.notifyOnTokenExpiration) {
            this.tokenExpirationHandler(accessToken);
        }
    }
    tokenExpirationHandler(token) {
        clearTimeout(this.tokenExpirationTimeout);
        const parsedToken = parseToken(token);
        if (!parsedToken) {
            return;
        }
        const diff = new Date(parsedToken.exp * 1000).getTime() - new Date().getTime();
        const timeout = diff - 60 * 1000; // invoke the error handler one minute sooner
        // This is due to setTimeout using a 32 bit int to store the delay so the max value allowed would be
        if (timeout > 2147483647) {
            return;
        }
        this.tokenExpirationTimeout = setTimeout(() => {
            var _a;
            (_a = this.onError) === null || _a === void 0 ? void 0 : _a.call(this, [
                {
                    code: exports.ApiErrorCodes.INVALID_ACCESS_TOKEN,
                    message: 'Invalid access token',
                },
            ], this, null);
        }, timeout);
    }
    getBasicToken() {
        return Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64');
    }
    async authorizedRequest(options) {
        const { query, variables = {}, customToken = null, useBasicToken = false, } = options;
        if (useBasicToken) {
            this.setHeader('Authorization', `Basic ${this.getBasicToken()}`);
        }
        else {
            this.setHeader('Authorization', `Bearer ${customToken || this.accessToken}`);
        }
        return this.request(query, variables).catch((error) => {
            var _a, _b;
            if ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.errors) {
                const normalizedError = flattenErrors(error.response.errors);
                error.response.errors = normalizedError;
                (_b = this.onError) === null || _b === void 0 ? void 0 : _b.call(this, normalizedError, this, error);
            }
            // eslint-disable-next-line no-throw-literal
            throw error;
        });
    }
    setToken(accessToken) {
        this.accessToken = accessToken;
        if (this.notifyOnTokenExpiration) {
            this.tokenExpirationHandler(accessToken);
        }
    }
}

class TribeClient {
    constructor(options) {
        this.client = new GraphqlClient(options);
        this.app = new AppClient(this.client);
        this.auth = new AuthClient(this.client);
        this.badge = new BadgeClient(this.client);
        this.billing = new BillingClient(this.client);
        this.collections = new CollectionsClient(this.client);
        this.dev = new DevClient(this.client);
        this.invitations = new InvitationsClient(this.client);
        this.media = new MediaClient(this.client);
        this.members = new MembersClient(this.client);
        this.moderation = new ModerationClient(this.client);
        this.network = new NetworkClient(this.client);
        this.notifications = new NotificationsClient(this.client);
        this.posts = new PostsClient(this.client);
        this.report = new ReportClient(this.client);
        this.roles = new RolesClient(this.client);
        this.spaceMembers = new SpaceMembersClient(this.client);
        this.spaceMembership = new SpaceMembershipClient(this.client);
        this.spaceRoles = new SpaceRolesClient(this.client);
        this.spaces = new SpacesClient(this.client);
        this.tags = new TagsClient(this.client);
        this.theme = new ThemeClient(this.client);
        this.slates = new SlatesClient(this.client);
        this.spacePostType = new SpacePostTypeClient(this.client);
    }
    setToken(accessToken) {
        this.client.setToken(accessToken);
    }
    /**
     * Get the guest access token for a community.
     * @query tokens(): AuthToken!
     * @example
     * ```typescript
     *  t.client.getTokens({networkDomain: 'community.tribe.so'})
     * ```
     * @returns The AuthToken.
     */
    async getTokens(variables, fields = 'default') {
        const result = await this.client.authorizedRequest({
            query: getTokensGQLQuery(fields),
            variables,
        });
        return result.tokens;
    }
    async getLimitedToken(variables, fields = 'basic', useBasicToken) {
        const result = await this.client.authorizedRequest({
            query: getLimitedTokenGQLQuery(),
            variables,
            useBasicToken,
        });
        return result.limitedToken;
    }
    async search(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: searchGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.search;
    }
    async generateToken(options) {
        const { networkId, memberId } = options;
        return this.getLimitedToken({
            context: PermissionContext.NETWORK,
            networkId,
            entityId: networkId,
            impersonateMemberId: memberId,
        }, 'basic', true).then(x => x.accessToken);
    }
    async extraProperties(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: extraPropertiesGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.extraProperties;
    }
    async emailLogs(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: emailLogsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.emailLogs;
    }
}

const hasScopesPermission = (permissions, scopes) => {
    var _a;
    const perms = Array.isArray(permissions)
        ? permissions
        : (_a = permissions === null || permissions === void 0 ? void 0 : permissions.authMemberProps) === null || _a === void 0 ? void 0 : _a.permissions;
    return scopes.map(s => {
        var _a;
        const has = perms === null || perms === void 0 ? void 0 : perms.find(p => p.name === s);
        return Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized);
    });
};
const hasActionPermission = (permissions = [], scope) => {
    var _a, _b, _c;
    const has = permissions === null || permissions === void 0 ? void 0 : permissions.find(p => p.name === scope);
    return {
        authorized: Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized),
        reason: (_b = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _b === void 0 ? void 0 : _b.reason,
        requiredPlan: (_c = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _c === void 0 ? void 0 : _c.requiredPlan,
        actionPermission: has,
    };
};
const hasValuePermission = (permissions = [], value) => {
    var _a, _b, _c;
    const has = permissions === null || permissions === void 0 ? void 0 : permissions.find(p => p.value === value);
    return {
        authorized: Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized),
        reason: (_b = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _b === void 0 ? void 0 : _b.reason,
        requiredPlan: (_c = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _c === void 0 ? void 0 : _c.requiredPlan,
        value: has === null || has === void 0 ? void 0 : has.value,
        valuePermission: has,
    };
};
const hasInputPermission = (permissions = [], path) => {
    var _a, _b, _c;
    const has = permissions === null || permissions === void 0 ? void 0 : permissions.find(p => p.path === path);
    return {
        authorized: Boolean((_a = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _a === void 0 ? void 0 : _a.authorized),
        reason: (_b = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _b === void 0 ? void 0 : _b.reason,
        requiredPlan: (_c = has === null || has === void 0 ? void 0 : has.isAuthorized) === null || _c === void 0 ? void 0 : _c.requiredPlan,
        values: has === null || has === void 0 ? void 0 : has.values,
        inputPermission: has,
    };
};

exports.ALL_POST_FIELDS = ALL_POST_FIELDS;
exports.BASIC_POST_FIELDS = BASIC_POST_FIELDS;
exports.DEFAULT_POST_FIELDS = DEFAULT_POST_FIELDS;
exports.GraphqlClient = GraphqlClient;
exports.TribeClient = TribeClient;
exports.Types = index;
exports.WITH_REPLY_POST_FIELDS = WITH_REPLY_POST_FIELDS;
exports.actionGQLFields = actionGQLFields;
exports.actionPermissionGQLFields = actionPermissionGQLFields;
exports.addMemberSchemaFieldGQLMutation = addMemberSchemaFieldGQLMutation;
exports.addReactionGQLMutation = addReactionGQLMutation;
exports.addSpaceMemberGQLMutation = addSpaceMemberGQLMutation;
exports.appCollaboratorGQLFields = appCollaboratorGQLFields;
exports.appGQLFields = appGQLFields;
exports.appGQLQuery = appGQLQuery;
exports.appInstallationGQLFields = appInstallationGQLFields;
exports.appInstallationsGQLQuery = appInstallationsGQLQuery;
exports.appPublicationGQLFields = appPublicationGQLFields;
exports.approveSpaceMembershipRequestGQLMutation = approveSpaceMembershipRequestGQLMutation;
exports.appsGQLQuery = appsGQLQuery;
exports.archiveMemberSchemaFieldGQLMutation = archiveMemberSchemaFieldGQLMutation;
exports.assignBadgeGQLMutation = assignBadgeGQLMutation;
exports.authMemberQuery = authMemberQuery;
exports.authTokenGQLFields = authTokenGQLFields;
exports.badgeGQLFields = badgeGQLFields;
exports.baseCustomFieldSchemaGQLFields = baseCustomFieldSchemaGQLFields;
exports.basketsGQLQuery = basketsGQLQuery;
exports.billingDetailsGQLFields = billingDetailsGQLFields;
exports.billingDetailsGQLQuery = billingDetailsGQLQuery;
exports.blockGQLFields = blockGQLFields;
exports.cancelEmailUpdateGQLMutation = cancelEmailUpdateGQLMutation;
exports.clearNewDomainGQLMutation = clearNewDomainGQLMutation;
exports.clearNotificationsCountGQLMutation = clearNotificationsCountGQLMutation;
exports.collectionGQLFields = collectionGQLFields;
exports.confirmResetPasswordGQLMutation = confirmResetPasswordGQLMutation;
exports.createBadgeGQLMutation = createBadgeGQLMutation;
exports.createCollectionGQLMutation = createCollectionGQLMutation;
exports.createEmojisGQLMutation = createEmojisGQLMutation;
exports.createFilesGQLMutation = createFilesGQLMutation;
exports.createImageGQLMutation = createImageGQLMutation;
exports.createPostGQLQuery = createPostGQLQuery;
exports.createReplyGQLQuery = createReplyGQLQuery;
exports.createSpaceGQLQuery = createSpaceGQLQuery;
exports.createSpaceTypeGQLMutation = createSpaceTypeGQLMutation;
exports.createTagGQLMutation = createTagGQLMutation;
exports.customCodeGQLFields = customCodeGQLFields;
exports.customFieldSchemaGQLFields = customFieldSchemaGQLFields;
exports.customFieldsSchemaGQLFields = customFieldsSchemaGQLFields;
exports.declineSpaceMembershipRequestGQLMutation = declineSpaceMembershipRequestGQLMutation;
exports.deleteBadgeGQLMutation = deleteBadgeGQLMutation;
exports.deleteCollectionGQLMutation = deleteCollectionGQLMutation;
exports.deleteMemberGQLMutation = deleteMemberGQLMutation;
exports.deleteMemberSchemaFieldGQLMutation = deleteMemberSchemaFieldGQLMutation;
exports.deleteNotificationGQLMutation = deleteNotificationGQLMutation;
exports.deleteNotificationsGQLMutation = deleteNotificationsGQLMutation;
exports.deletePostGQLMutation = deletePostGQLMutation;
exports.deleteSpaceGQLMutation = deleteSpaceGQLMutation;
exports.deleteSsoMembershipGQLMutation = deleteSsoMembershipGQLMutation;
exports.domainAvailabilityGQLQuery = domainAvailabilityGQLQuery;
exports.emailLogGQLFields = emailLogGQLFields;
exports.emailLogsGQLQuery = emailLogsGQLQuery;
exports.embedGQLFields = embedGQLFields;
exports.embedGQLQuery = embedGQLQuery;
exports.emojiGQLFields = emojiGQLFields;
exports.entityReportGQLFields = entityReportGQLFields;
exports.errObj = errObj;
exports.eventTypeGQLFields = eventTypeGQLFields;
exports.exploreSpacesGQLQuery = exploreSpacesGQLQuery;
exports.extraPropertiesGQLQuery = extraPropertiesGQLQuery;
exports.flattenErrors = flattenErrors;
exports.getActivityLogsGQLQuery = getActivityLogsGQLQuery;
exports.getAppNetworkSettingsGQLQuery = getAppNetworkSettingsGQLQuery;
exports.getAppSpaceSettingsGQLQuery = getAppSpaceSettingsGQLQuery;
exports.getCollectionGQLQuery = getCollectionGQLQuery;
exports.getCollectionsGQLQuery = getCollectionsGQLQuery;
exports.getFeedGQLQuery = getFeedGQLQuery;
exports.getInvitationLinkGQLQuery = getInvitationLinkGQLQuery;
exports.getLeaderboardGQLQuery = getLeaderboardGQLQuery;
exports.getLeaderboardWithScoresGQLQuery = getLeaderboardWithScoresGQLQuery;
exports.getLimitedTokenGQLQuery = getLimitedTokenGQLQuery;
exports.getMemberGQLQuery = getMemberGQLQuery;
exports.getMemberInvitationsGQLQuery = getMemberInvitationsGQLQuery;
exports.getMemberNotificationSettingsGQLQuery = getMemberNotificationSettingsGQLQuery;
exports.getMemberPostNotificationSettingsGQLQuery = getMemberPostNotificationSettingsGQLQuery;
exports.getMemberPostsGQLQuery = getMemberPostsGQLQuery;
exports.getMemberSpaceMembershipRequestGQLQuery = getMemberSpaceMembershipRequestGQLQuery;
exports.getMemberSpacesGQLQuery = getMemberSpacesGQLQuery;
exports.getMembersGQLQuery = getMembersGQLQuery;
exports.getNetworkGQLQuery = getNetworkGQLQuery;
exports.getNotificationsCountGQLQuery = getNotificationsCountGQLQuery;
exports.getNotificationsGQLQuery = getNotificationsGQLQuery;
exports.getPageGqlQuery = getPageGqlQuery;
exports.getPermissionsGQLQuery = getPermissionsGQLQuery;
exports.getPostGQLQuery = getPostGQLQuery;
exports.getPostTypeGQLQuery = getPostTypeGQLQuery;
exports.getPostTypesGQLQuery = getPostTypesGQLQuery;
exports.getPostsGQLQuery = getPostsGQLQuery;
exports.getRepliesGQLQuery = getRepliesGQLQuery;
exports.getReportGQLQuery = getReportGQLQuery;
exports.getRolesGQLQuery = getRolesGQLQuery;
exports.getSpaceGQLQuery = getSpaceGQLQuery;
exports.getSpaceMembersGQLQuery = getSpaceMembersGQLQuery;
exports.getSpacePinnedPostGQLQuery = getSpacePinnedPostGQLQuery;
exports.getSpacePostTypeGQLQuery = getSpacePostTypeGQLQuery;
exports.getSpacePostTypesGQLQuery = getSpacePostTypesGQLQuery;
exports.getSpaceRolesGQLQuery = getSpaceRolesGQLQuery;
exports.getSpaceTaggedPostsGQLQuery = getSpaceTaggedPostsGQLQuery;
exports.getSpaceTypesGQLQuery = getSpaceTypesGQLQuery;
exports.getSpacesByIdsGQLQuery = getSpacesByIdsGQLQuery;
exports.getSpacesBySlugsGQLQuery = getSpacesBySlugsGQLQuery;
exports.getSpacesGQLQuery = getSpacesGQLQuery;
exports.getTagsGQLQuery = getTagsGQLQuery;
exports.getTokensGQLQuery = getTokensGQLQuery;
exports.globalAddAppCollaboratorGQLMutation = globalAddAppCollaboratorGQLMutation;
exports.globalAppCollaboratorsQuery = globalAppCollaboratorsQuery;
exports.globalAppGQLFields = globalAppGQLFields;
exports.globalAppGQLQuery = globalAppGQLQuery;
exports.globalAppPublicationsQuery = globalAppPublicationsQuery;
exports.globalAppsGQLQuery = globalAppsGQLQuery;
exports.globalCreateAppGQLMutation = globalCreateAppGQLMutation;
exports.globalCreateImageGQLMutation = globalCreateImageGQLMutation;
exports.globalDeleteAppGQLMutation = globalDeleteAppGQLMutation;
exports.globalEventTypesQuery = globalEventTypesQuery;
exports.globalNetworksGQLQuery = globalNetworksGQLQuery;
exports.globalPublishAppPrivatelyGQLMutation = globalPublishAppPrivatelyGQLMutation;
exports.globalRegenerateClientSecret = globalRegenerateClientSecret;
exports.globalRemoveAppCollaboratorGQLMutation = globalRemoveAppCollaboratorGQLMutation;
exports.globalTestAppWebhookGQLMutation = globalTestAppWebhookGQLMutation;
exports.globalUnPublishAppPrivatelyGQLMutation = globalUnPublishAppPrivatelyGQLMutation;
exports.globalUpdateAppGQLMutation = globalUpdateAppGQLMutation;
exports.hasActionPermission = hasActionPermission;
exports.hasInputPermission = hasInputPermission;
exports.hasScopesPermission = hasScopesPermission;
exports.hasValuePermission = hasValuePermission;
exports.hidePostGQLMutation = hidePostGQLMutation;
exports.imageGQLFields = imageGQLFields;
exports.inputPathPermissionsGQLFields = inputPathPermissionsGQLFields;
exports.installAppGQLMutation = installAppGQLMutation;
exports.invitationLinkValidityGQLQuery = invitationLinkValidityGQLQuery;
exports.inviteMembersGQLQuery = inviteMembersGQLQuery;
exports.invoicesGQLQuery = invoicesGQLQuery;
exports.isAuthorizedGQLFields = isAuthorizedGQLFields;
exports.joinNetworkMutation = joinNetworkMutation;
exports.joinNetworkWithInvitationLinkMutation = joinNetworkWithInvitationLinkMutation;
exports.joinNetworkWithTokenMutation = joinNetworkWithTokenMutation;
exports.joinSpaceGQLMutation = joinSpaceGQLMutation;
exports.leaderboardGQLFields = leaderboardGQLFields;
exports.leaveSpaceGQLMutation = leaveSpaceGQLMutation;
exports.loginNetworkQuery = loginNetworkQuery;
exports.logoutMutation = logoutMutation;
exports.mediaGQLFields = mediaGQLFields;
exports.mediaURLGQLFields = mediaURLGQLFields;
exports.memberAuthMemberPropsGQLFields = memberAuthMemberPropsGQLFields;
exports.memberGQLFields = memberGQLFields;
exports.memberInvitationGQLFields = memberInvitationGQLFields;
exports.memberInvitationValidityGQLQuery = memberInvitationValidityGQLQuery;
exports.memberPostNotificationSettingsFields = memberPostNotificationSettingsFields;
exports.moderationItemEntityGQLFields = moderationItemEntityGQLFields;
exports.moderationItemGQLFields = moderationItemGQLFields;
exports.moderationItemGQLQuery = moderationItemGQLQuery;
exports.moderationItemReporterGQLFields = moderationItemReporterGQLFields;
exports.moderationItemReportersGQLQuery = moderationItemReportersGQLQuery;
exports.moderationItemsGQLQuery = moderationItemsGQLQuery;
exports.moderationSettingsGQLQuery = moderationSettingsGQLQuery;
exports.navigationSlatesGQLFields = navigationSlatesGQLFields;
exports.networkAuthMemberPropsGQLFields = networkAuthMemberPropsGQLFields;
exports.networkGQLFields = networkGQLFields;
exports.networkNotificationSettingsFields = networkNotificationSettingsFields;
exports.networkPublicInfoGQLFields = networkPublicInfoGQLFields;
exports.newDomainStatusGQLQuery = newDomainStatusGQLQuery;
exports.newThemesGQLFields = newThemesGQLFields;
exports.notificationGQLFields = notificationGQLFields;
exports.organizeCollectionsGQLMutation = organizeCollectionsGQLMutation;
exports.organizeSpacesInCollectionGQLMutation = organizeSpacesInCollectionGQLMutation;
exports.organizeSpacesInCollectionMutation = organizeSpacesInCollectionMutation;
exports.pageGqlFields = pageGqlFields;
exports.paginatedGQLFields = paginatedGQLFields;
exports.parseToken = parseToken;
exports.pathPermissionsGQLFields = pathPermissionsGQLFields;
exports.payloadGQLFields = payloadGQLFields;
exports.pinPostToSpaceGQLMutation = pinPostToSpaceGQLMutation;
exports.planGQLFields = planGQLFields;
exports.pluralNetworkGQLFields = pluralNetworkGQLFields;
exports.postAuthMemberPropsGQLFields = postAuthMemberPropsGQLFields;
exports.postGQLFields = postGQLFields;
exports.postReactionParticipantsGQLQuery = postReactionParticipantsGQLQuery;
exports.postTypeGQLFields = postTypeGQLFields;
exports.purchaseGQLMutation = purchaseGQLMutation;
exports.reactionGQLFields = reactionGQLFields;
exports.readNotificationGQLMutation = readNotificationGQLMutation;
exports.readNotificationsGQLMutation = readNotificationsGQLMutation;
exports.removeReactionGQLMutation = removeReactionGQLMutation;
exports.removeSpaceMembersGQLMutation = removeSpaceMembersGQLMutation;
exports.reorderMemberSchemaFieldsGQLMutation = reorderMemberSchemaFieldsGQLMutation;
exports.reportDataGQLFields = reportDataGQLFields;
exports.reportDataValueGQLFields = reportDataValueGQLFields;
exports.reportEntitiesGQLFields = reportEntitiesGQLFields;
exports.reportGQLFields = reportGQLFields;
exports.reportRecordGQLFields = reportRecordGQLFields;
exports.reportableEntityGQLFields = reportableEntityGQLFields;
exports.requestSpaceMembershipGQLMutation = requestSpaceMembershipGQLMutation;
exports.resendVerificationGQLQuery = resendVerificationGQLQuery;
exports.revokeBadgeGQLMutation = revokeBadgeGQLMutation;
exports.roleGQLFields = roleGQLFields;
exports.searchEntityGQLFields = searchEntityGQLFields;
exports.searchGQLQuery = searchGQLQuery;
exports.sendResetPasswordEmailGQLMutation = sendResetPasswordEmailGQLMutation;
exports.signedUrlGQLFields = signedUrlGQLFields;
exports.slateGQLFields = slateGQLFields;
exports.spaceAuthMemberPropsGQLFields = spaceAuthMemberPropsGQLFields;
exports.spaceDefaultNotificationSettingsGQLQuery = spaceDefaultNotificationSettingsGQLQuery;
exports.spaceGQLFields = spaceGQLFields;
exports.spaceJoinRequestGQLFields = spaceJoinRequestGQLFields;
exports.spaceMemberGQLFields = spaceMemberGQLFields;
exports.spaceMembershipRequestsGQLQuery = spaceMembershipRequestsGQLQuery;
exports.spaceNotificationSettingsFields = spaceNotificationSettingsFields;
exports.spacePostTypeGQLFields = spacePostTypeGQLFields;
exports.spaceRoleGQLFields = spaceRoleGQLFields;
exports.spaceSeoDetailGQLFields = spaceSeoDetailGQLFields;
exports.spaceTypeGQLFields = spaceTypeGQLFields;
exports.spaceTypeGQLQuery = spaceTypeGQLQuery;
exports.ssoGQLFields = ssoGQLFields;
exports.ssoMembershipsGQLQuery = ssoMembershipsGQLQuery;
exports.ssoRedirectMutation = ssoRedirectMutation;
exports.ssoUrlGQLQuery = ssoUrlGQLQuery;
exports.ssosQuery = ssosQuery;
exports.tagGQLFields = tagGQLFields;
exports.themeColorGQLFields = themeColorGQLFields;
exports.themeColorsGQLFields = themeColorsGQLFields;
exports.themeGQLFields = themeGQLFields;
exports.themeTokensGQLFields = themeTokensGQLFields;
exports.themesGQLFields = themesGQLFields;
exports.topNavigationGQLFields = topNavigationGQLFields;
exports.transferToNewDomainGQLMutation = transferToNewDomainGQLMutation;
exports.unArchiveMemberSchemaFieldGQLMutation = unArchiveMemberSchemaFieldGQLMutation;
exports.unhidePostGQLMutation = unhidePostGQLMutation;
exports.uninstallAppGQLMutation = uninstallAppGQLMutation;
exports.unpinPostFromSpaceGQLMutation = unpinPostFromSpaceGQLMutation;
exports.unsubscribeFromNotificationGQLMutation = unsubscribeFromNotificationGQLMutation;
exports.updateAppNetworkSettingsGQLMutation = updateAppNetworkSettingsGQLMutation;
exports.updateBadgeGQLMutation = updateBadgeGQLMutation;
exports.updateBillingDetailsGQLMutation = updateBillingDetailsGQLMutation;
exports.updateCollectionGQLMutation = updateCollectionGQLMutation;
exports.updateCustomSsoGQLMutation = updateCustomSsoGQLMutation;
exports.updateDefaultSsoStatusGQLMutation = updateDefaultSsoStatusGQLMutation;
exports.updateImageGQLMutation = updateImageGQLMutation;
exports.updateJwtSsoGQLMutation = updateJwtSsoGQLMutation;
exports.updateMemberGQLQuery = updateMemberGQLQuery;
exports.updateMemberPostNotificationSettingsGQLMutation = updateMemberPostNotificationSettingsGQLMutation;
exports.updateMemberSchemaFieldGQLMutation = updateMemberSchemaFieldGQLMutation;
exports.updateMemberSpaceRoleGQLMutation = updateMemberSpaceRoleGQLMutation;
exports.updateModerationItemGQLMutation = updateModerationItemGQLMutation;
exports.updateModerationSettingsGQLMutation = updateModerationSettingsGQLMutation;
exports.updateNetworkGQLQuery = updateNetworkGQLQuery;
exports.updateNetworkNotificationSettingsGQLMutation = updateNetworkNotificationSettingsGQLMutation;
exports.updateNewDomainGQLMutation = updateNewDomainGQLMutation;
exports.updatePasswordWithTokenGQLMutation = updatePasswordWithTokenGQLMutation;
exports.updatePostGQLMutation = updatePostGQLMutation;
exports.updateSlatesGQLMutation = updateSlatesGQLMutation;
exports.updateSpaceDefaultNotificationSettingsGQLMutation = updateSpaceDefaultNotificationSettingsGQLMutation;
exports.updateSpaceGQLMutation = updateSpaceGQLMutation;
exports.updateSpaceHighlightedTagsMutation = updateSpaceHighlightedTagsMutation;
exports.updateSpaceNotificationSettingsGQLMutation = updateSpaceNotificationSettingsGQLMutation;
exports.updateSpacePostTypeGQLMutation = updateSpacePostTypeGQLMutation;
exports.updateTagGQLMutation = updateTagGQLMutation;
exports.upsertThemeGQLMutation = upsertThemeGQLMutation;
exports.vatTypesGQLQuery = vatTypesGQLQuery;
exports.verifyMemberMutation = verifyMemberMutation;
