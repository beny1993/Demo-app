import { addMemberSchemaFieldGQLMutation, archiveMemberSchemaFieldGQLMutation, clearNewDomainGQLMutation, deleteMemberSchemaFieldGQLMutation, domainAvailabilityGQLQuery, getNetworkGQLQuery, newDomainStatusGQLQuery, reorderMemberSchemaFieldsGQLMutation, transferToNewDomainGQLMutation, unArchiveMemberSchemaFieldGQLMutation, updateMemberSchemaFieldGQLMutation, updateNetworkGQLQuery, updateNewDomainGQLMutation, } from '../../graphql/index.js';
export class NetworkClient {
    constructor(client) {
        this.client = client;
    }
    async get(fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getNetworkGQLQuery(fields),
            customToken: accessToken,
        });
        return result.network;
    }
    async update(variables, fields = 'default', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateNetworkGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.updateNetwork;
    }
    async clearNewDomain(accessToken) {
        const result = await this.client.authorizedRequest({
            query: clearNewDomainGQLMutation(),
            customToken: accessToken,
        });
        return result.clearNewDomain;
    }
    async updateNewDomain(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateNewDomainGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateNewDomain;
    }
    async transferToNewDomain(accessToken) {
        const result = await this.client.authorizedRequest({
            query: transferToNewDomainGQLMutation(),
            customToken: accessToken,
        });
        return result.transferToNewDomain;
    }
    async domainAvailability(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: domainAvailabilityGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.domainAvailability;
    }
    async newDomainStatus(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: newDomainStatusGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.newDomainStatus;
    }
    async addMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: addMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.addMemberSchemaField;
    }
    async updateMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.updateMemberSchemaField;
    }
    async archiveMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: archiveMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.archiveMemberSchemaField;
    }
    async unArchiveMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: unArchiveMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.unArchiveMemberSchemaField;
    }
    async deleteMemberSchemaField(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteMemberSchemaFieldGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.deleteMemberSchemaField;
    }
    async reorderMemberSchemaFields(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: reorderMemberSchemaFieldsGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.reorderMemberSchemaFields;
    }
}
