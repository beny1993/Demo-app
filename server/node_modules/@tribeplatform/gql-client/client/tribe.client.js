import { getLimitedTokenGQLQuery, getTokensGQLQuery, searchGQLQuery, extraPropertiesGQLQuery, emailLogsGQLQuery, } from '../graphql/index.js';
import { PermissionContext, } from '../types/index.js';
import { AppClient } from './clients/app.client.js';
import { AuthClient } from './clients/auth.client.js';
import { BadgeClient } from './clients/badge.client.js';
import { BillingClient } from './clients/billing.client.js';
import { CollectionsClient } from './clients/collections.client.js';
import { DevClient } from './clients/dev.client.js';
import { InvitationsClient } from './clients/invitations.client.js';
import { MediaClient } from './clients/media.client.js';
import { MembersClient } from './clients/members.client.js';
import { ModerationClient } from './clients/moderation.client.js';
import { NetworkClient } from './clients/network.client.js';
import { NotificationsClient } from './clients/notifications.client.js';
import { PostsClient } from './clients/posts.client.js';
import { ReportClient } from './clients/report.client.js';
import { RolesClient } from './clients/roles.client.js';
import { SlatesClient } from './clients/slates.client.js';
import { SpacePostTypeClient } from './clients/space-post-type.client.js';
import { SpaceMembersClient } from './clients/spaceMembers.client.js';
import { SpaceMembershipClient } from './clients/spaceMembership.client.js';
import { SpaceRolesClient } from './clients/spaceRoles.client.js';
import { SpacesClient } from './clients/spaces.client.js';
import { TagsClient } from './clients/tags.client.js';
import { ThemeClient } from './clients/theme.client.js';
import { GraphqlClient } from './graphql.client.js';
export class TribeClient {
    constructor(options) {
        this.client = new GraphqlClient(options);
        this.app = new AppClient(this.client);
        this.auth = new AuthClient(this.client);
        this.badge = new BadgeClient(this.client);
        this.billing = new BillingClient(this.client);
        this.collections = new CollectionsClient(this.client);
        this.dev = new DevClient(this.client);
        this.invitations = new InvitationsClient(this.client);
        this.media = new MediaClient(this.client);
        this.members = new MembersClient(this.client);
        this.moderation = new ModerationClient(this.client);
        this.network = new NetworkClient(this.client);
        this.notifications = new NotificationsClient(this.client);
        this.posts = new PostsClient(this.client);
        this.report = new ReportClient(this.client);
        this.roles = new RolesClient(this.client);
        this.spaceMembers = new SpaceMembersClient(this.client);
        this.spaceMembership = new SpaceMembershipClient(this.client);
        this.spaceRoles = new SpaceRolesClient(this.client);
        this.spaces = new SpacesClient(this.client);
        this.tags = new TagsClient(this.client);
        this.theme = new ThemeClient(this.client);
        this.slates = new SlatesClient(this.client);
        this.spacePostType = new SpacePostTypeClient(this.client);
    }
    setToken(accessToken) {
        this.client.setToken(accessToken);
    }
    /**
     * Get the guest access token for a community.
     * @query tokens(): AuthToken!
     * @example
     * ```typescript
     *  t.client.getTokens({networkDomain: 'community.tribe.so'})
     * ```
     * @returns The AuthToken.
     */
    async getTokens(variables, fields = 'default') {
        const result = await this.client.authorizedRequest({
            query: getTokensGQLQuery(fields),
            variables,
        });
        return result.tokens;
    }
    async getLimitedToken(variables, fields = 'basic', useBasicToken) {
        const result = await this.client.authorizedRequest({
            query: getLimitedTokenGQLQuery(fields),
            variables,
            useBasicToken,
        });
        return result.limitedToken;
    }
    async search(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: searchGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.search;
    }
    async generateToken(options) {
        const { networkId, memberId } = options;
        return this.getLimitedToken({
            context: PermissionContext.NETWORK,
            networkId,
            entityId: networkId,
            impersonateMemberId: memberId,
        }, 'basic', true).then(x => x.accessToken);
    }
    async extraProperties(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: extraPropertiesGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.extraProperties;
    }
    async emailLogs(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: emailLogsGQLQuery(),
            variables,
            customToken: accessToken,
        });
        return result.emailLogs;
    }
}
