import { createCollectionGQLMutation, deleteCollectionGQLMutation, getCollectionGQLQuery, getCollectionsGQLQuery, organizeCollectionsGQLMutation, organizeSpacesInCollectionMutation, updateCollectionGQLMutation, } from '../../graphql/index.js';
export class CollectionsClient {
    constructor(client) {
        this.client = client;
    }
    async create(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: createCollectionGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.createCollection;
    }
    async list(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getCollectionsGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.collections;
    }
    async get(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: getCollectionGQLQuery(fields),
            variables,
            customToken: accessToken,
        });
        return result.collection;
    }
    async update(variables, accessToken) {
        const result = await this.client.authorizedRequest({
            query: updateCollectionGQLMutation(),
            variables,
            customToken: accessToken,
        });
        return result.updateCollection;
    }
    async delete(id, accessToken) {
        const result = await this.client.authorizedRequest({
            query: deleteCollectionGQLMutation(),
            variables: { id },
            customToken: accessToken,
        });
        return result.deleteCollection;
    }
    async organize(variables, fields = 'basic', accessToken) {
        const result = await this.client.authorizedRequest({
            query: organizeCollectionsGQLMutation(fields),
            variables,
            customToken: accessToken,
        });
        return result.organizeCollections;
    }
    async organizeSpaces(variables) {
        const result = await this.client.authorizedRequest({
            query: organizeSpacesInCollectionMutation(),
            variables,
        });
        return result.organizeSpacesInCollection;
    }
}
