'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var gql = require('graphql-tag');
var gqlClient = require('@tribeplatform/gql-client');
var graphqlRequest = require('graphql-request');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var gql__default = /*#__PURE__*/_interopDefaultLegacy(gql);

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function embedGQLFields(fields) {
    return `
    author
    author_url
    description
    html
    id
    provider_name
    thumbnail_height
    thumbnail_url
    thumbnail_width
    title
    type
    url  
  `;
}

function emojiGQLFields() {
    return `
    __typename
    id
    text
  `;
}

const mediaURLGQLFields = () => {
    return `
    __typename
      full
      large
      medium
      small
      thumb
  `;
};

function imageGQLFields() {
    return `
    __typename
    id
    url
    width
    height
    dominantColorHex
    dpi
    cropHeight
    cropWidth
    cropX
    cropY
    cropZoom
    urls {
      ${mediaURLGQLFields()}
    }
  `;
}

const BASIC_MEDIA_FIELDS = {
    onImage: 'basic',
    onEmoji: 'basic',
};
const ALL_MEDIA_FIELDS = {
    onImage: 'all',
    onEmoji: 'all',
};
function mediaGQLFields(fields = 'basic') {
    if (fields === 'basic')
        fields = BASIC_MEDIA_FIELDS;
    if (fields === 'all')
        fields = ALL_MEDIA_FIELDS;
    return `
      ... on Image {
        ${imageGQLFields()}
      }
      ... on Emoji {
        ${emojiGQLFields()}
      }
      ... on File {
        id
        name
        url
      }
  `;
}

const signedUrlGQLFields = () => {
    return `
    fields
    mediaId
    mediaUrl
    signedUrl
    urls {
      ${mediaURLGQLFields()}
    }
  `;
};

function embedGQLQuery() {
    return gql__default["default"] `
    query embed($url: String!, $options: String) {
      embed(input: { url: $url, options: $options }) {
        ${embedGQLFields()}
      }
    }
  `;
}
const createImageGQLMutation = () => gql__default["default"] `
  mutation createImages($input: [CreateImageInput!]!) {
    createImages(input: $input) {
      ${signedUrlGQLFields()}
    }
  }
`;
const createEmojisGQLMutation = () => gql__default["default"] `
  mutation CreateEmojis($input: [CreateEmojiInput!]!) {
    createEmojis(input: $input) {
      ${emojiGQLFields()}
    }
  }
`;
const updateImageGQLMutation = () => gql__default["default"] `
  mutation updateImage($id: String!, $input: UpdateImageInput!) {
    updateImage(id: $id, input: $input) {
      ${imageGQLFields()}
    }
  }
`;
const createFilesGQLMutation = () => gql__default["default"] `
  mutation createFiles($input: [CreateFileInput!]!) {
    createFiles(input: $input) {
      ${signedUrlGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function isAuthorizedGQLFields(fields) {
    return `
    authorized
    reason
    requiredPlan
  `;
}

function inputPathPermissionsGQLFields(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
fields) {
    return `
    path
    isAuthorized {
      ${isAuthorizedGQLFields()}
    }
  `;
}

function pathPermissionsGQLFields(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
fields) {
    return `
    path
    isAuthorized {
      ${isAuthorizedGQLFields()}
    }
  `;
}

function actionPermissionGQLFields(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
fields) {
    return `
    name
    isAuthorized {
      ${isAuthorizedGQLFields()}
    }
    inputPermissions {
      ${inputPathPermissionsGQLFields()}
    }
    outputPermissions {
      ${pathPermissionsGQLFields()}
    }
  `;
}

const BASIC_MEMBER_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_MEMBER_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
};
function memberAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_MEMBER_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_MEMBER_AUTH_MEMBER_PROPS_FIELDS;
    return `
    context
    scopes
    ${fields.permissions
        ? `
      permissions {
        ${actionPermissionGQLFields(fields.permissions)}
      }
    `
        : ``}
  `;
}

const BASIC_NETWORK_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_NETWORK_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
};
function networkAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_NETWORK_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_NETWORK_AUTH_MEMBER_PROPS_FIELDS;
    return `
    context
    scopes
    ${fields.permissions
        ? `
      permissions {
        ${actionPermissionGQLFields(fields.permissions)}
      }
    `
        : ``}
  `;
}

function getPermissionsGQLQuery(fields) {
    return gql__default["default"] `
    query GetPermissions($contexts: [PermissionsContextInput!] = []) {
      permissions(contexts: $contexts) {
        contextAwareActions {
          context
          entityActions {
            id
            actions {
              ${actionPermissionGQLFields()}
            }
          }
        }
      }
    }
  `;
}

const BASIC_POST_TYPE_FIELDS = {};
const ALL_POST_TYPE_FIELDS = {
    validReplyTypes: 'basic',
};
function postTypeGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_POST_TYPE_FIELDS;
    if (fields === 'all')
        fields = ALL_POST_TYPE_FIELDS;
    return `
    context
    id
    name
    pluralName
    slug
    createdAt
    primaryReactionType
    singleChoiceReactions
    updatedAt
    mappings {
      key
      field
      type
      title
      description
      required
      isMainContent
      isSearchable
      default
    }
    ${fields.validReplyTypes
        ? `
      validReplyTypes {
        ${postTypeGQLFields(fields.validReplyTypes)}
      }
    `
        : ``}
  `;
}

const BASIC_POST_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_POST_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
    availableReplyTypes: 'basic',
    canReact: true,
    memberPostNotificationSettingsEnabled: true,
};
function postAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_POST_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_POST_AUTH_MEMBER_PROPS_FIELDS;
    return `
      context
      scopes
      ${fields.permissions
        ? `
        permissions {
          ${actionPermissionGQLFields(fields.permissions)}
        }
      `
        : ``}
      ${fields.availableReplyTypes
        ? `
          availableReplyTypes {
              ${postTypeGQLFields(fields.availableReplyTypes)}
          }
          `
        : ''}
      ${fields.canReact
        ? `
      canReact
      `
        : ''}
      ${fields.memberPostNotificationSettingsEnabled
        ? `
      memberPostNotificationSettingsEnabled
      `
        : ''}
    `;
}

const BASIC_SPACE_AUTH_MEMBER_PROPS_FIELDS = {};
const ALL_SPACE_AUTH_MEMBER_PROPS_FIELDS = {
    permissions: 'basic',
    availablePostTypes: 'basic',
};
function spaceAuthMemberPropsGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_AUTH_MEMBER_PROPS_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_AUTH_MEMBER_PROPS_FIELDS;
    return `
    context
    scopes
    membershipStatus
    ${fields.permissions
        ? `
      permissions {
        ${actionPermissionGQLFields(fields.permissions)}
      }
    `
        : ``}
    ${fields.availablePostTypes
        ? `
      availablePostTypes {
        ${postTypeGQLFields(fields.availablePostTypes)}
      }`
        : ''}
  `;
}

function roleGQLFields(fields) {
    return `
    id
    name
    type
    description
    visible
    ${fields === 'all' ? 'scopes' : ''}
  `;
}

const BASIC_MEMBER_FIELDS = {};
const ALL_MEMBER_FIELDS = {
    profilePicture: 'basic',
    banner: 'basic',
    authMemberProps: 'basic',
    fields: 'basic',
    sessions: 'basic',
    activeSession: 'basic',
    score: 'basic',
};
const DEFAULT_MEMBER_FIELDS = {
    authMemberProps: 'all',
    banner: 'all',
    profilePicture: 'all',
    role: 'basic',
    fields: 'all',
};
function memberGQLFields(fields) {
    var _a, _b;
    if (fields === 'basic')
        fields = BASIC_MEMBER_FIELDS;
    if (fields === 'all')
        fields = ALL_MEMBER_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_MEMBER_FIELDS;
    return `
    displayName
    name
    id
    attributes {
      locale
    }
    profilePictureId
    bannerId
    status
    username
    email
    emailStatus
    newEmail
    tagline
    lastSeenAt
    createdAt
    updatedAt
    relativeUrl
    url
    ${fields.role
        ? `
        role {
          ${roleGQLFields(fields.role)}
        }
      `
        : ''}
    ${fields.banner
        ? `
      banner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.profilePicture
        ? `
      profilePicture {
        ${mediaGQLFields(fields.profilePicture)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${memberAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.fields
        ? `
      fields {
        key
        value
      }
    `
        : ``}
    ${fields.sessions
        ? `
      sessions {
        active
        country
        createdAt
        deviceBrand
        id
        ip
        lastActivityAt
        os
        osVersion
      }
    `
        : ``}
    ${fields.activeSession
        ? `
      activeSession {
        active
        country
        createdAt
        deviceBrand
        id
        ip
        lastActivityAt
        os
        osVersion
      }
    `
        : ``}
    ${fields.score ? 'score' : ''}
    ${(fields === null || fields === void 0 ? void 0 : fields.extraProperties)
        ? `
      extraProperties ${((_b = (_a = fields === null || fields === void 0 ? void 0 : fields.extraProperties) === null || _a === void 0 ? void 0 : _a.variables) === null || _b === void 0 ? void 0 : _b.keys)
            ? `(keys: ["${fields.extraProperties.variables.keys.join('","')}"])`
            : ``} {
        key
        value
      }
    `
        : ``}
  `;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const blockGQLFields = (fields) => `
  id
  name
  props
  children
  output
`;

const slateGQLFields = (fields) => `
  id
  rootBlock
  blocks {
    ${blockGQLFields()}
  }
  restrictions {
    nonEditableBlocks
    lockedChildrenBlocks
    nonRemovableBlocks
  }
`;

const navigationSlatesGQLFields = (fields) => `
  header {
    ${slateGQLFields()}
  }
  sidebar1 {
    ${slateGQLFields()}
  }
  sidebar2 {
    ${slateGQLFields()}
  }
  footer {
    ${slateGQLFields()}
  }
`;

const updateSlatesGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateSlates($input: [UpdateSlateInput!]!) {
    updateSlates(input: $input) {
      ${slateGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function tagGQLFields(fields) {
    return `
    description
    id
    slug
    title
  `;
}

const BASIC_HIGHLIGHTED_TAG_FIELDS = {
    tag: 'basic',
};
const ALL_HIGHLIGHTED_TAG_FIELDS = {
    tag: 'all',
};
function highlightedTagGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_HIGHLIGHTED_TAG_FIELDS;
    if (fields === 'all')
        fields = ALL_HIGHLIGHTED_TAG_FIELDS;
    return `
    indent
    text
    type
    ${fields.tag
        ? `
      tag {
        ${tagGQLFields(fields.tag)}
      }`
        : ``}
  `;
}

const BASIC_SPACE_SEO_DETAIL_FIELDS = {};
const ALL_SPACE_SEO_DETAIL_FIELDS = {
    image: 'basic',
};
function spaceSeoDetailGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_SEO_DETAIL_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_SEO_DETAIL_FIELDS;
    return `
    description
    title
    ${fields.image
        ? `
      image {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
  `;
}

const BASIC_SPACE_FIELDS = {};
const ALL_SPACE_FIELDS = {
    seoDetail: 'basic',
    postsCount: 'basic',
    image: 'basic',
    banner: 'basic',
    highlightedTags: 'basic',
    createdBy: 'basic',
    collection: 'basic',
    authMemberProps: 'basic',
    slate: 'all',
};
const DEFAULT_SPACE_FIELDS = {
    authMemberProps: 'all',
    banner: 'basic',
    image: 'basic',
    postsCount: 'basic',
    highlightedTags: {
        tag: 'basic',
    },
    slate: 'all',
    collection: 'basic',
};
function spaceGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_SPACE_FIELDS;
    return `
    id
    name
    description
    slug
    type
    layout
    address {
      path
      exact
      editable
    }
    createdById
    groupId
    imageId
    bannerId
    membersCount
    createdAt
    private
    hidden
    inviteOnly
    nonAdminsCanInvite
    customOrderingIndexInGroup
    whoCanPost
    whoCanReact
    whoCanReply
    customSeoDetail {
      description
      noIndex
      thumbnail {
        ${mediaGQLFields()}
      }
      thumbnailId
      title
    }
    relativeUrl
    url
    ${fields.postsCount ? `postsCount` : ``}
    ${fields.image
        ? `
      image {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
    ${fields.banner
        ? `
      banner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.highlightedTags
        ? `
      highlightedTags {
        ${highlightedTagGQLFields(fields.highlightedTags)}
      }

    `
        : ``}
    ${fields.seoDetail
        ? `
      seoDetail {
        ${spaceSeoDetailGQLFields(fields.seoDetail)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${memberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.collection
        ? `
      collection {
        ${collectionGQLFields(fields.collection)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${spaceAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.slate
        ? `
        slate {
          ${slateGQLFields()}
        }
    `
        : ``}
  `;
}

const BASIC_COLLECTION_FIELDS = {};
const ALL_COLLECTION_FIELDS = {
    space: 'basic',
};
function collectionGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_COLLECTION_FIELDS;
    if (fields === 'all')
        fields = ALL_COLLECTION_FIELDS;
    return `
    id
    slug
    name
    description
    createdAt
    relativeUrl
    url
    ${fields.space
        ? `
      spaces(limit: 100) {
        totalCount
        edges {
          node {
            ${spaceGQLFields(fields.space)}
          }
        }
        nodes {
          ${spaceGQLFields(fields.space)}
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    `
        : ``}
  `;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const actionGQLFields = (fields) => {
    return `
    status
  `;
};

function getCollectionsGQLQuery(fields) {
    return gql__default["default"] `
    query GetCollections(
      $orderBy: CollectionListOrderByEnum
      $reverse: Boolean
    ) {
      collections(orderBy: $orderBy, reverse: $reverse) {
        ${collectionGQLFields(fields)}
      }
    }
  `;
}
function getCollectionGQLQuery(fields) {
    return gql__default["default"] `
    query GetCollection(
      $id: ID!
    ) {
      collection(id: $id) {
        ${collectionGQLFields(fields)}
      }
    }
  `;
}
function createCollectionGQLMutation(fields) {
    return gql__default["default"] `
    mutation CreateCollection($input: CreateCollectionInput!) {
      createCollection(input: $input) {
        ${collectionGQLFields(fields)}
      }
    }
  `;
}
function updateCollectionGQLMutation() {
    return gql__default["default"] `
    mutation UpdateCollection($id: ID!, $input: UpdateCollectionInput!) {
      updateCollection(id: $id, input: $input) {
        status
      }
    }
  `;
}
function deleteCollectionGQLMutation() {
    return gql__default["default"] `
    mutation DeleteCollection($id: ID!) {
      deleteCollection(id: $id) {
        status
      }
    }
  `;
}
const organizeCollectionsGQLMutation = (fields) => gql__default["default"] `
  mutation OrganizeCollections($ids: [String!]!) {
    organizeCollections(ids: $ids) {
      ${actionGQLFields()}
    }
  }
`;
const organizeSpacesInCollectionMutation = () => gql__default["default"] `
  mutation organizeSpacesInCollection(
    $collectionId: String!
    $spaceIds: [String!]!
  ) {
    organizeSpacesInCollection(
      collectionId: $collectionId
      spaceIds: $spaceIds
    ) {
      status
    }
  }
`;

const BASIC_SPACE_JOIN_REQUEST_FIELDS = {};
const ALL_SPACE_JOIN_REQUEST_FIELDS = {
    member: 'basic',
};
const spaceJoinRequestGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_SPACE_JOIN_REQUEST_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_JOIN_REQUEST_FIELDS;
    return `
    id
    spaceId
    status
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
  `;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function spaceRoleGQLFields(fields) {
    return `
    id
    name
    type
    description
  `;
}

const BASIC_SPACE_MEMBER_FIELDS = {};
const ALL_SPACE_MEMBER_FIELDS = {
    member: 'basic',
    role: 'basic',
    space: 'basic',
};
function spaceMemberGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_MEMBER_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_MEMBER_FIELDS;
    return `
    __typename
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
    ${fields.role
        ? `
      role {
        ${spaceRoleGQLFields(fields.role)}
      }
    `
        : ``}
    ${fields.space
        ? `
        space {
          ${spaceGQLFields(fields.space)}
        }
    `
        : ``}
  `;
}

function getSpaceMembersGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaceMembers(
      $spaceId: ID!
      $roleIds: [ID!]
      $limit: Int!
      $after: String
      $orderBy: SpaceMemberListOrderByEnum
      $reverse: Boolean
    ) {
      spaceMembers(
        spaceId: $spaceId
        roleIds: $roleIds
        limit: $limit
        after: $after
        orderBy: $orderBy
        reverse: $reverse
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceMemberGQLFields(fields)}
          }
        }
      }
    }
  `;
}
function addSpaceMemberGQLMutation(fields) {
    return gql__default["default"] `
    mutation AddSpaceMembers($input: [AddSpaceMemberInput!]!, $spaceId: ID!) {
      addSpaceMembers(input: $input, spaceId: $spaceId) {
        ${spaceMemberGQLFields(fields)}
      }
    }
  `;
}
function removeSpaceMembersGQLMutation() {
    return gql__default["default"] `
    mutation RemoveSpaceMembers($memberIds: [ID!]!, $spaceId: ID!) {
      removeSpaceMembers(memberIds: $memberIds, spaceId: $spaceId) {
        status
      }
    }
  `;
}
function getMemberSpacesGQLQuery(fields) {
    return gql__default["default"] `
    query GetMemberSpaces(
      $limit: Int!
      $after: String
      $memberId: ID!
      $collectionId: String
    ) {
      memberSpaces(
        limit: $limit
        after: $after
        memberId: $memberId
        collectionId: $collectionId
      ) {

        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceMemberGQLFields(fields)}
          }
        }
      }
    }
  `;
}

const getMemberSpaceMembershipRequestGQLQuery = (fields) => gql__default["default"] `
  query GetMemberSpaceMembershipRequest($status: SpaceJoinRequestStatus) {
    memberSpaceMembershipRequest(status: $status) {
      ${spaceJoinRequestGQLFields(fields)}
    }
  }
`;
const requestSpaceMembershipGQLMutation = (fields) => gql__default["default"] `
  mutation RequestSpaceMemberShip($spaceId: ID!) {
    requestSpaceMembership(spaceId: $spaceId) {
      ${spaceJoinRequestGQLFields(fields)}
    }
  }
`;
const approveSpaceMembershipRequestGQLMutation = (fields) => gql__default["default"] `
  mutation ApproveSpaceMembershipRequest(
    $spaceId: ID!
    $spaceMembershipRequestId: ID!
  ) {
    approveSpaceMembershipRequest(
      spaceId: $spaceId
      spaceMembershipRequestId: $spaceMembershipRequestId
    ) {
      ${actionGQLFields()}
    }
  }
`;
const declineSpaceMembershipRequestGQLMutation = (fields) => gql__default["default"] `
  mutation DeclineSpaceMembershipRequest(
    $spaceId: ID!
    $spaceMembershipRequestId: ID!
  ) {
    declineSpaceMembershipRequest(
      spaceId: $spaceId
      spaceMembershipRequestId: $spaceMembershipRequestId
    ) {
      ${actionGQLFields()}
    }
  }
`;
const spaceMembershipRequestsGQLQuery = (fields) => gql__default["default"] `
  query SpaceMembershipRequests(
    $spaceId: ID!
    $status: SpaceJoinRequestStatus
  ) {
    spaceMembershipRequests(spaceId: $spaceId, status: $status) {
      ${spaceJoinRequestGQLFields(fields)}
    }
  }
`;

function getSpaceRolesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaceRoles(
      $spaceId: ID!
      $orderBy: SpaceRoleListOrderByEnum
      $reverse: Boolean
    ) {
      spaceRoles(spaceId: $spaceId, orderBy: $orderBy, reverse: $reverse) {
        ${spaceRoleGQLFields()}
      }
    }
  `;
}
const updateMemberSpaceRoleGQLMutation = () => {
    return gql__default["default"] `
    mutation UpdateMemberSpaceRole(
      $input: UpdateSpaceMemberRoleInput!
      $memberId: ID!
      $spaceId: ID!
    ) {
      updateMemberSpaceRole(
        input: $input
        memberId: $memberId
        spaceId: $spaceId
      ) {
        status
      }
    }
  `;
};

const BASIC_PAGINATED_FIELDS = {};
const ALL_PAGINATED_FIELDS = {
    edges: {
        cursor: 'all',
        node: 'all',
    },
    nodes: 'all',
    pageInfo: {
        endCursor: 'all',
        hasNextPage: 'all',
    },
    totalCount: 'all',
};
function paginatedGQLFields(fields, innerGQLFieldsFn) {
    if (fields === 'basic')
        fields = BASIC_PAGINATED_FIELDS;
    if (fields === 'all')
        fields = ALL_PAGINATED_FIELDS;
    return `
  __typename
  ${fields.edges
        ? `
    edges {
      ${fields.edges.cursor
            ? `
        cursor
      `
            : ``}
      ${fields.edges.node
            ? `
        node {
          ${innerGQLFieldsFn(fields.edges.node)}
        }
      `
            : ``}
    }
  `
        : ``}
  ${fields.nodes
        ? `
    nodes {
      ${innerGQLFieldsFn(fields.nodes)}
    }
  `
        : ``}
  totalCount
  pageInfo {
      endCursor
      hasNextPage
  }
  `;
}

function fileGQLFields() {
    return `
    extension
    id
    name
    size
    url
    downloadUrl
  `;
}

function reactionGQLFields(fields) {
    var _a;
    return `
    count
    reacted
    reaction

    ${(fields === null || fields === void 0 ? void 0 : fields.fields) === 'all'
        ? `
    participants(limit: ${((_a = fields === null || fields === void 0 ? void 0 : fields.variables) === null || _a === void 0 ? void 0 : _a.limit) || 25}) {
      nodes {
        participant {
          id
          name
        }
      }
    }`
        : ``}
  `;
}

/* eslint-disable import/no-cycle */
const BASIC_POST_FIELDS = {
    owner: 'all',
};
const ALL_POST_FIELDS = {
    authMemberProps: 'all',
    postType: 'basic',
    owner: 'all',
    createdBy: 'basic',
    tags: 'basic',
    attachments: 'basic',
    embeds: 'basic',
    mentions: 'basic',
    space: 'basic',
    reactions: { fields: 'basic', variables: { limit: 25 } },
    replies: { fields: 'basic', variables: { limit: 2 } },
    repliedTos: 'basic',
    repliedTo: 'basic',
};
const DEFAULT_POST_FIELDS = {
    tags: 'basic',
    owner: {
        member: { profilePicture: 'basic' },
    },
    postType: 'basic',
    embeds: 'basic',
    mentions: 'basic',
    space: 'default',
    attachments: 'basic',
    authMemberProps: 'all',
    reactions: { fields: 'all', variables: { limit: 25 } },
    repliedTos: 'basic',
    replies: {
        fields: {
            authMemberProps: 'all',
            embeds: 'basic',
            mentions: 'basic',
            attachments: 'basic',
            owner: {
                member: { profilePicture: 'basic' },
            },
            reactions: { fields: 'all', variables: { limit: 25 } },
        },
        variables: {
            limit: 2,
            reverse: true,
        },
    },
};
const WITH_REPLY_POST_FIELDS = Object.assign(Object.assign({}, DEFAULT_POST_FIELDS), { replies: {
        fields: 'default',
        variables: { limit: 2, reverse: true },
    } });
function postGQLFields(fields) {
    var _a, _b, _c;
    if (fields === 'basic')
        fields = BASIC_POST_FIELDS;
    if (fields === 'all')
        fields = ALL_POST_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_POST_FIELDS;
    if (fields === 'withReply')
        fields = WITH_REPLY_POST_FIELDS;
    return `
    id
    slug
    mappingFields {
      key
      type
      value
    }
    followersCount
    postTypeId
    reactionsCount
    hasMoreContent
    isAnonymous
    isHidden
    shortContent
    createdAt
    ownerId
    createdById
    status
    spaceId
    imageIds
    pinnedInto
    repliesCount
    totalRepliesCount
    repliedToIds
    repliedToId
    topicIds
    title
    embedIds
    mentionedMembers
    primaryReactionType
    customSeoDetail {
      description
      noIndex
      thumbnail {
        ${mediaGQLFields()}
      }
      thumbnailId
      title
    }
    relativeUrl
    url
    ${fields.attachments
        ? `
        attachments {
          ${fileGQLFields()}
        }
      `
        : ''}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${postAuthMemberPropsGQLFields(fields.authMemberProps)}
      }`
        : ``}
    ${fields.postType
        ? `
      postType {
        ${postTypeGQLFields(fields.postType)}
      }
    `
        : ``}
    ${fields.owner
        ? `
      owner {
        ${spaceMemberGQLFields(fields.owner)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${spaceMemberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.tags
        ? `
      tags {
        ${tagGQLFields(fields.tags)}
      }
    `
        : ``}
    ${fields.embeds
        ? `
      embeds {
        ${embedGQLFields(fields.embeds)}
      }
    `
        : ``}
    ${fields.mentions
        ? `
      mentions {
        ${memberGQLFields(fields.mentions)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
    ${fields.reactions
        ? `
      reactions {
        ${reactionGQLFields(fields.reactions)}
      }
    `
        : ``}
    ${((_a = fields.replies) === null || _a === void 0 ? void 0 : _a.fields)
        ? `
      replies(limit: ${fields.replies.variables.limit || 1}, reverse: ${((_c = (_b = fields.replies) === null || _b === void 0 ? void 0 : _b.variables) === null || _c === void 0 ? void 0 : _c.reverse) || false} ) {
        edges {
          cursor
          node {
            ${postGQLFields(fields.replies.fields)}
          }
        }
        nodes {
          ${postGQLFields(fields.replies.fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    `
        : ``}
    ${fields.repliedTo
        ? `
      repliedTo {
        ${postGQLFields(fields.repliedTo)}
      }
    `
        : ``}
    ${fields.repliedTos
        ? `
      repliedTos {
        ${postGQLFields(fields.repliedTos)}
      }
    `
        : ``}
  `;
}

const pageGqlFields = (fields = { space: 'default' }) => {
    return `
    seoDetail {
      additionalMeta {
        type
        properties {
          key
          value
        }
      }
      description
      jsonld
      title
      thumbnail {
        ${mediaGQLFields()}
      }
    }
    ${fields.space
        ? `space {
      ${spaceGQLFields(fields.space)}
    }`
        : ''}
  `;
};

function createSpaceGQLQuery(fields) {
    return gql__default["default"] `
    mutation CreateSpace($input: CreateSpaceInput!) {
      createSpace(input: $input) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getSpacesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaces(
      $after: String
      $before: String
      $collectionId: String
      $limit: Int!
      $memberId: ID
      $offset: Int
      $orderBy: SpaceListOrderByEnum
      $query: String
      $reverse: Boolean
      $type: [SpaceType!]
    ) {
      spaces(
        after: $after
        before: $before
        collectionId: $collectionId
        limit: $limit
        memberId: $memberId
        offset: $offset
        orderBy: $orderBy
        query: $query
        reverse: $reverse
        type: $type
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceGQLFields(fields)}
          }
        }
        nodes {
          ${spaceGQLFields(fields)}
        }
      }
    }
  `;
}
function getSpacesByIdsGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacesByIds($ids: [ID!]!) {
      spacesByIds(ids: $ids) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getSpacesBySlugsGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacesBySlugs($slugs: [String!]!) {
      spacesBySlugs(slugs: $slugs) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getSpaceGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpace($id: ID, $slug: ID, $path: String) {
      space(id: $id, slug: $slug, path: $path) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
}
function getPageGqlQuery(fields) {
    return gql__default["default"] `
    query page($path: String!) {
      page(path:$path) {
        ${pageGqlFields(fields)}
      }
    }
  `;
}
const organizeSpacesInCollectionGQLMutation = (fields) => gql__default["default"] `
  mutation OrganizeSpacesInCollection(
    $collectionId: String!
    $spaceIds: [String!]!
  ) {
    organizeSpacesInCollection(
      collectionId: $collectionId
      spaceIds: $spaceIds
    ) {
      ${actionGQLFields()}
    }
  }
`;
const updateSpaceGQLMutation = (fields) => gql__default["default"] `
    mutation updateSpace($id: ID!, $input: UpdateSpaceInput!) {
      updateSpace(id: $id input: $input) {
        ${spaceGQLFields(fields)}
      }
    }
  `;
const joinSpaceGQLMutation = () => gql__default["default"] `
  mutation joinSpace($spaceId: ID!) {
    joinSpace(spaceId: $spaceId) {
      status
      __typename
    }
  }
`;
const leaveSpaceGQLMutation = () => gql__default["default"] `
  mutation leaveSpace($spaceId: ID!) {
    leaveSpace(spaceId: $spaceId) {
      status
      __typename
    }
  }
`;
const getSpacePinnedPostGQLQuery = (fields) => gql__default["default"] `
  query GetSpacePinnedPosts($spaceId: ID!) {
    spacePinnedPosts(spaceId: $spaceId) {
      ${postGQLFields(fields)}
    }
  }
`;
const getSpaceTaggedPostsGQLQuery = (fields) => gql__default["default"] `
  query GetPostsByTag(
    $spaceId: ID!
    $tagId: ID!
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
  ) {
    tagPosts(
      spaceId: $spaceId
      tagId: $tagId
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${postGQLFields(fields)}
        }
      }
      nodes {
        ${postGQLFields(fields)}
      }
    }
  }
`;
const updateSpaceHighlightedTagsMutation = () => gql__default["default"] `
  mutation updateSpaceHighlightedTags(
    $input: UpdateHighlightedTags!
    $spaceId: ID!
  ) {
    updateSpaceHighlightedTags(input: $input, spaceId: $spaceId) {
      status
      __typename
    }
  }
`;
const exploreSpacesGQLQuery = (fields) => gql__default["default"] `
  query ExploreSpaces(
    $after: String
    $before: String
    $collectionId: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
  ) {
    exploreSpaces(
      after: $after
      before: $before
      collectionId: $collectionId
      limit: $limit
      offset: $offset
      reverse: $reverse
    ) {
      ${paginatedGQLFields(fields, spaceGQLFields)}
    }
  }
`;
const deleteSpaceGQLMutation = (fields) => gql__default["default"] `
  mutation DeleteSpace($id: ID!) {
    deleteSpace(id: $id) {
      ${actionGQLFields()}
    }
  }
`;

function getMemberPostsGQLQuery(fields) {
    return gql__default["default"] `
    query getMemberPost(
      $after: String
      $before: String
      $hasParent: Boolean
      $limit: Int!
      $memberId: ID!
      $offset: Int
      $reverse: Boolean
    ) {
      memberPosts(
        after: $after
        before: $before
        hasParent: $hasParent
        limit: $limit
        memberId: $memberId
        offset: $offset
        reverse: $reverse
      ) {
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}

function getPostGQLQuery(fields) {
    return gql__default["default"] `
    query GetPost(
      $id: ID!
    ) {
      post(id: $id) {
        ${postGQLFields(fields)}
      }
    }
  `;
}
function getPostsGQLQuery(fields) {
    return gql__default["default"] `
    query GetPosts(
      $after: String
      $before: String
      $excludePins: Boolean
      $filterBy: [PostListFilterByInput!]
      $limit: Int!
      $offset: Int
      $orderBy: PostListOrderByEnum
      $postTypeIds: [String!]
      $reverse: Boolean
      $spaceIds: [ID!]
    ) {
      posts(
        after: $after
        before: $before
        excludePins: $excludePins
        filterBy: $filterBy
        limit: $limit
        offset: $offset
        orderBy: $orderBy
        postTypeIds: $postTypeIds
        reverse: $reverse
        spaceIds: $spaceIds
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
      }
    }
  `;
}
function getRepliesGQLQuery(fields) {
    return gql__default["default"] `
    query replies(
      $after: String
      $before: String
      $excludePins: Boolean
      $limit: Int!
      $offset: Int
      $orderBy: PostListOrderByEnum
      $postId: ID!
      $reverse: Boolean
    ) {
      replies(
        after: $after
        before: $before
        excludePins: $excludePins
        limit: $limit
        offset: $offset
        orderBy: $orderBy
        postId: $postId
        reverse: $reverse
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
      }
    }
  `;
}
function createPostGQLQuery(fields) {
    return gql__default["default"] `
    mutation createPost($spaceId: ID!, $input: CreatePostInput!) {
      createPost(input: $input, spaceId: $spaceId) {
        ${postGQLFields(fields)}
      }
    }
  `;
}
function getFeedGQLQuery(fields) {
    return gql__default["default"] `
    query getFeed(
      $after: String
      $before: String
      $filterBy: [PostListFilterByInput!]
      $limit: Int!
      $offset: Int
      $onlyMemberSpaces: Boolean
      $orderBy: PostListOrderByEnum
      $postTypeIds: [String!]
      $reverse: Boolean
    ) {
      feed(
        after: $after
        before: $before
        filterBy: $filterBy
        limit: $limit
        offset: $offset
        onlyMemberSpaces: $onlyMemberSpaces
        orderBy: $orderBy
        postTypeIds: $postTypeIds
        reverse: $reverse
      ) {
        edges {
          cursor
          node {
            ${postGQLFields(fields)}
          }
        }
        nodes {
          ${postGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}
const addReactionGQLMutation = (fields) => gql__default["default"] `
  mutation addReaction($input: AddReactionInput!, $postId: ID!) {
    addReaction(input: $input, postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;
const removeReactionGQLMutation = (fields) => gql__default["default"] `
  mutation removeReaction($reaction: String!, $postId: ID!) {
    removeReaction(reaction: $reaction, postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;
const deletePostGQLMutation = (fields) => gql__default["default"] `
  mutation DeletePost($id: ID!) {
    deletePost(id: $id) {
      ${actionGQLFields()}
    }
  }
`;
const updatePostGQLMutation = (fields) => gql__default["default"] `
  mutation UpdatePost($id: ID!, $input: UpdatePostInput!) {
    updatePost(id: $id, input: $input) {
      ${postGQLFields(fields)}
    }
  }
`;
const hidePostGQLMutation = () => gql__default["default"] `
  mutation hidePost($id: ID!) {
    hidePost(id: $id) {
      status
      __typename
    }
  }
`;
const unhidePostGQLMutation = () => gql__default["default"] `
  mutation unhidePost($id: ID!) {
    unhidePost(id: $id) {
      status
      __typename
    }
  }
`;
const pinPostToSpaceGQLMutation = (fields) => gql__default["default"] `
  mutation PinPostToSpace($postId: ID!) {
    pinPostToSpace(postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;
const unpinPostFromSpaceGQLMutation = (fields) => gql__default["default"] `
  mutation UnpinPostFromSpace($postId: ID!) {
    unpinPostFromSpace(postId: $postId) {
      ${actionGQLFields()}
    }
  }
`;

function getPostTypeGQLQuery(fields) {
    return gql__default["default"] `
    query GetPostType($id: ID!) {
      postType(id: $id) {
        __typename
        ${postTypeGQLFields(fields)}
      }
    }
  `;
}
function getPostTypesGQLQuery(fields) {
    return gql__default["default"] `
    query GetPostTypes(
      $after: String
      $before: String
      $limit: Int!
      $offset: Int
      $reverse: Boolean
      $context: PostTypeContext
      $query: String
    ) {
      postTypes(
        after: $after
        before: $before
        limit: $limit
        offset: $offset
        reverse: $reverse
        context: $context
        query: $query
      ) {
        edges {
          cursor
          node {
            __typename
            ${postTypeGQLFields(fields)}
          }
        }
        nodes {
          __typename
          ${postTypeGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}

const postReactionParticipantsGQLQuery = (fields) => gql__default["default"] `
  query PostReactionParticipants(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $postId: ID!
    $reaction: ID!
    $reverse: Boolean
  ) {
    postReactionParticipants(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      postId: $postId
      reaction: $reaction
      reverse: $reverse
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          participant {
            ${memberGQLFields(fields)}
          }
        }
      }
      nodes {
        participant {
          ${memberGQLFields(fields)}
        }
      }
    }
  }
`;

function createReplyGQLQuery(fields) {
    return gql__default["default"] `
    mutation createReply($postId: ID!, $input: CreatePostInput!) {
      createReply(postId: $postId, input: $input) {
        ${postGQLFields(fields)}
      }
    }
  `;
}

const BASIC_SPACE_POST_TYPE_FIELDS = {};
const ALL_SPACE_POST_TYPE_FIELDS = {
    postType: 'basic',
    space: 'basic',
};
function spacePostTypeGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_POST_TYPE_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_POST_TYPE_FIELDS;
    return `
    spaceId
    postTypeId
    whoCanPost
    whoCanReact
    whoCanReply
    ${fields.postType
        ? `
      postType {
        ${postTypeGQLFields(fields.postType)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
          ${spaceGQLFields(fields.space)}
      }
      `
        : ``}
  `;
}

/* eslint-disable import/no-cycle */
function getSpacePostTypeGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacePostType(
      $spaceId: ID!
      $postTypeId: ID!
    ) {
      spacePostType(
          spaceId: $spaceId
          postTypeId: $postTypeId
    ) {
        ${spacePostTypeGQLFields(fields)}
      }
    }
  `;
}
function getSpacePostTypesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpacePostTypes(
      $after: String
      $before: String
      $limit: Int!
      $offset: Int
      $reverse: Boolean
      $spaceId: ID!
    ) {
      spacePostTypes(
        after: $after
        before: $before
        limit: $limit
        offset: $offset
        reverse: $reverse
        spaceIds: $spaceIds
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spacePostTypeGQLFields(fields)}
          }
        }
        nodes {
          ${spacePostTypeGQLFields(fields)}
        }
      }
    }
  `;
}
const updateSpacePostTypeGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateSpacePostType($spaceId: ID!, $input: UpdateSpacePostTypeInput!) {
    updatePost(id: $id, input: $input) {
      ${spacePostTypeGQLFields(fields)}
    }
  }
`;

function getTagsGQLQuery(fields) {
    return gql__default["default"] `
    query GetTags(
      $spaceId: ID
      $limit: Int!
      $orderBy: TagListOrderByEnum
      $reverse: Boolean
      $query: String
    ) {
      tags(
        spaceId: $spaceId
        limit: $limit
        orderBy: $orderBy
        reverse: $reverse
        query: $query
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${tagGQLFields()}
          }
        }
        nodes {
          ${tagGQLFields()}
        }
      }
    }
  `;
}
const createTagGQLMutation = (fields) => gql__default["default"] `
  mutation CreateTag($spaceId: ID!, $input: CreateTagInput!) {
    createTag(spaceId: $spaceId, input: $input) {
      ${tagGQLFields()}
    }
  }
`;
const updateTagGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateTag($id: ID!, $spaceId: ID!, $input: UpdateTagInput!) {
    updateTag(id: $id, spaceId: $spaceId, input: $input) {
      ${tagGQLFields()}
    }
  }
`;

const BASIC_SPACE_TYPE_FIELDS = {};
const ALL_SPACE_TYPE_FIELDS = {
    availablePostTypes: 'basic',
};
function spaceTypeGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SPACE_TYPE_FIELDS;
    if (fields === 'all')
        fields = ALL_SPACE_TYPE_FIELDS;
    return `
    id
    name
    ${fields.availablePostTypes
        ? `
      availablePostTypes {
        ${postTypeGQLFields(fields.availablePostTypes)}
      }
    `
        : ``}
  `;
}

function getSpaceTypesGQLQuery(fields) {
    return gql__default["default"] `
    query GetSpaceTypes(
      $limit: Int!
      $orderBy: SpaceTypeListOrderByEnum
      $reverse: Boolean
    ) {
      spaceTypes(limit: $limit, orderBy: $orderBy, reverse: $reverse) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            ${spaceTypeGQLFields(fields)}
          }
        }
      }
    }
  `;
}
const spaceTypeGQLQuery = (fields) => gql__default["default"] `
  query SpaceType($id: ID!) {
    spaceType(id: $id) {
      ${spaceTypeGQLFields(fields)}
    }
  }
`;
const createSpaceTypeGQLMutation = (fields) => gql__default["default"] `
  mutation CreateSpaceType($input: CreateSpaceTypeInput!) {
    createSpaceType(input: $input) {
      ${spaceTypeGQLFields(fields)}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const themeColorGQLFields = (fields) => `
  key
  weights {
    key
    value
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const themeColorsGQLFields = (fields) => `
  __typename
  dark {
    ${themeColorGQLFields()}
  }
  light {
    ${themeColorGQLFields()}
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const newThemesGQLFields = (fields) => `
  id
  name
  typography {
    key
    value
  }
  colors {
    ${themeColorsGQLFields()}
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const themeTokensGQLFields = (fields) => `
  breakpoints {
    key
    value
  }
  colors {
    key
    value
  }
  fontSizes {
    key
    value
  }
  fontWeights {
    key
    value
  }
  fontWeights {
    key
    value
  }
  opacity {
    key
    value
  }
  shadows {
    key
    value
  }
  sizes {
    key
    value
  }
  textStyles {
    key
    value
  }
  zIndices {
    key
    value
  }
`;

const BASIC_THEME_TOKENS_FIELDS = {};
const ALL_THEME_TOKENS_FIELDS = {
    tokens: 'basic',
};
const themeGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_THEME_TOKENS_FIELDS;
    if (fields === 'all')
        fields = ALL_THEME_TOKENS_FIELDS;
    return `
    name
    status
    ${fields.tokens
        ? `
      tokens {
        ${themeTokensGQLFields(fields.tokens)}
      }
    `
        : ``}
  `;
};

const upsertThemeGQLMutation = (fields) => gql__default["default"] `
  mutation UpsertTheme($input: UpsertTheme!) {
    upsertTheme(input: $input) {
      ${newThemesGQLFields()}
    }
  }
`;

const BASIC_THEME_FIELDS = {
    active: 'basic',
    drafts: 'basic',
    published: 'basic',
};
const ALL_THEME_FIELDS = {
    active: 'all',
    drafts: 'all',
    published: 'all',
};
function themesGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_THEME_FIELDS;
    if (fields === 'all')
        fields = ALL_THEME_FIELDS;
    return `
    __typename
    ${fields.active
        ? `
      active {
        ${themeGQLFields(fields.active)}
      }
    `
        : ``}
    ${fields.drafts
        ? `
      drafts {
        ${themeGQLFields(fields.drafts)}
      }
    `
        : ``}
    ${fields.published
        ? `
      published {
        ${themeGQLFields(fields.published)}
      }
    `
        : ``}
  `;
}

const badgeGQLFields = (fields) => `
  active
  backgroundColor
  daysUntilExpired
  id
  image {
    ${gqlClient.mediaGQLFields('basic')}
  }
  imageId
  longDescription
  name
  shortDescription
  textColor
  type
`;

const BASIC_CUSTOM_FIELD_SCHEMA_FIELDS$1 = {};
const ALL_CUSTOM_FIELD_SCHEMA_FIELDS$1 = {
    items: 'basic',
    properties: 'basic',
};
const baseCustomFieldSchemaGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_CUSTOM_FIELD_SCHEMA_FIELDS$1;
    if (fields === 'all')
        fields = ALL_CUSTOM_FIELD_SCHEMA_FIELDS$1;
    return `
    description
    key
    name
    required
    type
    typeOptions {
      dateType
      numberType
      relationType
      richTextType
      textType
    }
    validators {
      customErrorMessage
      validation
      value
    }
    ${fields.items
        ? `
      items {
        ${baseCustomFieldSchemaGQLFields(fields.items)}
      }
    `
        : ``}
    ${fields.properties
        ? `
      properties {
        ${baseCustomFieldSchemaGQLFields(fields.properties)}
      }
    `
        : ``}
  `;
};

const BASIC_CUSTOM_FIELD_SCHEMA_FIELDS = {};
const ALL_CUSTOM_FIELD_SCHEMA_FIELDS = {
    items: 'basic',
    properties: 'all',
};
const customFieldSchemaGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_CUSTOM_FIELD_SCHEMA_FIELDS;
    if (fields === 'all')
        fields = ALL_CUSTOM_FIELD_SCHEMA_FIELDS;
    return `
    default
    description
    key
    name
    archived
    readPrivacy {
      allow
    }
    required
    searchable
    settings {
      key
      value
    }
    type
    typeOptions {
      dateType
      numberType
      relationType
      richTextType
      textType
    }
    validators {
      customErrorMessage
      validation
      value
    }
    writePrivacy {
      allow
    }
    ${fields.items
        ? `
      items {
        ${baseCustomFieldSchemaGQLFields(fields.items)}
      }
    `
        : ``}
    ${fields.properties
        ? `
      properties {
        ${baseCustomFieldSchemaGQLFields(fields.properties)}
      }
    `
        : ``}
  `;
};

const BASIC_CUSTOM_FIELDS_SCHEMA_FIELDS = {};
const ALL_CUSTOM_FIELDS_SCHEMA_FIELDS = {
    fields: 'all',
};
const customFieldsSchemaGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_CUSTOM_FIELDS_SCHEMA_FIELDS;
    if (fields === 'all')
        fields = ALL_CUSTOM_FIELDS_SCHEMA_FIELDS;
    return `
  __typename
  ${fields.fields
        ? `
    fields {
      ${customFieldSchemaGQLFields(fields.fields)}
    }
  `
        : ``}
`;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function customCodeGQLFields(fields) {
    return `
    anonymize
    position
    code
  `;
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function topNavigationGQLFields(fields) {
    return `
    enabled
    items {
      link
      openInNewWindow
      text
      type
    }
  `;
}
function getNetworkGQLQuery(fields) {
    return gql__default["default"] `
    query getNetwork {
      network {
        ${networkGQLFields(fields)}
      }
    }
  `;
}
function updateNetworkGQLQuery(fields) {
    return gql__default["default"] `
    mutation updateNetwork($input: UpdateNetworkInput!) {
      updateNetwork(input: $input) {
        ${networkGQLFields(fields)}
      }
    }
  `;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const planGQLFields = (fields) => `
  createdAt
  endDate
  extendable
  memberCapacity
  name
  renewDate
  renewalType
  seatCapacity
  startDate
  trial
`;

const BASIC_NETWORK_FIELDS = {};
const ALL_NETWORK_FIELDS = {
    activeTheme: 'basic',
    themes: 'basic',
    topNavigation: 'basic',
    logo: 'basic',
    favicon: 'basic',
    whoCanInvite: 'basic',
    defaultSpaces: 'basic',
    roles: 'basic',
    customCode: 'basic',
    authMemberProps: 'basic',
    subscriptionPlan: 'basic',
    systemSpaces: 'basic',
    memberFields: 'basic',
    customSeoDetail: 'basic',
    badges: 'basic',
};
const DEFAULT_NETWORK_FIELDS = {
    authMemberProps: 'all',
    customCode: 'all',
    defaultSpaces: {
        image: 'basic',
    },
    favicon: 'all',
    logo: 'all',
    roles: 'all',
    navigationSlates: 'all',
    themes: 'all',
    activeTheme: 'all',
    topNavigation: 'all',
    whoCanInvite: 'all',
    subscriptionPlan: 'all',
    systemSpaces: 'all',
    memberFields: 'all',
    customSeoDetail: 'all',
    badges: 'basic',
};
function networkGQLFields(fields) {
    var _a, _b;
    if (fields === 'basic')
        fields = BASIC_NETWORK_FIELDS;
    if (fields === 'all')
        fields = ALL_NETWORK_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_NETWORK_FIELDS;
    return `
    id
    companyName
    name
    description
    visibility
    membership
    logoId
    faviconId
    locale
    domain
    newDomain
    incidentEmails
    privacyPolicyUrl
    termsOfServiceUrl
    brandColor
    billingEmail
    status
    memberCapacity
    memberCapacityDeclared
    passwordComplexity
    seatsCapacity
    additionalSeatsCapacity
    seatCapacityDeclared
    tribeBranding
    whoCanInviteIds
    hideDefaultAuthenticationForm
    releaseChannel
    landingPages {
      landingPageForGuest
      landingPageForMember
      landingPageForNewMember
    }
    activeSso {
      logoutUrl
      settingsUrl
    }
    ${fields.navigationSlates
        ? `
      navigationSlates {
        ${navigationSlatesGQLFields(fields.navigationSlates)}
      }
    `
        : ``}
    ${fields.activeTheme
        ? `
      activeTheme {
        ${newThemesGQLFields(fields.activeTheme)}
      }
    `
        : ``}
    ${fields.themes
        ? `
      themes {
        ${themesGQLFields(fields.themes)}
      }
    `
        : ``}
    ${fields.topNavigation
        ? `
      topNavigation {
        ${topNavigationGQLFields(fields.topNavigation)}
      }
    `
        : ``}
    ${fields.logo
        ? `
      logo {
        ${mediaGQLFields(fields.logo)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      favicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.whoCanInvite
        ? `
      whoCanInvite {
        ${roleGQLFields(fields.whoCanInvite)}
      }
    `
        : ``}
    ${fields.defaultSpaces
        ? `
      defaultSpaces {
        ${spaceGQLFields(fields.defaultSpaces)}
      }
    `
        : ``}
    ${fields.roles
        ? `
      roles {
        ${roleGQLFields(fields.roles)}
      }
    `
        : ``}
    ${fields.customCode
        ? `
      customCodes(anonymize: false) {
        ${customCodeGQLFields(fields.customCode)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${networkAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.subscriptionPlan
        ? `
      subscriptionPlan {
        ${planGQLFields(fields.subscriptionPlan)}
      }
    `
        : ``}
    ${fields.systemSpaces
        ? `
      systemSpaces {
        ${spaceGQLFields(fields.systemSpaces)}
      }
    `
        : ``}
    ${fields.memberFields
        ? `
      memberFields {
        ${customFieldsSchemaGQLFields(fields.memberFields)}
      }
    `
        : ``}
    ${(fields === null || fields === void 0 ? void 0 : fields.customSeoDetail)
        ? `
      customSeoDetail {
        description
        noIndex
        thumbnail {
          ${mediaGQLFields('basic')}
        }
        thumbnailId
        title
      }
    `
        : ``}
    ${(fields === null || fields === void 0 ? void 0 : fields.extraProperties)
        ? `
      extraProperties ${((_b = (_a = fields === null || fields === void 0 ? void 0 : fields.extraProperties) === null || _a === void 0 ? void 0 : _a.variables) === null || _b === void 0 ? void 0 : _b.keys)
            ? `(keys: ["${fields.extraProperties.variables.keys.join('","')}"])`
            : ``} {
        key
        value
      }
    `
        : ``}
    ${(fields === null || fields === void 0 ? void 0 : fields.badges)
        ? `
      badges {
        ${badgeGQLFields(fields === null || fields === void 0 ? void 0 : fields.badges)}
      }
    `
        : ``}
  `;
}

const BASIC_NETWORK_PUBLIC_INFO_FIELDS = {};
const ALL_NETWORK_PUBLIC_INFO_FIELDS = {
    logo: 'basic',
};
function networkPublicInfoGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_NETWORK_PUBLIC_INFO_FIELDS;
    if (fields === 'all')
        fields = ALL_NETWORK_PUBLIC_INFO_FIELDS;
    return `
    domain
    id
    membership
    name
    status
    visibility
    faviconId
    favicon {
      ${mediaGQLFields('basic')}
    }
    logoId
    ${fields.logo
        ? `
      logo {
        ${mediaGQLFields(fields.logo)}
      }
    `
        : ``}
  `;
}

const BASIC_AUTH_TOKEN_FIELDS = {};
const ALL_AUTH_TOKEN_FIELDS = {
    member: 'basic',
    network: 'basic',
    networkPublicInfo: 'basic',
    role: 'basic',
};
const DEFAULT_AUTH_TOKEN_FIELDS = {
    member: 'default',
    network: 'default',
    networkPublicInfo: {
        logo: 'all',
    },
    role: 'all',
};
function authTokenGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_AUTH_TOKEN_FIELDS;
    if (fields === 'all')
        fields = ALL_AUTH_TOKEN_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_AUTH_TOKEN_FIELDS;
    return `
    accessToken
    refreshToken
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
    ${fields.network
        ? `
      network {
        ${networkGQLFields(fields.network)}
      }
    `
        : ``}
    ${fields.networkPublicInfo
        ? `
      networkPublicInfo {
        ${networkPublicInfoGQLFields(fields.networkPublicInfo)}
      }
    `
        : ``}
    ${fields.role
        ? `
      role {
        ${roleGQLFields(fields.role)}
      }
    `
        : ``}
  `;
}

function getTokensGQLQuery(fields) {
    return gql__default["default"] `
    query getTokens(
      $networkDomain: String
      $networkId: ID
      $otp: String
      $ssoToken: String
      $refreshToken: String
    ) {
      tokens(
        networkDomain: $networkDomain
        networkId: $networkId
        otp: $otp
        ssoToken: $ssoToken
        refreshToken: $refreshToken
      ) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function resendVerificationGQLQuery() {
    return gql__default["default"] `
    mutation resendVerification {
      resendVerification {
        status
      }
    }
  `;
}
function loginNetworkQuery(fields) {
    return gql__default["default"] `
    query loginNetwork($input: LoginNetworkWithPasswordInput!) {
      loginNetwork(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function ssoRedirectMutation(fields) {
    return gql__default["default"] `
    mutation ssoRedirect(
      $input: LoginWithSsoCodeInput!
    ) {
      ssoRedirect(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function joinNetworkMutation(fields) {
    return gql__default["default"] `
    mutation joinNetwork(
      $input: JoinNetworkInput!
    ) {
      joinNetwork(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function joinNetworkWithInvitationLinkMutation(fields) {
    return gql__default["default"] `
    mutation joinNetworkWithInvitationLink(
      $input: JoinNetworkWithLinkInput!
    ) {
      joinNetworkWithInvitationLink(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function joinNetworkWithTokenMutation(fields) {
    return gql__default["default"] `
    mutation joinNetworkWithToken(
      $input: JoinNetworkWithTokenInput!
    ) {
      joinNetworkWithToken(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function verifyMemberMutation(fields) {
    return gql__default["default"] `
    mutation verifyMember(
      $input: VerifyMemberInput!
    ) {
      verifyMember(input: $input) {
        ${authTokenGQLFields(fields)}
      }
    }
  `;
}
function ssosQuery() {
    return gql__default["default"] `
    query ssos($status: SsoStatus) {
      ssos(status: $status) {
        authorizationUrl
        status
        tokenUrl
        type
        userProfileUrl
        buttonText
        clientId
        clientSecret
        idpUrl
        logoutUrl
        name
        provider
        scopes
        settingsUrl
      }
    }
  `;
}
const sendResetPasswordEmailGQLMutation = () => gql__default["default"] `
  mutation SendResetPasswordEmail($email: String!) {
    sendResetPasswordEmail(email: $email) {
      status
    }
  }
`;
const authMemberQuery = (fields) => gql__default["default"] `
  query AuthMember {
    authMember {
      ${memberGQLFields(fields)}
    }
  }
`;
const logoutMutation = () => gql__default["default"] `
  mutation logoutNetwork($input: LogoutNetworkInput) {
    logoutNetwork(input: $input) {
      status
    }
  }
`;

const createBadgeGQLMutation = (fields) => gql__default["default"] `
  mutation CreateBadge($input: CreateBadgeInput!) {
    createBadge(input: $input) {
      ${badgeGQLFields()}
    }
  }
`;
const updateBadgeGQLMutation = (fields) => gql__default["default"] `
  mutation UpdateBadge($id: String!, $input: UpdateBadgeInput!) {
    updateBadge(id: $id, input: $input) {
      ${badgeGQLFields()}
    }
  }
`;
const deleteBadgeGQLMutation = () => gql__default["default"] `
  mutation DeleteBadge($id: String!) {
    deleteBadge(id: $id) {
      status
    }
  }
`;
const assignBadgeGQLMutation = () => gql__default["default"] `
  mutation AssignBadge($id: String!, $input: AssignOrRevokeBadgeInput!) {
    assignBadge(id: $id, input: $input) {
      status
    }
  }
`;
const revokeBadgeGQLMutation = () => gql__default["default"] `
  mutation RevokeBadge($id: String!, $input: AssignOrRevokeBadgeInput!) {
    revokeBadge(id: $id, input: $input) {
      status
    }
  }
`;

const clearNewDomainGQLMutation = () => gql__default["default"] `
  mutation ClearNewDomain {
    clearNewDomain {
      status
    }
  }
`;
const updateNewDomainGQLMutation = () => gql__default["default"] `
  mutation UpdateNewDomain($input: UpdateNewDomainInput!) {
    updateNewDomain(input: $input) {
      aaaarecordSuccess
      aaaarecords
      arecordSuccess
      arecords
      cnameSuccess
      cnames
      domain
      ns
      root
      success
      tribeARecords
      tribeCname
    }
  }
`;
const transferToNewDomainGQLMutation = () => gql__default["default"] `
  mutation TransferToNewDomain {
    transferToNewDomain {
      status
    }
  }
`;
const domainAvailabilityGQLQuery = () => gql__default["default"] `
  query DomainAvailability($input: DomainAvailabilityInput!) {
    domainAvailability(input: $input) {
      available
    }
  }
`;
const newDomainStatusGQLQuery = () => gql__default["default"] `
  query NewDomainStatus($domain: String!) {
    newDomainStatus(domain: $domain) {
      aaaarecordSuccess
      aaaarecords
      arecordSuccess
      arecords
      cnameSuccess
      cnames
      domain
      ns
      root
      success
      tribeARecords
      tribeCname
    }
  }
`;

const emailLogGQLFields = () => {
    return `
    createdAt
    id
    reason
    recipient
    status
    type
    updatedAt
  `;
};

const emailLogsGQLQuery = () => gql__default["default"] `
  query EmailLogs(
    $after: String
    $limit: Int!
    $recipient: String
    $reverse: Boolean
    $statuses: [EmailStatus!]
    $types: [EmailType!]
  ) {
    emailLogs(
      after: $after
      limit: $limit
      recipient: $recipient
      reverse: $reverse
      statuses: $statuses
      types: $types
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${emailLogGQLFields()}
        }
      }
    }
  }
`;

const BASIC_MEMBER_INVITATION_FIELDS = {};
const ALL_MEMBER_INVITATION_FIELDS = {
    invitee: 'basic',
    inviter: 'basic',
    role: 'basic',
    emailLog: 'basic',
};
function memberInvitationGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_MEMBER_INVITATION_FIELDS;
    if (fields === 'all')
        fields = ALL_MEMBER_INVITATION_FIELDS;
    return `
    createdAt
    expiresAt
    id
    invitationMessage
    inviteeId
    inviteeEmail
    inviteeName
    inviterId
    joinedAt
    status
    ${fields.invitee
        ? `
      invitee {
        ${memberGQLFields(fields.invitee)}
      }
    `
        : ``}
    ${fields.inviter
        ? `
      inviter {
        ${memberGQLFields(fields.inviter)}
      }
    `
        : ``}
    ${fields.role
        ? `
      role {
        ${roleGQLFields(fields.role)}
      }
    `
        : ``}
    ${fields.emailLog
        ? `
      emailLog {
        ${emailLogGQLFields()} 
      }
    `
        : ``}
  `;
}

function inviteMembersGQLQuery(fields) {
    return gql__default["default"] `
    mutation InviteMembers($input: InviteMembersInput!) {
      inviteMembers(input: $input) {
        ${memberInvitationGQLFields(fields)}
      }
    }
`;
}
function memberInvitationValidityGQLQuery(fields) {
    return gql__default["default"] `
    query memberInvitationValidity($token: String!) {
      memberInvitationValidity(token: $token) {
        ${memberInvitationGQLFields(fields)}
      }
    }
  `;
}
function invitationLinkValidityGQLQuery() {
    return gql__default["default"] `
    query invitationLinkValidity($id: String!) {
      invitationLinkValidity(id: $id) {
        id
        link
      }
    }
  `;
}
function getMemberInvitationsGQLQuery(fields) {
    return gql__default["default"] `
    query GetMemberInvitations(
      $limit: Int!
      $query: String
      $after: String
      $status: MemberInvitationStatus
      $reverse: Boolean
    ) {
      memberInvitations(
        limit: $limit
        query: $query
        after: $after
        status: $status
        reverse: $reverse
      ) {
        totalCount
        edges {
          node {
            ${memberInvitationGQLFields(fields)}
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
}
function getInvitationLinkGQLQuery() {
    return gql__default["default"] `
    query getInvitationLink {
      memberInvitationLink {
        link
      }
    }
  `;
}

function getMembersGQLQuery(fields) {
    return gql__default["default"] `
    query Members(
      $after: String
      $before: String
      $filterBy: [MemberListFilterByInput!]
      $limit: Int!
      $offset: Int
      $orderBy: String
      $query: String
      $reverse: Boolean
      $roleIds: [ID!]
      $status: [MemberStatusInput!]
    ){
      members(
        after: $after
        before: $before
        filterBy: $filterBy
        limit: $limit
        offset: $offset
        orderBy: $orderBy
        query: $query
        reverse: $reverse
        roleIds: $roleIds
        status: $status
      ) {
        totalCount
        edges {
          node {
            ${memberGQLFields(fields)}
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
}
function getMemberGQLQuery(fields) {
    return gql__default["default"] `
    query GetMember($id: ID!) {
      member(id: $id) {
        ${memberGQLFields(fields)}
      }
    }
  `;
}
function updateMemberGQLQuery(fields) {
    return gql__default["default"] `
    mutation UpdateMember($input: UpdateMemberInput!, $id: ID) {
      updateMember(id: $id, input: $input) {
        ${memberGQLFields(fields)}
      }
    }
  `;
}
function deleteMemberGQLMutation() {
    return gql__default["default"] `
    mutation DeleteMember($id: ID!) {
      deleteMember(id: $id) {
        status
      }
    }
  `;
}
const cancelEmailUpdateGQLMutation = () => gql__default["default"] `
  mutation CancelEmailUpdate($id: ID) {
    cancelEmailUpdate(id: $id) {
      status
    }
  }
`;

const addMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation AddMemberSchemaField($input: CustomFieldSchemaInput!) {
    addMemberSchemaField(input: $input) {
      ${networkGQLFields(fields)}
    }
  }
`;
const updateMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation UpdateMemberSchemaField($input: UpdateCustomFieldSchemaInput!) {
    updateMemberSchemaField(input: $input) {
      ${networkGQLFields(fields)}
    }
  }
`;
const archiveMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation ArchiveMemberSchemaField($key: String!) {
    archiveMemberSchemaField(key: $key) {
      ${networkGQLFields(fields)}
    }
  }
`;
const unArchiveMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation UnArchiveMemberSchemaField($key: String!) {
    unArchiveMemberSchemaField(key: $key) {
      ${networkGQLFields(fields)}
    }
  }
`;
const deleteMemberSchemaFieldGQLMutation = (fields) => graphqlRequest.gql `
  mutation DeleteMemberSchemaField($key: String!) {
    deleteMemberSchemaField(key: $key) {
      ${networkGQLFields(fields)}
    }
  }
`;
const reorderMemberSchemaFieldsGQLMutation = (fields) => graphqlRequest.gql `
  mutation ReorderMemberSchemaFields($input: [ReOrderSchemaFieldInput!]!) {
    reorderMemberSchemaFields(input: $input) {
      ${networkGQLFields(fields)}
    }
  }
`;

function getRolesGQLQuery(fields) {
    return gql__default["default"] `
    query GetRoles($orderBy: RoleListOrderByEnum, $reverse: Boolean) {
      roles(orderBy: $orderBy, reverse: $reverse) {
        ${roleGQLFields(fields)}
      }
    }
  `;
}

const BASIC_PLURAL_NETWORK_FIELDS = {};
const ALL_PLURAL_NETWORK_FIELDS = {
    activeTheme: 'basic',
    themes: 'basic',
    topNavigation: 'basic',
    logo: 'basic',
    favicon: 'basic',
    whoCanInvite: 'basic',
    defaultSpaces: 'basic',
    roles: 'basic',
    customCode: 'basic',
    authMemberProps: 'basic',
    subscriptionPlan: 'basic',
    systemSpaces: 'basic',
    memberFields: 'basic',
};
const DEFAULT_PLURAL_NETWORK_FIELDS = {
    authMemberProps: 'all',
    customCode: 'all',
    defaultSpaces: 'basic',
    favicon: 'all',
    logo: 'all',
    roles: 'all',
    navigationSlates: 'all',
    themes: 'all',
    activeTheme: 'all',
    topNavigation: 'all',
    whoCanInvite: 'all',
    subscriptionPlan: 'all',
    systemSpaces: 'all',
    memberFields: 'all',
};
function pluralNetworkGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_PLURAL_NETWORK_FIELDS;
    if (fields === 'all')
        fields = ALL_PLURAL_NETWORK_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_PLURAL_NETWORK_FIELDS;
    return `
    id
    companyName
    name
    description
    visibility
    membership
    logoId
    faviconId
    locale
    domain
    newDomain
    incidentEmails
    privacyPolicyUrl
    termsOfServiceUrl
    brandColor
    billingEmail
    status
    memberCapacityDeclared
    additionalSeatsCapacity
    seatCapacityDeclared
    tribeBranding
    whoCanInviteIds
    hideDefaultAuthenticationForm
    activeSso {
      logoutUrl
      settingsUrl
    }
    ${fields.navigationSlates
        ? `
      navigationSlates {
        ${navigationSlatesGQLFields(fields.navigationSlates)}
      }
    `
        : ``}
    ${fields.activeTheme
        ? `
      activeTheme {
        ${newThemesGQLFields(fields.activeTheme)}
      }
    `
        : ``}
    ${fields.themes
        ? `
      themes {
        ${themesGQLFields(fields.themes)}
      }
    `
        : ``}
    ${fields.topNavigation
        ? `
      topNavigation {
        ${topNavigationGQLFields(fields.topNavigation)}
      }
    `
        : ``}
    ${fields.logo
        ? `
      globalLogo {
        ${mediaGQLFields(fields.logo)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      globalFavicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.whoCanInvite
        ? `
      whoCanInvite {
        ${roleGQLFields(fields.whoCanInvite)}
      }
    `
        : ``}
    ${fields.defaultSpaces
        ? `
      defaultSpaces {
        ${spaceGQLFields(fields.defaultSpaces)}
      }
    `
        : ``}
    ${fields.roles
        ? `
      roles {
        ${roleGQLFields(fields.roles)}
      }
    `
        : ``}
    ${fields.customCode
        ? `
      customCodes(anonymize: false) {
        ${customCodeGQLFields(fields.customCode)}
      }
    `
        : ``}
    ${fields.authMemberProps
        ? `
      authMemberProps {
        ${networkAuthMemberPropsGQLFields(fields.authMemberProps)}
      }
    `
        : ``}
    ${fields.subscriptionPlan
        ? `
      subscriptionPlan {
        ${planGQLFields(fields.subscriptionPlan)}
      }
    `
        : ``}
    ${fields.systemSpaces
        ? `
      systemSpaces {
        ${spaceGQLFields(fields.systemSpaces)}
      }
    `
        : ``}
    ${fields.memberFields
        ? `
      memberFields {
        ${customFieldsSchemaGQLFields(fields.memberFields)}
      }
    `
        : ``}
  `;
}

const BASIC_APP_FIELDS = {};
const ALL_APP_FIELDS = {
    banner: 'basic',
    createdBy: 'basic',
    customCodes: 'basic',
    embeds: 'basic',
    favicon: 'basic',
    image: 'basic',
    images: 'basic',
    network: 'basic',
    updatedBy: 'basic',
};
const appGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_APP_FIELDS;
    if (fields === 'all')
        fields = ALL_APP_FIELDS;
    return `
    about
    authorName
    authorUrl
    clientId
    clientSecret
    comingSoon
    createdAt
    description
    docsUrl
    enabledContexts
    id
    imageId
    installed
    locked
    name
    networkId
    privacyPolicyUrl
    requiredPermissions
    requiredPlan
    secretToken
    slug
    standing
    status
    termsOfServiceUrl
    updatedAt
    webhookSignSecret
    webhookSubscriptions
    webhookUrl
    ${fields.banner
        ? `
      banner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${memberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.customCodes
        ? `
      customCodes {
        body
        head
      }
    `
        : ``}
    ${fields.embeds
        ? `
      embeds {
        ${embedGQLFields(fields.embeds)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      favicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.image
        ? `
      image {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
    ${fields.images
        ? `
      images {
        ${mediaGQLFields(fields.images)}
      }
    `
        : ``}
    ${fields.network
        ? `
      network {
        ${networkGQLFields(fields.network)}
      }
    `
        : ``}
    ${fields.updatedBy
        ? `
      updatedBy {
        ${memberGQLFields(fields.updatedBy)}
      }
    `
        : ``}
  `;
};

const BASIC_APP_INSTALLAION_FIELDS = {};
const ALL_APP_INSTALLATION_FIELDS = {
    app: 'basic',
    installedBy: 'basic',
    network: 'basic',
};
const appInstallationGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_APP_INSTALLAION_FIELDS;
    if (fields === 'all')
        fields = ALL_APP_INSTALLATION_FIELDS;
    return `
    appVersion
    context
    createdAt
    id
    installedAt
    permissions
    status
    updatedAt
    ${fields.app
        ? `
      app {
        ${appGQLFields(fields.app)}
      }
    `
        : ``}
    ${fields.installedBy
        ? `
      installedBy {
        ${memberGQLFields(fields.installedBy)}
      }
    `
        : ``}
    ${fields.network
        ? `
      network {
        ${networkGQLFields(fields.network)}
      }
    `
        : ``}
  `;
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getLimitedTokenGQLQuery(fields) {
    return gql__default["default"] `
    query limitedToken(
      $networkId: String!
      $context: PermissionContext!
      $entityId: String!
      $impersonateMemberId: String
    ) {
      limitedToken(
        networkId: $networkId
        context: $context
        entityId: $entityId
        impersonateMemberId: $impersonateMemberId
      ) {
        accessToken
      }
    }
  `;
}
const appGQLQuery = (fields) => gql__default["default"] `
  query App($id: ID, $slug: String) {
    app(id: $id, slug: $slug) {
      ${appGQLFields(fields)}
    }
  }
`;
const appsGQLQuery = (fields) => gql__default["default"] `
  query Apps(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $status: StoreItemStatus
  ) {
    apps(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${appGQLFields(fields)}
        }
      }
      nodes {
        ${appGQLFields(fields)}
      }
    }
  }
`;
const getAppNetworkSettingsGQLQuery = () => gql__default["default"] `
  query GetAppNetworkSettings($appId: ID!) {
    getAppNetworkSettings(appId: $appId)
  }
`;
const updateAppNetworkSettingsGQLMutation = () => gql__default["default"] `
  mutation UpdateAppNetworkSettings($appId: ID!, $settings: String!) {
    updateAppNetworkSettings(appId: $appId, settings: $settings) {
      data
      status
    }
  }
`;
const getAppSpaceSettingsGQLQuery = () => gql__default["default"] `
  query GetAppSpaceSettings($appId: ID!, $spaceId: ID!) {
    getAppSpaceSettings(appId: $appId, spaceId: $spaceId)
  }
`;
const installAppGQLMutation = (fields) => gql__default["default"] `
  mutation InstallApp($appId: ID!, $input: InstallAppInput!) {
    installApp(appId: $appId, input: $input) {
      ${appInstallationGQLFields(fields)}
    }
  }
`;
const uninstallAppGQLMutation = (fields) => gql__default["default"] `
  mutation UninstallApp($appInstallationId: ID!, $reason: String) {
    uninstallApp(appInstallationId: $appInstallationId, reason: $reason) {
      ${appInstallationGQLFields(fields)}
    }
  }
`;
const appInstallationsGQLQuery = (fields) => gql__default["default"] `
  query NetworkAppInstallations(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $status: AppInstallationStatus
  ) {
    getNetworkAppInstallations(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${appInstallationGQLFields(fields)}
        }
      }
      nodes {
        ${appInstallationGQLFields(fields)}
      }
    }
  }
`;

const confirmResetPasswordGQLMutation = () => gql__default["default"] `
  mutation ConfirmResetPassword($input: ConfirmResetPasswordInput!) {
    confirmResetPassword(input: $input) {
      status
    }
  }
`;
const updatePasswordWithTokenGQLMutation = () => gql__default["default"] `
  mutation UpdatePasswordWithToken($input: UpdatePasswordWithTokenInput!) {
    updatePasswordWithToken(input: $input) {
      status
    }
  }
`;
const deleteSsoMembershipGQLMutation = () => gql__default["default"] `
  mutation UpdatePasswordWithToken($memberId: String!, $type: SsoType!) {
    deleteSsoMembership(memberId: $memberId, type: $type) {
      status
    }
  }
`;

const ssoGQLFields = () => `
  authorizationUrl
  buttonText
  clientId
  clientSecret
  idpUrl
  logoutUrl
  name
  provider
  scopes
  settingsUrl
  status
  tokenUrl
  type
  userProfileUrl
`;

const updateCustomSsoGQLMutation = () => gql__default["default"] `
  mutation UpdateCustomSso($input: UpdateCustomSsoInput!) {
    updateCustomSso(input: $input) {
      ${ssoGQLFields()}
    }
  }
`;
const updateJwtSsoGQLMutation = () => gql__default["default"] `
  mutation updateJwtSso($input: UpdateJwtSsoInput!) {
    updateJwtSso(input: $input) {
      ${ssoGQLFields()}
    }
  }
`;
const updateDefaultSsoStatusGQLMutation = () => gql__default["default"] `
  mutation UpdateDefaultSsoStatus($sso: DefaultSsoType!, $status: SsoStatus!) {
    updateDefaultSsoStatus(sso: $sso, status: $status) {
      status
    }
  }
`;
const ssoMembershipsGQLQuery = () => gql__default["default"] `
  query SsoMemberships($memberId: String!) {
    ssoMemberships(memberId: $memberId) {
      id
      memberId
      ssoType
    }
  }
`;
const ssoUrlGQLQuery = () => gql__default["default"] `
  query SsoUrl($input: SsoUrlInput!) {
    ssoUrl(input: $input) {
      url
    }
  }
`;

const billingDetailsGQLFields = () => `
  address {
    city
    country
    postalCode
    state
    streetAddress
  }
  billingEmail
  card {
    expirationMonth
    expirationYear
    lastFourDigits
    updatedAt
  }
  companyName
  vat {
    text
    vatId
    vatType
  }
`;

const billingDetailsGQLQuery = () => gql__default["default"] `
  query BillingDetails {
    billingDetails {
      ${billingDetailsGQLFields()}
    }
  }
`;
const invoicesGQLQuery = () => gql__default["default"] `
  query Invoices {
    invoices {
      total
      status
      invoiceUrl
      date
      currency
      cardLastFourDigits
    }
  }
`;
const vatTypesGQLQuery = () => gql__default["default"] `
  query VatTypes {
    vatTypes {
      key
      placeholder
      text
      value
    }
  }
`;
const purchaseGQLMutation = () => gql__default["default"] `
  mutation Purchase($input: PurchaseInput!) {
    purchase(input: $input) {
      createdAt
      id
      status
      updatedAt
    }
  }
`;
const updateBillingDetailsGQLMutation = () => gql__default["default"] `
  mutation UpdateBillingDetails($input: BillingDetailsInput!) {
    updateBillingDetails(input: $input) {
      ${billingDetailsGQLFields()}
    }
  }
`;
const basketsGQLQuery = () => gql__default["default"] `
  query Baskets($input: BasketsInput!) {
    baskets(input: $input) {
      items {
        note
        title
        value {
          currency
          formattedValue
          value
        }
      }
      renewalType
      total {
        currency
        formattedValue
        value
      }
    }
  }
`;

const BASIC_GLOBAL_APP_FIELDS = {};
const ALL_GLOBAL_APP_FIELDS = {
    banner: 'basic',
    createdBy: 'basic',
    customCodes: 'basic',
    embeds: 'basic',
    favicon: 'basic',
    image: 'basic',
    images: 'basic',
    network: 'basic',
    updatedBy: 'basic',
};
const globalAppGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_GLOBAL_APP_FIELDS;
    if (fields === 'all')
        fields = ALL_GLOBAL_APP_FIELDS;
    return `
    about
    authorName
    authorUrl
    clientId
    clientSecret
    comingSoon
    createdAt
    description
    docsUrl
    enabledContexts
    id
    imageId
    installed
    locked
    name
    networkId
    privacyPolicyUrl
    requiredPermissions
    requiredPlan
    secretToken
    slug
    standing
    status
    termsOfServiceUrl
    updatedAt
    webhookSignSecret
    webhookSubscriptions
    webhookUrl
    ${fields.banner
        ? `
      globalBanner {
        ${mediaGQLFields(fields.banner)}
      }
    `
        : ``}
    ${fields.createdBy
        ? `
      createdBy {
        ${memberGQLFields(fields.createdBy)}
      }
    `
        : ``}
    ${fields.customCodes
        ? `
      customCodes {
        body
        head
      }
    `
        : ``}
    ${fields.embeds
        ? `
      globalEmbeds {
        ${embedGQLFields(fields.embeds)}
      }
    `
        : ``}
    ${fields.favicon
        ? `
      globalFavicon {
        ${mediaGQLFields(fields.favicon)}
      }
    `
        : ``}
    ${fields.image
        ? `
      globalImage {
        ${mediaGQLFields(fields.image)}
      }
    `
        : ``}
    ${fields.images
        ? `
      globalImages {
        ${mediaGQLFields(fields.images)}
      }
    `
        : ``}
    ${fields.network
        ? `
      globalNetwork {
        ${pluralNetworkGQLFields(fields.network)}
      }
    `
        : ``}
    ${fields.updatedBy
        ? `
      updatedBy {
        ${memberGQLFields(fields.updatedBy)}
      }
    `
        : ``}
  `;
};

const globalAppsGQLQuery = (fields) => gql__default["default"] `
  query GlobalApps(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $status: StoreItemStatus
  ) {
    globalApps(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${globalAppGQLFields(fields)}
        }
      }
      nodes {
        ${globalAppGQLFields(fields)}
      }
    }
  }
`;
const globalAppGQLQuery = (fields) => gql__default["default"] `
  query GlobalApp($id: ID, $slug: String) {
    globalApp(
      id: $id, slug: $slug
    ) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalCreateAppGQLMutation = (fields) => gql__default["default"] `
  mutation globalCreateApp($input: CreateAppInput!) {
    globalCreateApp(input: $input) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalUpdateAppGQLMutation = (fields) => gql__default["default"] `
  mutation globalUpdateApp($id: ID!, $input: UpdateAppInput!) {
    globalUpdateApp(id: $id, input: $input) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalDeleteAppGQLMutation = (fields) => gql__default["default"] `
  mutation globalDeleteApp($id: ID!) {
    globalDeleteApp(id: $id) {
      ${globalAppGQLFields(fields)}
    }
  }
`;
const globalNetworksGQLQuery = (fields) => gql__default["default"] `
  query GlobalNetworks(
    $after: String
    $before: String
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $query: String
    $roleType: RoleType
  ) {
    globalNetworks(
      after: $after
      before: $before
      limit: $limit
      offset: $offset
      reverse: $reverse
      query: $query
      roleType: $roleType
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${pluralNetworkGQLFields(fields)}
        }
      }
      nodes {
        ${pluralNetworkGQLFields(fields)}
      }
    }
  }
`;
function globalRegenerateClientSecret(fields) {
    return gql__default["default"] `
    mutation globalRegenerateClientSecret($appId: ID!) {
      globalRegenerateClientSecret(appId: $appId) {
        ${globalAppGQLFields(fields)}
      }
    }
  `;
}
const globalCreateImageGQLMutation = () => gql__default["default"] `
  mutation globalCreateImages($input: [CreateImageInput!]!) {
    globalCreateImages(input: $input) {
      ${signedUrlGQLFields()}
    }
  }
`;
const globalTestAppWebhookGQLMutation = (fields) => gql__default["default"] `
  mutation globalTestAppWebhook($appId: ID!, $input: TestAppWebhookInput!) {
    globalTestAppWebhook(appId: $appId, input: $input) {
      ${actionGQLFields()}
    }
  }
`;

const BASIC_APP_COLLABORATOR_FIELDS = {};
const ALL_APP_COLLABORATOR_FIELDS = {
    app: 'basic',
};
const appCollaboratorGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_APP_COLLABORATOR_FIELDS;
    if (fields === 'all')
        fields = ALL_APP_COLLABORATOR_FIELDS;
    return `
    id
    appId
    email
    createdAt
    type
    ${fields.app
        ? `
      app {
        ${globalAppGQLFields(fields.app)}
      }
    `
        : ``}
  `;
};

const globalAppCollaboratorsQuery = (fields) => gql__default["default"] `
  query globalAppCollaborators($appId: String!) {
    globalAppCollaborators(appId: $appId) {
      ${appCollaboratorGQLFields(fields)}
    }
  }
`;
const globalAddAppCollaboratorGQLMutation = (fields) => gql__default["default"] `
  mutation globalAddAppCollaborator($appId: String!, $input: AddAppCollaboratorInput!) {
    globalAddAppCollaborator(appId: $appId, input: $input) {
      ${appCollaboratorGQLFields(fields)}
    }
  }
`;
const globalRemoveAppCollaboratorGQLMutation = (fields) => gql__default["default"] `
  mutation globalRemoveAppCollaborator($appId: String!, $collaboratorId: String!) {
    globalRemoveAppCollaborator(appId: $appId, collaboratorId: $collaboratorId) {
      ${actionGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const appPublicationGQLFields = (fields) => {
    return `
    id
    addedById
    itemId
    networkId
    createdAt
  `;
};

const globalAppPublicationsQuery = (fields) => gql__default["default"] `
  query globalAppPublications($appId: ID!) {
    globalAppPublications(appId: $appId) {
      ${appPublicationGQLFields()}
    }
  }
`;
const globalPublishAppPrivatelyGQLMutation = (fields) => gql__default["default"] `
  mutation globalPublishAppPrivately($appId: ID!, $networkId: ID!) {
    globalPublishAppPrivately(appId: $appId, networkId: $networkId) {
      ${appPublicationGQLFields()}
    }
  }
`;
const globalUnPublishAppPrivatelyGQLMutation = (fields) => gql__default["default"] `
  mutation globalUnPublishAppPrivately($appId: ID!, $networkId: ID!) {
    globalUnPublishAppPrivately(appId: $appId, networkId: $networkId) {
      ${actionGQLFields()}
    }
  }
`;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function eventTypeGQLFields(fields) {
    return `
    name
    description
    noun
    requiredScope
    shortDescription
    verb
  `;
}

const globalEventTypesQuery = (fields) => gql__default["default"] `
  query globalEventTypes {
    globalEventTypes {
      ${eventTypeGQLFields()}
    }
  }
`;

const BASIC_MODERATION_ITEM_ENTITY_FIELDS = {
    onMember: 'basic',
    onPost: 'basic',
};
const ALL_MODERATION_ITEM_ENTITY_FIELDS = {
    onMember: 'all',
    onPost: 'all',
};
const moderationItemEntityGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_MODERATION_ITEM_ENTITY_FIELDS;
    if (fields === 'all')
        fields = ALL_MODERATION_ITEM_ENTITY_FIELDS;
    return `
    __typename
    ${fields.onMember
        ? `
      ... on Member {
        ${memberGQLFields(fields.onMember)}
      }
    `
        : ``}
    ${fields.onPost
        ? `
      ... on Post {
        ${postGQLFields(fields.onPost)}
      }
    `
        : ``}
  `;
};

const BASIC_MODERATION_ITEM_REPORTER_FIELDS = {
    reporter: 'basic',
};
const ALL_MODERATION_ITEM_REPORTER_FIELDS = {
    reporter: 'all',
};
const moderationItemReporterGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_MODERATION_ITEM_REPORTER_FIELDS;
    if (fields === 'all')
        fields = ALL_MODERATION_ITEM_REPORTER_FIELDS;
    return `
    createdAt
    description
    id
    reportCategory
    updatedAt
    ${fields.reporter
        ? `
      reporter {
        ${memberGQLFields(fields.reporter)}
      }
    `
        : ``}
  `;
};

const BASIC_MODERATION_ITEM_FIELDS = {
    entity: 'basic',
    moderator: 'basic',
    reporters: {
        fields: 'basic',
        variables: { limit: 10 },
    },
};
const ALL_MODERATION_ITEM_FIELDS = {
    entity: 'all',
    moderator: 'all',
    reporters: {
        fields: 'all',
        variables: { limit: 10 },
    },
};
const moderationItemGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_MODERATION_ITEM_FIELDS;
    if (fields === 'all')
        fields = ALL_MODERATION_ITEM_FIELDS;
    return `
    createdAt
    description
    flaggedBy
    id
    spaceId
    status
    updatedAt
    ${fields.entity
        ? `
      entity {
        ${moderationItemEntityGQLFields(fields.entity)}
      }
    `
        : ``}
    ${fields.moderator
        ? `
      moderator {
        ${memberGQLFields(fields.moderator)}
      }
    `
        : ``}
    ${fields.reporters
        ? `
      reporters(limit: ${fields.reporters.variables.limit}) {
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
        nodes {
          ${moderationItemReporterGQLFields(fields.reporters.fields)}
        }
        edges {
          cursor
          node {
            ${moderationItemReporterGQLFields(fields.reporters.fields)}
          }
        }
      }
    `
        : ``}
  `;
};

const moderationItemGQLQuery = (fields) => gql__default["default"] `
  query ModerationItem($id: ID!) {
    moderationItem(id: $id) {
      ${moderationItemGQLFields(fields)}
    }
  }
`;
const moderationItemsGQLQuery = (fields) => gql__default["default"] `
  query ModerationItems(
    $after: String
    $before: String
    $entityId: String
    $entityType: ModerationEntityType
    $flaggedBy: FlaggedType
    $limit: Int!
    $offset: Int
    $reverse: Boolean
    $spaceId: String
    $status: ModerationStatus
  ) {
    moderationItems(
      after: $after
      before: $before
      entityId: $entityId
      entityType: $entityType
      flaggedBy: $flaggedBy
      limit: $limit
      offset: $offset
      reverse: $reverse
      spaceId: $spaceId
      status: $status
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${moderationItemGQLFields(fields)}
        }
      }
      nodes {
        ${moderationItemGQLFields(fields)}
      }
    }
  }
`;
const moderationItemReportersGQLQuery = (fields) => gql__default["default"] `
  query ModerationItemReporters(
    $after: String
    $before: String
    $limit: Int!
    $moderationId: String!
    $offset: Int
    $reverse: Boolean
  ) {
    moderationItemReporters(
      after: $after
      before: $before
      limit: $limit
      moderationId: $moderationId
      offset: $offset
      reverse: $reverse
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ${moderationItemReporterGQLFields(fields)}
        }
      }
      nodes {
        ${moderationItemReporterGQLFields(fields)}
      }
    }
  }
`;
const moderationSettingsGQLQuery = () => gql__default["default"] `
  query ModerationSettings {
    moderationSettings {
      customBlacklist
      enableBlacklisting
      useDefaultBlacklisting
    }
  }
`;
const updateModerationSettingsGQLMutation = () => gql__default["default"] `
  mutation UpdateModerationSettings($input: UpdateModerationSettingsInput!) {
    updateModerationSettings(input: $input) {
      customBlacklist
      enableBlacklisting
      useDefaultBlacklisting
    }
  }
`;
const updateModerationItemGQLMutation = () => gql__default["default"] `
  mutation UpdateModerationItem($id: ID!, $input: UpdateModerationItemInput!) {
    updateModerationItem(id: $id, input: $input) {
      status
    }
  }
`;

const memberPostNotificationSettingsFields = () => `
  __typename
  enabled
  memberId
  postId
`;

const networkNotificationSettingsFields = () => `
    __typename
    enabled
    channel
    isDefault
    mention
    reaction
    sameAsDefault
`;

const BASIC_PAYLOAD_FIELDS = {};
const ALL_PAYLOAD_FIELDS = {
    media: 'all',
    member: 'basic',
    post: 'basic',
    space: 'basic',
};
function payloadGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_PAYLOAD_FIELDS;
    if (fields === 'all')
        fields = ALL_PAYLOAD_FIELDS;
    return `
    id
    name
    summary
    type
    ${fields.media
        ? `
      media {
        ${mediaGQLFields(fields.media)}
      }
    `
        : ``}
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
    ${fields.post
        ? `
      post {
        ${postGQLFields(fields.post)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
  `;
}

const BASIC_NOTIFICATION_FIELDS = {};
const ALL_NOTIFICATION_FIELDS = {
    actor: 'basic',
    object: 'basic',
    space: 'basic',
    target: 'basic',
};
function notificationGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_NOTIFICATION_FIELDS;
    if (fields === 'all')
        fields = ALL_NOTIFICATION_FIELDS;
    return `
    createdAt
    id
    meta {
      relativeUrl
      url
      body
      textBody
      title
      textTitle
      fullTitle
      textFullTitle
      reason
    }
    read
    verb
    ${fields.actor
        ? `
      actor {
        ${payloadGQLFields(fields.actor)}
      }
    `
        : ``}
    ${fields.object
        ? `
      object {
        ${payloadGQLFields(fields.object)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
    ${fields.target
        ? `
      target {
        ${payloadGQLFields(fields.target)}
      }
    `
        : ``}
  `;
}

const spaceNotificationSettingsFields = () => `
    __typename
    space {
      __typename
      id
      name
      slug
      image {
        ${mediaGQLFields('basic')}
      }
    }
    channel
    isDefault
    preference
    sameAsDefault
`;

function getNotificationsGQLQuery(fields) {
    return gql__default["default"] `
    query getNotifications($after: String, $limit: Int!) {
      notifications(after: $after, limit: $limit) {
        edges {
          cursor
          node {
            ${notificationGQLFields(fields)}
          }
        }
        nodes {
          ${notificationGQLFields(fields)}
        }
        pageInfo {
          endCursor
          hasNextPage
        }
        totalCount
      }
    }
  `;
}
function getNotificationsCountGQLQuery() {
    return gql__default["default"] `
    query getNotificationsCount {
      notificationsCount {
        new
      }
    }
  `;
}
function getMemberNotificationSettingsGQLQuery() {
    return gql__default["default"] `
    query memberNotificationSettings($id: ID) {
      memberNotificationSettings(id: $id) {
        __typename
        network {
          ${networkNotificationSettingsFields()}
        }
        spaces {
          ${spaceNotificationSettingsFields()}
        }
      }
    }
  `;
}
function getMemberPostNotificationSettingsGQLQuery() {
    return gql__default["default"] `
    query memberPostNotificationSettings($memberId: ID, $postId: ID!) {
      memberPostNotificationSettings(memberId: $memberId, postId: $postId) {
        ${memberPostNotificationSettingsFields()}
      }
    }
  `;
}
function updateMemberPostNotificationSettingsGQLMutation() {
    return gql__default["default"] `
    mutation updateMemberPostNotificationSettings(
      $input: UpdateMemberPostNotificationSettingsInput!
      $memberId: ID
      $postId: ID!
    ) {
      updateMemberPostNotificationSettings(
        input: $input
        memberId: $memberId
        postId: $postId
      ) {
        ${memberPostNotificationSettingsFields()}
      }
    }
  `;
}
const updateNetworkNotificationSettingsGQLMutation = () => gql__default["default"] `
  mutation updateNetworkNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateMemberNetworkNotificationSettingsInput!
    $memberId: ID
  ) {
    updateMemberNetworkNotificationSettings(
      channel: $channel
      input: $input
      memberId: $memberId
    ) {
      ${networkNotificationSettingsFields()}
    }
  }
`;
const updateSpaceNotificationSettingsGQLMutation = () => gql__default["default"] `
  mutation updateSpaceNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateMemberSpaceNotificationSettingsInput!
    $memberId: ID
    $spaceId: ID!
  ) {
    updateMemberSpaceNotificationSettings(
      channel: $channel
      input: $input
      memberId: $memberId
      spaceId: $spaceId
    ) {
      ${spaceNotificationSettingsFields()}
    }
  }
`;
const readNotificationGQLMutation = (fields) => gql__default["default"] `
  mutation ReadNotification($notificationId: ID!) {
    readNotification(notificationId: $notificationId) {
      ${actionGQLFields()}
    }
  }
`;
const readNotificationsGQLMutation = (fields) => gql__default["default"] `
  mutation ReadNotifications($ids: [ID!]!) {
    readNotifications(ids: $ids) {
      ${actionGQLFields()}
    }
  }
`;
const deleteNotificationGQLMutation = (fields) => gql__default["default"] `
  mutation DeleteNotification($notificationId: ID!) {
    deleteNotification(notificationId: $notificationId) {
      ${actionGQLFields()}
    }
  }
`;
const deleteNotificationsGQLMutation = (fields) => gql__default["default"] `
  mutation DeleteNotifications($ids: [ID!]!) {
    deleteNotifications(ids: $ids) {
      ${actionGQLFields()}
    }
  }
`;
const clearNotificationsCountGQLMutation = (fields) => gql__default["default"] `
  mutation ClearNotificationsCount {
    clearNotificationsCount {
      ${actionGQLFields()}
    }
  }
`;
const unsubscribeFromNotificationGQLMutation = (fields) => gql__default["default"] `
    mutation UnsubscribeFromNotification($input: UnsubscribeWithTokenInput!) {
      unsubscribeFromNotification(input: $input) {
        ${actionGQLFields()}
      }
    }
  `;
const updateSpaceDefaultNotificationSettingsGQLMutation = () => gql__default["default"] `
  mutation UpdateSpaceDefaultNotificationSettings(
    $channel: NotificationChannel!
    $input: UpdateSpaceDefaultNotificationSettingsInput!
    $spaceId: ID!
  ) {
    updateSpaceDefaultNotificationSettings(
      channel: $channel
      input: $input
      spaceId: $spaceId
    ) {
      channel
      enabled
      isDefault
      preference
      sameAsDefault
    }
  }
`;
const spaceDefaultNotificationSettingsGQLQuery = () => gql__default["default"] `
  query SpaceDefaultNotificationSettings($spaceId: ID!) {
    spaceDefaultNotificationSettings(spaceId: $spaceId) {
      channel
      enabled
      isDefault
      preference
      sameAsDefault
    }
  }
`;

const extraPropertiesGQLQuery = () => gql__default["default"] `
  query ExtraProperties(
    $entityId: String
    $entityType: ExtraPropertyEntityType!
    $keys: [String!]
  ) {
    extraProperties(entityId: $entityId, entityType: $entityType, keys: $keys) {
      key
      value
    }
  }
`;

const BASIC_REPORT_ENTITIES_FIELDS = {
    actor: 'basic',
    app: 'basic',
    member: 'basic',
    network: 'basic',
    post: 'basic',
    space: 'basic',
    tag: 'basic',
};
const ALL_REPORT_ENTITIES_FIELDS = {
    actor: 'all',
    app: 'all',
    member: 'all',
    network: 'all',
    post: 'all',
    space: 'all',
    tag: 'all',
};
const reportEntitiesGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_REPORT_ENTITIES_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_ENTITIES_FIELDS;
    return `
    __typename
    ${fields.actor
        ? `
    actor {
      ${memberGQLFields(fields.actor)}
    }
    `
        : ``}
    ${fields.app
        ? `
    app {
      ${appGQLFields(fields.app)}
    }
    `
        : ``}
    ${fields.member
        ? `
    member {
      ${memberGQLFields(fields.member)}
    }
    `
        : ``}
    ${fields.network
        ? `
    network {
      ${networkGQLFields(fields.network)}
    }
    `
        : ``}
    ${fields.post
        ? `
      post {
        ${postGQLFields(fields.post)}
      }
    `
        : ``}
    ${fields.space
        ? `
      space {
        ${spaceGQLFields(fields.space)}
      }
    `
        : ``}
    ${fields.tag
        ? `
      tag {
        ${tagGQLFields(fields.tag)}
      }
    `
        : ``}
  `;
};

const BASIC_REPORT_PAYLOAD_FIELDS = {};
const ALL_REPORT_PAYLOAD_FIELDS = {
    entities: 'basic',
};
const reportRecordGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_REPORT_PAYLOAD_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_PAYLOAD_FIELDS;
    return `
    payload {
      key
      value
    }
    ${fields.entities
        ? `
    entities {
      ${reportEntitiesGQLFields(fields === null || fields === void 0 ? void 0 : fields.entities)}
    }
    `
        : ``}
  `;
};

const getActivityLogsGQLQuery = (fields) => gql__default["default"] `
  query ActivityLogs($query: String!) {
    activityLogs(query: $query) {
      ${reportRecordGQLFields(fields)}
    }
  }
`;

const BASIC_REPORTABLE_ENTITY_FIELDS = {};
const ALL_REPORTABLE_ENTITY_FIELDS = {
    onMember: 'basic',
    onPost: 'basic',
    onSpace: 'basic',
    onTag: 'basic',
};
function reportableEntityGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORTABLE_ENTITY_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORTABLE_ENTITY_FIELDS;
    return `
    __typename
    ${fields.onMember
        ? `
      ... on Member {
        ${memberGQLFields(fields.onMember)}
      }
    `
        : ``}
    ${fields.onPost
        ? `
      ... on Post {
        ${postGQLFields(fields.onPost)}
      }
    `
        : ``}
    ${fields.onSpace
        ? `
      ... on Space {
        ${spaceGQLFields(fields.onSpace)}
      }
    `
        : ``}
    ${fields.onTag
        ? `
      ... on Tag {
        ${tagGQLFields(fields.onTag)}
      }
    `
        : ``}
  `;
}

const BASIC_REPORT_DATA_VALUE_FIELDS = {};
const ALL_REPORT_DATA_VALUE_FIELDS = {
    onChartData: 'basic',
    onEntityReport: 'basic',
    onIntValue: 'basic',
    onStringValue: 'basic',
};
function reportDataValueGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORT_DATA_VALUE_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_DATA_VALUE_FIELDS;
    return `
    __typename
    ${fields.onIntValue
        ? `
      ... on IntValue {
        int
      }
    `
        : ``}
    ${fields.onChartData
        ? `
      ... on ChartData {
        label
        points
        value
      }
    `
        : ``}
    ${fields.onEntityReport
        ? `
      ... on EntityReport {
        ${entityReportGQLFields(fields.onEntityReport)}
      }
    `
        : ``}
    ${fields.onStringValue
        ? `
      ... on StringValue {
        string
      }
    `
        : ``}
  `;
}

const BASIC_REPORT_DATA_FIELDS = {};
const ALL_REPORT_DATA_FIELDS = {
    previousValue: 'basic',
    value: 'basic',
};
function reportDataGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORT_DATA_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_DATA_FIELDS;
    return `
    description
    key
    type
    ${fields.value
        ? `
      value {
        ${reportDataValueGQLFields(fields.value)}
      }
    `
        : ``}
    ${fields.previousValue
        ? `
      previousValue {
        ${reportDataValueGQLFields(fields.previousValue)}
      }
    `
        : ``}
  `;
}

const BASIC_ENTITY_REPORT_FIELDS = {};
const ALL_ENTITY_REPORT_FIELDS = {
    entity: 'basic',
    data: 'basic',
};
function entityReportGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_ENTITY_REPORT_FIELDS;
    if (fields === 'all')
        fields = ALL_ENTITY_REPORT_FIELDS;
    return `
    description
    endDate
    entityId
    entityType
    startDate
    tooltip
    ${fields.data
        ? `
      data {
        ${reportDataGQLFields(fields.data)}
      }
    `
        : ``}
    ${fields.entity
        ? `
      entity {
        ${reportableEntityGQLFields(fields.entity)}
      }
    `
        : ``}
  `;
}

const BASIC_LEADERBOARD_FIELDS = {};
const ALL_LEADERBOARD_FIELDS = {
    member: 'basic',
    score: 'basic',
};
const DEFAULT_LEADERBOARD_FIELDS = {
    member: 'default',
    score: 'basic',
};
const leaderboardGQLFields = (fields) => {
    if (fields === 'basic')
        fields = BASIC_LEADERBOARD_FIELDS;
    if (fields === 'all')
        fields = ALL_LEADERBOARD_FIELDS;
    if (fields === 'default')
        fields = DEFAULT_LEADERBOARD_FIELDS;
    return `
    memberId
    ${fields.score ? 'score' : ''}
    ${fields.member
        ? `
      member {
        ${memberGQLFields(fields.member)}
      }
    `
        : ``}
  `;
};

function getLeaderboardGQLQuery(fields) {
    return gql__default["default"] `
    query getLeaderboard(
      $input: ReportInput!
    ){
      leaderboard(input: $input) {
        ${memberGQLFields(fields)}
      }
    }
  `;
}
const getLeaderboardWithScoresGQLQuery = (fields) => gql__default["default"] `
  query LeaderboardWithScores(
    $includeAuthMember: Boolean!
    $input: ReportInput!
  ) {
    leaderboardWithScores(
      includeAuthMember: $includeAuthMember
      input: $input
    ) {
      ${leaderboardGQLFields(fields)}
    }
  }
`;

const BASIC_REPORT_FIELDS = {};
const ALL_REPORT_FIELDS = {
    data: 'basic',
};
function reportGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_REPORT_FIELDS;
    if (fields === 'all')
        fields = ALL_REPORT_FIELDS;
    return `
    description
    endDate
    previousValue
    slug
    startDate
    title
    tooltip
    value
    ${fields.data
        ? `
      data {
        ${reportDataGQLFields(fields.data)}
      }
    `
        : ``}
  `;
}

function getReportGQLQuery(fields) {
    return gql__default["default"] `
    query getReport(
      $input: ReportInput!
      $spaceId: String
    ){
      report(input: $input, spaceId: $spaceId) {
        ${reportGQLFields(fields)}
      }
    }
  `;
}

const BASIC_SEARCH_ENTITY_FIELDS = {};
const ALL_SEARCH_ENTITY_FIELDS = {
    in: {
        image: 'basic',
    },
    by: 'basic',
    media: 'basic',
};
function searchEntityGQLFields(fields) {
    if (fields === 'basic')
        fields = BASIC_SEARCH_ENTITY_FIELDS;
    if (fields === 'all')
        fields = ALL_SEARCH_ENTITY_FIELDS;
    return `
    content
    created
    entityId
    id
    subtitle
    title
    entityType
    ${fields.in
        ? `
      in {
        ... on Space {
          ${spaceGQLFields(fields.in)}
        }
      }
    `
        : ``}
    ${fields.by
        ? `
      by {
        ... on Member {
          ${memberGQLFields(fields.by)}
        }
      }
    `
        : ``}
    ${fields.media
        ? `
      media {
        ${mediaGQLFields(fields.media)}
      }
    `
        : ``}
  `;
}

function searchGQLQuery(fields) {
    return gql__default["default"] `
    query search($input: SearchInput!) {
      search(input: $input) {
        totalCount
        hits {
          entityType
          hits {
            ${searchEntityGQLFields(fields)}
          }
        }
      }
    }
  `;
}

exports.ALL_POST_FIELDS = ALL_POST_FIELDS;
exports.BASIC_POST_FIELDS = BASIC_POST_FIELDS;
exports.DEFAULT_POST_FIELDS = DEFAULT_POST_FIELDS;
exports.WITH_REPLY_POST_FIELDS = WITH_REPLY_POST_FIELDS;
exports.actionGQLFields = actionGQLFields;
exports.actionPermissionGQLFields = actionPermissionGQLFields;
exports.addMemberSchemaFieldGQLMutation = addMemberSchemaFieldGQLMutation;
exports.addReactionGQLMutation = addReactionGQLMutation;
exports.addSpaceMemberGQLMutation = addSpaceMemberGQLMutation;
exports.appCollaboratorGQLFields = appCollaboratorGQLFields;
exports.appGQLFields = appGQLFields;
exports.appGQLQuery = appGQLQuery;
exports.appInstallationGQLFields = appInstallationGQLFields;
exports.appInstallationsGQLQuery = appInstallationsGQLQuery;
exports.appPublicationGQLFields = appPublicationGQLFields;
exports.approveSpaceMembershipRequestGQLMutation = approveSpaceMembershipRequestGQLMutation;
exports.appsGQLQuery = appsGQLQuery;
exports.archiveMemberSchemaFieldGQLMutation = archiveMemberSchemaFieldGQLMutation;
exports.assignBadgeGQLMutation = assignBadgeGQLMutation;
exports.authMemberQuery = authMemberQuery;
exports.authTokenGQLFields = authTokenGQLFields;
exports.badgeGQLFields = badgeGQLFields;
exports.baseCustomFieldSchemaGQLFields = baseCustomFieldSchemaGQLFields;
exports.basketsGQLQuery = basketsGQLQuery;
exports.billingDetailsGQLFields = billingDetailsGQLFields;
exports.billingDetailsGQLQuery = billingDetailsGQLQuery;
exports.blockGQLFields = blockGQLFields;
exports.cancelEmailUpdateGQLMutation = cancelEmailUpdateGQLMutation;
exports.clearNewDomainGQLMutation = clearNewDomainGQLMutation;
exports.clearNotificationsCountGQLMutation = clearNotificationsCountGQLMutation;
exports.collectionGQLFields = collectionGQLFields;
exports.confirmResetPasswordGQLMutation = confirmResetPasswordGQLMutation;
exports.createBadgeGQLMutation = createBadgeGQLMutation;
exports.createCollectionGQLMutation = createCollectionGQLMutation;
exports.createEmojisGQLMutation = createEmojisGQLMutation;
exports.createFilesGQLMutation = createFilesGQLMutation;
exports.createImageGQLMutation = createImageGQLMutation;
exports.createPostGQLQuery = createPostGQLQuery;
exports.createReplyGQLQuery = createReplyGQLQuery;
exports.createSpaceGQLQuery = createSpaceGQLQuery;
exports.createSpaceTypeGQLMutation = createSpaceTypeGQLMutation;
exports.createTagGQLMutation = createTagGQLMutation;
exports.customCodeGQLFields = customCodeGQLFields;
exports.customFieldSchemaGQLFields = customFieldSchemaGQLFields;
exports.customFieldsSchemaGQLFields = customFieldsSchemaGQLFields;
exports.declineSpaceMembershipRequestGQLMutation = declineSpaceMembershipRequestGQLMutation;
exports.deleteBadgeGQLMutation = deleteBadgeGQLMutation;
exports.deleteCollectionGQLMutation = deleteCollectionGQLMutation;
exports.deleteMemberGQLMutation = deleteMemberGQLMutation;
exports.deleteMemberSchemaFieldGQLMutation = deleteMemberSchemaFieldGQLMutation;
exports.deleteNotificationGQLMutation = deleteNotificationGQLMutation;
exports.deleteNotificationsGQLMutation = deleteNotificationsGQLMutation;
exports.deletePostGQLMutation = deletePostGQLMutation;
exports.deleteSpaceGQLMutation = deleteSpaceGQLMutation;
exports.deleteSsoMembershipGQLMutation = deleteSsoMembershipGQLMutation;
exports.domainAvailabilityGQLQuery = domainAvailabilityGQLQuery;
exports.emailLogGQLFields = emailLogGQLFields;
exports.emailLogsGQLQuery = emailLogsGQLQuery;
exports.embedGQLFields = embedGQLFields;
exports.embedGQLQuery = embedGQLQuery;
exports.emojiGQLFields = emojiGQLFields;
exports.entityReportGQLFields = entityReportGQLFields;
exports.eventTypeGQLFields = eventTypeGQLFields;
exports.exploreSpacesGQLQuery = exploreSpacesGQLQuery;
exports.extraPropertiesGQLQuery = extraPropertiesGQLQuery;
exports.getActivityLogsGQLQuery = getActivityLogsGQLQuery;
exports.getAppNetworkSettingsGQLQuery = getAppNetworkSettingsGQLQuery;
exports.getAppSpaceSettingsGQLQuery = getAppSpaceSettingsGQLQuery;
exports.getCollectionGQLQuery = getCollectionGQLQuery;
exports.getCollectionsGQLQuery = getCollectionsGQLQuery;
exports.getFeedGQLQuery = getFeedGQLQuery;
exports.getInvitationLinkGQLQuery = getInvitationLinkGQLQuery;
exports.getLeaderboardGQLQuery = getLeaderboardGQLQuery;
exports.getLeaderboardWithScoresGQLQuery = getLeaderboardWithScoresGQLQuery;
exports.getLimitedTokenGQLQuery = getLimitedTokenGQLQuery;
exports.getMemberGQLQuery = getMemberGQLQuery;
exports.getMemberInvitationsGQLQuery = getMemberInvitationsGQLQuery;
exports.getMemberNotificationSettingsGQLQuery = getMemberNotificationSettingsGQLQuery;
exports.getMemberPostNotificationSettingsGQLQuery = getMemberPostNotificationSettingsGQLQuery;
exports.getMemberPostsGQLQuery = getMemberPostsGQLQuery;
exports.getMemberSpaceMembershipRequestGQLQuery = getMemberSpaceMembershipRequestGQLQuery;
exports.getMemberSpacesGQLQuery = getMemberSpacesGQLQuery;
exports.getMembersGQLQuery = getMembersGQLQuery;
exports.getNetworkGQLQuery = getNetworkGQLQuery;
exports.getNotificationsCountGQLQuery = getNotificationsCountGQLQuery;
exports.getNotificationsGQLQuery = getNotificationsGQLQuery;
exports.getPageGqlQuery = getPageGqlQuery;
exports.getPermissionsGQLQuery = getPermissionsGQLQuery;
exports.getPostGQLQuery = getPostGQLQuery;
exports.getPostTypeGQLQuery = getPostTypeGQLQuery;
exports.getPostTypesGQLQuery = getPostTypesGQLQuery;
exports.getPostsGQLQuery = getPostsGQLQuery;
exports.getRepliesGQLQuery = getRepliesGQLQuery;
exports.getReportGQLQuery = getReportGQLQuery;
exports.getRolesGQLQuery = getRolesGQLQuery;
exports.getSpaceGQLQuery = getSpaceGQLQuery;
exports.getSpaceMembersGQLQuery = getSpaceMembersGQLQuery;
exports.getSpacePinnedPostGQLQuery = getSpacePinnedPostGQLQuery;
exports.getSpacePostTypeGQLQuery = getSpacePostTypeGQLQuery;
exports.getSpacePostTypesGQLQuery = getSpacePostTypesGQLQuery;
exports.getSpaceRolesGQLQuery = getSpaceRolesGQLQuery;
exports.getSpaceTaggedPostsGQLQuery = getSpaceTaggedPostsGQLQuery;
exports.getSpaceTypesGQLQuery = getSpaceTypesGQLQuery;
exports.getSpacesByIdsGQLQuery = getSpacesByIdsGQLQuery;
exports.getSpacesBySlugsGQLQuery = getSpacesBySlugsGQLQuery;
exports.getSpacesGQLQuery = getSpacesGQLQuery;
exports.getTagsGQLQuery = getTagsGQLQuery;
exports.getTokensGQLQuery = getTokensGQLQuery;
exports.globalAddAppCollaboratorGQLMutation = globalAddAppCollaboratorGQLMutation;
exports.globalAppCollaboratorsQuery = globalAppCollaboratorsQuery;
exports.globalAppGQLFields = globalAppGQLFields;
exports.globalAppGQLQuery = globalAppGQLQuery;
exports.globalAppPublicationsQuery = globalAppPublicationsQuery;
exports.globalAppsGQLQuery = globalAppsGQLQuery;
exports.globalCreateAppGQLMutation = globalCreateAppGQLMutation;
exports.globalCreateImageGQLMutation = globalCreateImageGQLMutation;
exports.globalDeleteAppGQLMutation = globalDeleteAppGQLMutation;
exports.globalEventTypesQuery = globalEventTypesQuery;
exports.globalNetworksGQLQuery = globalNetworksGQLQuery;
exports.globalPublishAppPrivatelyGQLMutation = globalPublishAppPrivatelyGQLMutation;
exports.globalRegenerateClientSecret = globalRegenerateClientSecret;
exports.globalRemoveAppCollaboratorGQLMutation = globalRemoveAppCollaboratorGQLMutation;
exports.globalTestAppWebhookGQLMutation = globalTestAppWebhookGQLMutation;
exports.globalUnPublishAppPrivatelyGQLMutation = globalUnPublishAppPrivatelyGQLMutation;
exports.globalUpdateAppGQLMutation = globalUpdateAppGQLMutation;
exports.hidePostGQLMutation = hidePostGQLMutation;
exports.imageGQLFields = imageGQLFields;
exports.inputPathPermissionsGQLFields = inputPathPermissionsGQLFields;
exports.installAppGQLMutation = installAppGQLMutation;
exports.invitationLinkValidityGQLQuery = invitationLinkValidityGQLQuery;
exports.inviteMembersGQLQuery = inviteMembersGQLQuery;
exports.invoicesGQLQuery = invoicesGQLQuery;
exports.isAuthorizedGQLFields = isAuthorizedGQLFields;
exports.joinNetworkMutation = joinNetworkMutation;
exports.joinNetworkWithInvitationLinkMutation = joinNetworkWithInvitationLinkMutation;
exports.joinNetworkWithTokenMutation = joinNetworkWithTokenMutation;
exports.joinSpaceGQLMutation = joinSpaceGQLMutation;
exports.leaderboardGQLFields = leaderboardGQLFields;
exports.leaveSpaceGQLMutation = leaveSpaceGQLMutation;
exports.loginNetworkQuery = loginNetworkQuery;
exports.logoutMutation = logoutMutation;
exports.mediaGQLFields = mediaGQLFields;
exports.mediaURLGQLFields = mediaURLGQLFields;
exports.memberAuthMemberPropsGQLFields = memberAuthMemberPropsGQLFields;
exports.memberGQLFields = memberGQLFields;
exports.memberInvitationGQLFields = memberInvitationGQLFields;
exports.memberInvitationValidityGQLQuery = memberInvitationValidityGQLQuery;
exports.memberPostNotificationSettingsFields = memberPostNotificationSettingsFields;
exports.moderationItemEntityGQLFields = moderationItemEntityGQLFields;
exports.moderationItemGQLFields = moderationItemGQLFields;
exports.moderationItemGQLQuery = moderationItemGQLQuery;
exports.moderationItemReporterGQLFields = moderationItemReporterGQLFields;
exports.moderationItemReportersGQLQuery = moderationItemReportersGQLQuery;
exports.moderationItemsGQLQuery = moderationItemsGQLQuery;
exports.moderationSettingsGQLQuery = moderationSettingsGQLQuery;
exports.navigationSlatesGQLFields = navigationSlatesGQLFields;
exports.networkAuthMemberPropsGQLFields = networkAuthMemberPropsGQLFields;
exports.networkGQLFields = networkGQLFields;
exports.networkNotificationSettingsFields = networkNotificationSettingsFields;
exports.networkPublicInfoGQLFields = networkPublicInfoGQLFields;
exports.newDomainStatusGQLQuery = newDomainStatusGQLQuery;
exports.newThemesGQLFields = newThemesGQLFields;
exports.notificationGQLFields = notificationGQLFields;
exports.organizeCollectionsGQLMutation = organizeCollectionsGQLMutation;
exports.organizeSpacesInCollectionGQLMutation = organizeSpacesInCollectionGQLMutation;
exports.organizeSpacesInCollectionMutation = organizeSpacesInCollectionMutation;
exports.pageGqlFields = pageGqlFields;
exports.paginatedGQLFields = paginatedGQLFields;
exports.pathPermissionsGQLFields = pathPermissionsGQLFields;
exports.payloadGQLFields = payloadGQLFields;
exports.pinPostToSpaceGQLMutation = pinPostToSpaceGQLMutation;
exports.planGQLFields = planGQLFields;
exports.pluralNetworkGQLFields = pluralNetworkGQLFields;
exports.postAuthMemberPropsGQLFields = postAuthMemberPropsGQLFields;
exports.postGQLFields = postGQLFields;
exports.postReactionParticipantsGQLQuery = postReactionParticipantsGQLQuery;
exports.postTypeGQLFields = postTypeGQLFields;
exports.purchaseGQLMutation = purchaseGQLMutation;
exports.reactionGQLFields = reactionGQLFields;
exports.readNotificationGQLMutation = readNotificationGQLMutation;
exports.readNotificationsGQLMutation = readNotificationsGQLMutation;
exports.removeReactionGQLMutation = removeReactionGQLMutation;
exports.removeSpaceMembersGQLMutation = removeSpaceMembersGQLMutation;
exports.reorderMemberSchemaFieldsGQLMutation = reorderMemberSchemaFieldsGQLMutation;
exports.reportDataGQLFields = reportDataGQLFields;
exports.reportDataValueGQLFields = reportDataValueGQLFields;
exports.reportEntitiesGQLFields = reportEntitiesGQLFields;
exports.reportGQLFields = reportGQLFields;
exports.reportRecordGQLFields = reportRecordGQLFields;
exports.reportableEntityGQLFields = reportableEntityGQLFields;
exports.requestSpaceMembershipGQLMutation = requestSpaceMembershipGQLMutation;
exports.resendVerificationGQLQuery = resendVerificationGQLQuery;
exports.revokeBadgeGQLMutation = revokeBadgeGQLMutation;
exports.roleGQLFields = roleGQLFields;
exports.searchEntityGQLFields = searchEntityGQLFields;
exports.searchGQLQuery = searchGQLQuery;
exports.sendResetPasswordEmailGQLMutation = sendResetPasswordEmailGQLMutation;
exports.signedUrlGQLFields = signedUrlGQLFields;
exports.slateGQLFields = slateGQLFields;
exports.spaceAuthMemberPropsGQLFields = spaceAuthMemberPropsGQLFields;
exports.spaceDefaultNotificationSettingsGQLQuery = spaceDefaultNotificationSettingsGQLQuery;
exports.spaceGQLFields = spaceGQLFields;
exports.spaceJoinRequestGQLFields = spaceJoinRequestGQLFields;
exports.spaceMemberGQLFields = spaceMemberGQLFields;
exports.spaceMembershipRequestsGQLQuery = spaceMembershipRequestsGQLQuery;
exports.spaceNotificationSettingsFields = spaceNotificationSettingsFields;
exports.spacePostTypeGQLFields = spacePostTypeGQLFields;
exports.spaceRoleGQLFields = spaceRoleGQLFields;
exports.spaceSeoDetailGQLFields = spaceSeoDetailGQLFields;
exports.spaceTypeGQLFields = spaceTypeGQLFields;
exports.spaceTypeGQLQuery = spaceTypeGQLQuery;
exports.ssoGQLFields = ssoGQLFields;
exports.ssoMembershipsGQLQuery = ssoMembershipsGQLQuery;
exports.ssoRedirectMutation = ssoRedirectMutation;
exports.ssoUrlGQLQuery = ssoUrlGQLQuery;
exports.ssosQuery = ssosQuery;
exports.tagGQLFields = tagGQLFields;
exports.themeColorGQLFields = themeColorGQLFields;
exports.themeColorsGQLFields = themeColorsGQLFields;
exports.themeGQLFields = themeGQLFields;
exports.themeTokensGQLFields = themeTokensGQLFields;
exports.themesGQLFields = themesGQLFields;
exports.topNavigationGQLFields = topNavigationGQLFields;
exports.transferToNewDomainGQLMutation = transferToNewDomainGQLMutation;
exports.unArchiveMemberSchemaFieldGQLMutation = unArchiveMemberSchemaFieldGQLMutation;
exports.unhidePostGQLMutation = unhidePostGQLMutation;
exports.uninstallAppGQLMutation = uninstallAppGQLMutation;
exports.unpinPostFromSpaceGQLMutation = unpinPostFromSpaceGQLMutation;
exports.unsubscribeFromNotificationGQLMutation = unsubscribeFromNotificationGQLMutation;
exports.updateAppNetworkSettingsGQLMutation = updateAppNetworkSettingsGQLMutation;
exports.updateBadgeGQLMutation = updateBadgeGQLMutation;
exports.updateBillingDetailsGQLMutation = updateBillingDetailsGQLMutation;
exports.updateCollectionGQLMutation = updateCollectionGQLMutation;
exports.updateCustomSsoGQLMutation = updateCustomSsoGQLMutation;
exports.updateDefaultSsoStatusGQLMutation = updateDefaultSsoStatusGQLMutation;
exports.updateImageGQLMutation = updateImageGQLMutation;
exports.updateJwtSsoGQLMutation = updateJwtSsoGQLMutation;
exports.updateMemberGQLQuery = updateMemberGQLQuery;
exports.updateMemberPostNotificationSettingsGQLMutation = updateMemberPostNotificationSettingsGQLMutation;
exports.updateMemberSchemaFieldGQLMutation = updateMemberSchemaFieldGQLMutation;
exports.updateMemberSpaceRoleGQLMutation = updateMemberSpaceRoleGQLMutation;
exports.updateModerationItemGQLMutation = updateModerationItemGQLMutation;
exports.updateModerationSettingsGQLMutation = updateModerationSettingsGQLMutation;
exports.updateNetworkGQLQuery = updateNetworkGQLQuery;
exports.updateNetworkNotificationSettingsGQLMutation = updateNetworkNotificationSettingsGQLMutation;
exports.updateNewDomainGQLMutation = updateNewDomainGQLMutation;
exports.updatePasswordWithTokenGQLMutation = updatePasswordWithTokenGQLMutation;
exports.updatePostGQLMutation = updatePostGQLMutation;
exports.updateSlatesGQLMutation = updateSlatesGQLMutation;
exports.updateSpaceDefaultNotificationSettingsGQLMutation = updateSpaceDefaultNotificationSettingsGQLMutation;
exports.updateSpaceGQLMutation = updateSpaceGQLMutation;
exports.updateSpaceHighlightedTagsMutation = updateSpaceHighlightedTagsMutation;
exports.updateSpaceNotificationSettingsGQLMutation = updateSpaceNotificationSettingsGQLMutation;
exports.updateSpacePostTypeGQLMutation = updateSpacePostTypeGQLMutation;
exports.updateTagGQLMutation = updateTagGQLMutation;
exports.upsertThemeGQLMutation = upsertThemeGQLMutation;
exports.vatTypesGQLQuery = vatTypesGQLQuery;
exports.verifyMemberMutation = verifyMemberMutation;
