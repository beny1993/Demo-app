import { ClientError, ErrorResponse } from '../lib/response.js';
import { GraphQLClient as BaseGraphQLClient } from 'graphql-request';
import { DocumentNode } from 'graphql';
export declare type TribeClientOptions = {
    graphqlUrl?: string;
    accessToken?: string;
    clientId?: string;
    clientSecret?: string;
    notifyOnTokenExpiration?: boolean;
    fetch?: typeof fetch;
    onError?: (errors: ErrorResponse[], client: GraphqlClient, error?: null | ClientError) => void;
};
declare type RequestOptions = {
    query: string | DocumentNode;
    variables?: Record<string, any>;
    customToken?: string;
    useBasicToken?: boolean;
};
export declare class GraphqlClient extends BaseGraphQLClient {
    private accessToken?;
    private clientId?;
    private clientSecret?;
    private notifyOnTokenExpiration;
    private onError?;
    private tokenExpirationTimeout?;
    private tokenExpirationHandler;
    constructor(options: TribeClientOptions);
    private getBasicToken;
    authorizedRequest<T>(options: RequestOptions): Promise<T>;
    setToken(accessToken: string): void;
}
export {};
